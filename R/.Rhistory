temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
temp_2 <- temp_2[which.min(temp_2$measured_proteomics_WT),]
synthetases_to_merge <- rbind(synthetases_to_merge, temp_2)
}
resp_and_expression <- left_join(resp_and_expression, synthetases_to_merge, by = "Amino_acid_1_letter")
# Plot average nDEP vs. avg expression - color by amino acid type
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = molecular_weight_Da)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# tRNA abundance from Cozen et al., vs. log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression, but color by tRNA synthetase abundance from van der Haar, 2008
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# Same, but color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = amino_acid_type)) +
geom_point() +
theme_light()
# Same, but color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = amino_acid_charge)) +
geom_point() +
theme_light()
# Same, but color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = molecular_weight_Da)) +
geom_point() +
theme_light()
# tRNA abundance from Cozen et al., vs. log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression, but color by tRNA synthetase abundance from our WT samples
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = measured_proteomics_WT)) +
geom_point() +
theme_light()
# Same, but color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = mean_reads_per_tRNA, col = amino_acid_type)) +
geom_point() +
theme_light()
# Same, but color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = mean_reads_per_tRNA, col = amino_acid_charge)) +
geom_point() +
theme_light()
# Same, but color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = mean_reads_per_tRNA, col = molecular_weight_Da)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA-synthetase abundance") +
xlab("log2-tRNA synthetase abundance (from von der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by family size
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = chromosome_letter)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = molecular_weight_Da)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = measured_proteomics_WT, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA-synthetase abundance (measured in WTs)") +
xlab("log2-tRNA synthetase abundance (measured in WTs)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by family size
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (measured in WTs)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = nDEP, col = chromosome_letter)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (measured in WTs)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (measured in WTs)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (measured in WTs)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(measured_proteomics_WT), y = nDEP, col = molecular_weight_Da)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (measured in WTs)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase k_cat
ggplot(data = resp_and_expression, aes(x = log2(k_cat_value), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. log2(synthetase catalytic constant)") +
xlab(bquote(log2-k["cat"]))
# The synthetases for W seem to have a k_cat more than 10x those of other amino acids, so I am going to get rid of that one then repeat the plot
ggplot(data = resp_and_expression, aes(x = k_cat_value, y = nDEP)) +
geom_point() +
theme_light() +
coord_cartesian(xlim = c(0, 150))
# Not really a pattern I think, let's try synthetase abundance*k_cat
ggplot(data = resp_and_expression, aes(x = k_cat_value*synthetase_abundance, y = nDEP)) +
geom_point() +
theme_light() +
coord_cartesian(xlim = c(0, 500000))
# Get anticodon from codon and rename columns
anticodon_freq <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S1.csv", sep="")))
anticodon_freq$anticodon <- lapply(anticodon_freq[,colnames(anticodon_freq) == "Codon"], codon_to_anticodon)
anticodon_freq$anticodon <- as.character(anticodon_freq$anticodon)
anticodon_freq$anticodon <- as.factor(anticodon_freq$anticodon)
anticodon_freq <- anticodon_freq %>%
rename(codon_frequency_chu_2011 = Frequency)
# Merge to resp_and_expression
resp_and_expression <- left_join(resp_and_expression, anticodon_freq, by = "anticodon")
# Codon frequency vs. nDEP
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. codon frequency") +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by tRNA abundance from Cozen et al.
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = mean_reads_per_tRNA)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = log2(synthetase_abundance))) +
geom_point() +
theme_light() +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by family size
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by amino acid type
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = molecular_weight_Da)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from van der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# Family_count vs. major_count, as in 1.11., but color by amino acid carried - TODO
temp <- resp_and_expression %>%
dplyr::select(anticodon, Amino_acid_1_letter)
temp_2 <- left_join(family_sizes, temp, by = "anticodon") %>%
distinct(anticodon, .keep_all = T)
ggplot(data = temp_2, aes(x = Family_count, y = Major_count, col = Amino_acid_1_letter)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count == 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4,
max.overlaps = 100)
# Same, but use in the y axis the % of major tRNAs instead of the count
ggplot(data = temp_2, aes(x = Family_count, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the study") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3| anticodon == "CAA"),
aes(x = Family_count, y = Major_count/Family_count, label = anticodon, col = Amino_acid_1_letter),
size = 4)
# Same, but use in the y axis the % of major tRNAs instead of the count, and color by aa
ggplot(data = temp_2, aes(x = Family_size, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in total") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3 | anticodon == "CAA"),
aes(x = Family_size, y = Major_count/Family_count, label = anticodon, col = Amino_acid_1_letter),
size = 4)
fwrite(resp_and_expression, paste(base_dir, "Data/resp_and_expression.csv", sep=""))
View(resp_and_expression)
View(temp_2)
View(anticodon_freq)
# Been trying to figure out where the "n" column shows up for a bit, but haven't succeeded - just going to delete it and move on
resp_and_expression <- resp_and_expression %>%
dplyr::select(-n)
# Save
fwrite(resp_and_expression, paste(base_dir, "Data/resp_and_expression.csv", sep=""))
gc()
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
knitr::opts_chunk$set(echo = TRUE)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
View(resp_and_expression)
resp_measure_corrs <- resp_and_expression %>%
dplyr::select_if(is.numeric)
cor_mat <- round(cor(resp_measure_corrs, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(cor_mat)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ measured_proteomics_WT*k_cat_value*codon_frequency_chu_2011)
summary(fit)
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
condon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA,
synthetase_abundance_literature = synthetase_abundance,
synthetase_abundance_our_WTs = measured_proteomics_WT)
# With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
# With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
check_overdispersion(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 0)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
check_overdispersion(fit)
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
condon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA,
synthetase_abundance_literature = synthetase_abundance,
synthetase_abundance_our_WTs = measured_proteomics_WT)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 2)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
condon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA,
synthetase_abundance_literature = synthetase_abundance,
synthetase_abundance_our_WTs = measured_proteomics_WT)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 1)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 0
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 0)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 1
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 1)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 2
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 2)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 3
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 3)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 4
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 4)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 5
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 5)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# nDEP > 10
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 10)
## With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
## With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
check_overdispersion(fit)
# With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
check_overdispersion(fit)
