filter(nDEP > 2)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
condon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 5)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
condon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 0)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 1)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 2)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 3)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 4)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 5)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
resp_and_expression_modelling <- resp_and_expression_modelling %>%
filter(nDEP > 10)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance*catalytic_constant*condon_frequency*tRNA_expression)
summary(fit)
View(sample_layout)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAU#age-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/Alterna#iveAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# stats file
stats_file <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/report.stats.tsv.gz', header = T)
# Import the functions I have created in another file
#source("C:/MyStuff/tRNA_KOs/Scripts/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# stats file
stats_file <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/report.stats.tsv', header = T)
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
#source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAU#age-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/Alterna#iveAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# stats file
stats_file <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/report.stats.tsv.gz', header = T)
# Import the functions I have created in another file
#source("C:/MyStuff/tRNA_KOs/Scripts/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# stats file
stats_file <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/report.stats.tsv', header = T)
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
#source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/Alterna#iveAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# stats file
stats_file <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/report.stats.tsv.gz', header = T)
# Import the functions I have created in another file
#source("C:/MyStuff/tRNA_KOs/Scripts/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# stats file
stats_file <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/report.stats.tsv', header = T)
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
#source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# stats file
stats_file <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/report.stats.tsv.gz', header = T)
# Import the functions I have created in another file
#source("C:/MyStuff/tRNA_KOs/Scripts/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# stats file
stats_file <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/report.stats.tsv', header = T)
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
#source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# Fix the QC rows to say "QC" instead of "NA" in the columsn that don't apply
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
# Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
mutate(Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
# Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
# Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
# Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Come up with new colnames
new_names <- c("sample_group", "genes")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[5:nrow(proteomics_raw), colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
first_rows <- proteomics_raw[1:4, colnames(proteomics_raw) == strain]
out <- c(first_rows[,1], apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%         # Remove rows for which "genes" column is empty or has "Genes" as value
select(-sample_group & !contains('QC')) %>%                       # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'genes')                                 # Convert gene name column to rownames
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Add sample_names to sample_layout so that we can filter out in the next line
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Remove the sub-batch that went wrong
samples_in_wrong_batch <- sample_layout$sample_names[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, first_rows, out, batch_num, i, new_name, new_names, strain_and_batch, trna_name,
samples_in_wrong_batch)
ggplot(data = sample_layout, aes(x = Replicate, y = date)) +
geom_point()
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Get data PCA-ready
PCA_data <- as.data.frame(t(trna_ko))
# Get PCA tags for different cases - define a function for this, then call it before running the corresponding plot
get_PCA_tags <- function(PCA_data, sample_layout, type_of_tags) {
out <- c()
for (i in 1:nrow(PCA_data)) {
rowname <- rownames(PCA_data)[i]
out <- c(out, sample_layout[sample_layout$sample_names == rowname, type_of_tags][1])
}
return(out)
}
# FOR THESE ONES TO WORK AGAIN I WILL PROBABLY HAVE TO MERGE SAMPLE_LAYOUT AND MASTER_DATASET, PROBABLY EASY
#PCA_tags_aa <- get_PCA_tags(PCA_data, sample_layout, "AA")
#PCA_tags_chr <- get_PCA_tags(PCA_data, sample_layout, "chromosome")
#PCA_tags_anticodon <- get_PCA_tags(PCA_data, sample_layout, "anticodon")
#calculate principal components
results_PCA <- prcomp(PCA_data, scale = TRUE)
#reverse the signs
results_PCA$rotation <- -1*results_PCA$rotation
#calculate total variance explained by each principal component
var_explained =  results_PCA$sdev^2 / sum(results_PCA$sdev^2)
var_exp_PC1 = format(round(var_explained[1]*100, 3), nsmall = 3)
var_exp_PC2 = format(round(var_explained[2]*100, 3), nsmall = 3)
# Label by batch
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Replicate")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by batch - remove wrong sub-batch") +
theme_light()
# Label by date
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "date")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by date") +
theme_light()
# Label by Analysis.Plate.384
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.384")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.384") +
theme_light()
# Label by Analysis.Column.384
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Column.384")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Column.384") +
theme_light()
# Label by Analysis.Row.384
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Row.384")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Row.384") +
theme_light()
# Label by Analysis.Plate.96
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.96")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.96") +
theme_light()
# Label by Analysis.Row.96
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Row.96")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Row.96") +
theme_light()
# Label by Analysis.Column.96
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Column.96")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Column.96") +
theme_light()
# Label by Strain.Type (WT or KO)
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Strain.Type")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Strain.Type") +
theme_light()
# Label by Analysis.Plate.96_Replicate
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.96_Replicate")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.96_Analysis.Plate.384 - complete") +
theme_light()
# Label by Wrong_batch
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Wrong_batch")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Wrong_batch - full data") +
theme_light()
