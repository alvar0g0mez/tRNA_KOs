# Plot average nDEP vs. avg expression - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# tRNA abundance from Cozen et al., vs. log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression, but color by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# Same, but color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = amino_acid_type)) +
geom_point() +
theme_light()
# Same, but color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = amino_acid_charge)) +
geom_point() +
theme_light()
# Same, but color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = molecular_weight)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA-synthetase abundance") +
xlab("log2-tRNA synthetase abundance (from von der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by family size
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = chromosome.y)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase k_cat
ggplot(data = resp_and_expression, aes(x = log2(k_cat_value), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. log2(synthetase catalytic constant)") +
xlab(bquote(log2-k["cat"]))
# The synthetases for W seem to have a k_cat more than 10x those of other amino acids, so I am going to get rid of that one then repeat the plot
ggplot(data = resp_and_expression, aes(x = k_cat_value, y = nDEP)) +
geom_point() +
theme_light() +
coord_cartesian(xlim = c(0, 150))
# Not really a pattern I think, let's try synthetase abundance*k_cat
ggplot(data = resp_and_expression, aes(x = k_cat_value*synthetase_abundance, y = nDEP)) +
geom_point() +
theme_light() +
coord_cartesian(xlim = c(0, 500000))
# Create function to get anticodon from codon
exchange_individual_nucleotide <- function(nt) {
if (nt == "A") {return("U")}
else if (nt == "C") {return("G")}
else if (nt == "G") {return("C")}
else if (nt == "T") {return("A")}
else if (nt == "U") {return("A")}
else {return("Provided letter is not a nucleotide")}
}
get_anticodon_from_codon <- function(codon) {
anticodon <- ""
for (i in 1:nchar(codon)) {
nt <- substr(codon, i, i)
new_nt <- exchange_individual_nucleotide(nt)
anticodon <- paste(anticodon, new_nt, sep="")
}
return(anticodon)
}
# Get anticodon from codon and rename columns
anticodon_freq <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S1.csv", sep="")))
anticodon_freq$anticodon <- lapply(anticodon_freq[,colnames(anticodon_freq) == "Codon"], get_anticodon_from_codon)
anticodon_freq$anticodon <- as.character(anticodon_freq$anticodon)
anticodon_freq$anticodon <- as.factor(anticodon_freq$anticodon)
anticodon_freq <- anticodon_freq %>%
rename(codon_frequency_chu_2011 = Frequency)
# Merge to resp_and_expression
resp_and_expression <- left_join(resp_and_expression, anticodon_freq, by = "anticodon")
# Codon frequency vs. nDEP
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. codon frequency") +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by tRNA abundance from Cozen et al.
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = mean_reads_per_tRNA)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = log2(synthetase_abundance))) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by family size
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by amino acid type
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Family_count vs. major_count, as in 1.11., but color by amino acid carried - TODO
temp <- resp_and_expression %>%
dplyr::select(anticodon, AA)
temp_2 <- left_join(family_sizes, temp, by = "anticodon") %>%
distinct(anticodon, .keep_all = T)
ggplot(data = temp_2, aes(x = Family_count, y = Major_count, col = AA)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count == 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4,
max.overlaps = 100)
# Same, but use in the y axis the % of major tRNAs instead of the count
ggplot(data = temp_2, aes(x = Family_count, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the study") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3| anticodon == "CAA"),
aes(x = Family_count, y = Major_count/Family_count, label = anticodon, col = AA),
size = 4)
# Same, but use in the y axis the % of major tRNAs instead of the count, and color by aa
ggplot(data = temp_2, aes(x = Family_size, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in total") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3 | anticodon == "CAA"),
aes(x = Family_size, y = Major_count/Family_count, label = anticodon, col = AA),
size = 4)
fwrite(resp_and_expression, paste(base_dir, "Data/resp_and_expression.csv", sep=""))
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ synthetase_abundance*k_cat_value*codon_frequency_chu_2011)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
knitr::opts_chunk$set(echo = TRUE)
# Load list of all dataframes (one per strain) wiht the DE results
da <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
da <- da[names(da) != "WT"]
# Iterate over these dataframes
for (i in 1:length(da)) {
temp <- da[[i]]
# Since we are using all genes, not only DE ones, we need to rank them
rankings <- sign(temp$logFC)*(-log10(temp$adj.P.Val))
names(rankings) <- rownames(temp)
}
View(da)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# Extract the date for when each sample was run
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"))
# Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
# Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
# Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Come up with new colnames
new_names <- c("sample_group", "genes")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[5:nrow(proteomics_raw), colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
first_rows <- proteomics_raw[1:4, colnames(proteomics_raw) == strain]
out <- c(first_rows[,1], apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%             # Remove rows for which "genes" column is empty or has "Genes" as value
dplyr::select(-genes & !contains('QC')) %>%                                  # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'sample_group')                              # Convert gene name column to rownames
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Add sample_names to sample_layout so that we can filter out in the next line
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Remove the sub-batch that went wrong
samples_in_wrong_batch <- sample_layout$sample_names[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, first_rows, out, batch_num, i, new_name, new_names, strain_and_batch, trna_name,
samples_in_wrong_batch)
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$sample_names == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Fit linear model
fit <- lmFit(trna_ko_log, mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', number = Inf, sort.by = 'none')
}
# Check if the -Inf values in fit are caused by that protein being less detected overall
ameans <- fit[["Amean"]]
total_counts_per_prot <- apply(trna_ko, 1, sum)
zero_counts <- apply(trna_ko, 1, function(x) sum(unlist(lapply(x, function(x) x == 0)), use.names = F))
temp <- data.frame(ameans, total_counts_per_prot, zero_counts)
# At the alpha specified at the top of the document
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_001 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < alpha]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_001[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.RData", sep="")
saveRDS(de_proteins_list_001, file=output_file)
# At alpha= 0.05
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_005 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < 0.05]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_005[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.RData", sep="")
saveRDS(de_proteins_list_005, file=output_file)
saveRDS(da, file=paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$sample_names == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Fit linear model
fit <- lmFit(trna_ko_log, mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', number = Inf, sort.by = 'none')
}
View(da)
saveRDS(da, file=paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
da_2 <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
View(da_2)
# Load list of all dataframes (one per strain) wiht the DE results
da <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
da <- da[names(da) != "WT"]
for (i in 1:length(da)) {
temp <- da[[i]]
# Since we are using all genes, not only DE ones, we need to rank them
rankings <- sign(temp$logFC)*(-log10(temp$adj.P.Val))
names(rankings) <- rownames(temp)
}
sum(is.na(rankings))
# Load list of all dataframes (one per strain) wiht the DE results
da <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
da <- da[names(da) != "WT"]
# Create empty list to put the named ranked gene lists in
ranked_genes <- list()
# Iterate over these dataframes
for (i in 1:length(da)) {
temp <- da[[i]]
# Since we are using all genes, not only DE ones, we need to rank them
rankings <- sign(temp$logFC)*(-log10(temp$adj.P.Val))
names(rankings) <- rownames(temp)
# Add them to the list where we are saving them
ranked_genes[[names(da)[i]]] <- rankings
}
View(ranked_genes)
# Load list of all dataframes (one per strain) wiht the DE results
da <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
da <- da[names(da) != "WT"]
# Create empty list to put the named ranked gene lists in
ranked_genes <- list()
# Iterate over these dataframes
for (i in 1:length(da)) {
temp <- da[[i]]
# Since we are using all genes, not only DE ones, we need to rank them
rankings <- sign(temp$logFC)*(-log10(temp$adj.P.Val))
names(rankings) <- rownames(temp)
# Add them to the list where we are saving them
ranked_genes[[names(da)[i]]] <- rankings
# Plot
plot(rankings)
# Check max and min - to see if there is a need to correct for -Inf and +Inf
max(rankings)
min(rankings)
}
View(da)
# Load list of all dataframes (one per strain) wiht the DE results
da <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
da <- da[names(da) != "WT"]
# Create empty list to put the named ranked gene lists in
ranked_genes <- list()
# Iterate over these dataframes
for (i in 1:length(da)) {
temp <- da[[i]]
# Since we are using all genes, not only DE ones, we need to rank them
rankings <- sign(temp$logFC)*(-log10(temp$adj.P.Val))
names(rankings) <- rownames(temp)
rankings <- sort(rankings, decreasing = TRUE)
# Add them to the list where we are saving them
ranked_genes[[names(da)[i]]] <- rankings
# Plot
plot(rankings)
# Check max and min - to see if there is a need to correct for -Inf and +Inf
max(rankings)
min(rankings)
}
# Check max and min - to see if there is a need to correct for -Inf and +Inf
max(rankings)
min(rankings)
