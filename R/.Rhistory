aes(x = protein, y = CV_protein, label = protein),
size = 4)
proteins_with_high_CV <- plot_cv_per_protein$protein[plot_cv_per_protein$CV_protein > 0.4]
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain") +
xlab("Strain") +
ylab("Coefficient of variation")
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated #samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics[, colnames(proteomics) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_no_repeated_columns <- proteomics[,!(colnames(proteomics) %in% repeated_samples)]
proteomics_no_repeated_columns <- cbind(proteomics_no_repeated_columns, out_temp)
# Create dataset for ploting
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name, Anticodon, Amino_acid_1_letter)
high_cv_proteins_proteomics <- proteomics_no_repeated_columns %>%
dplyr::filter(protein %in% proteins_with_high_CV) %>%
pivot_longer(cols = !protein, names_to = "final_proteomics_colnames") %>%
left_join(temp_layout, by = "final_proteomics_colnames") %>%
dplyr::mutate(Anticodon = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Anticodon),
Amino_acid_1_letter = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Amino_acid_1_letter))
# Plot
proteins <- unique(high_cv_proteins_proteomics$protein)
## Iterate over the proteins and make the same plots for all of them
for (i in 1:length(proteins)) {
protein_selected <- proteins[i]
# Plot abundance of the protein per amino acid carried
plot <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected), aes(x = Amino_acid_1_letter, y = value)) +
geom_boxplot(fill = "grey") +
theme_light() +
xlab("Amino acid") +
ylab("log2(protein abundance)") +
labs(title = glue("Abundance of {protein_selected} by amino acid carried by the KOd tRNA"))
print(plot)
myLetters <- letters[1:26]                            # Need this to be able to re-order anticodons by amino acid
myLetters <- c(myLetters, "wt")                       # Need to add this so it doesn't break down because "WT" is not a letter
# Plot abundance of the protein per anticodon (tRNA family)
plot_2 <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected),
aes(x = fct_reorder(Anticodon, match(tolower(Amino_acid_1_letter), myLetters)), y = value, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab("Anticodon") +
ylab("log2(protein abundance)") +
labs(title = glue("Abundance of {protein_selected} by anticodon in the KOd tRNA"),
fill = "Amino acid")
print(plot_2)
}
# Get the average CV per strain (across the proteins) and add that information to the responsiveness dataset
mean_cv_per_strain <- plot_cv_per_strain %>%
group_by(Strain.Name) %>%
summarise_at(vars(CV_strain), list(mean_cv_per_strain = mean))
responsiveness <- left_join(responsiveness, mean_cv_per_strain, by = "Strain.Name")
# Plot
ggplot(data = responsiveness, aes(x = mean_cv_per_strain, y = nDEP)) +
geom_point() +
theme_light() +
xlab("Average CV per strain") +
geom_text_repel(data = subset(responsiveness, mean_cv_per_strain > 0.08 | nDEP > 500), aes(x = mean_cv_per_strain, y = nDEP, label = Strain.Name))
# Let's also calculate the correlation, just to be sure
cor(responsiveness$mean_cv_per_strain, responsiveness$nDEP, use = "pairwise.complete.obs")
# Correlation comes out positive but probably driven by the couple strains with over 500 DE proteins - let's see what happens if I remove those
temp <- responsiveness %>%
filter(nDEP < 500)
cor(temp$mean_cv_per_strain, temp$nDEP, use = "pairwise.complete.obs")
# Still positive correlation after that, so yeah, I think it's safe to say that high within-strain variability is not driving the lack of nDEPs
# On this note, let's also get the MAD heatmap Julia suggested, see what I can find there - kind of a visual representation of how variable each protein is in each strain
proteomics_data_log2_long <- proteomics_data_log2_long %>%
group_by(Strain.Name, protein) %>%
dplyr::mutate(mad_per_strain_per_protein = mad(value)) %>%
ungroup()
mad(c(6.993423, 7.154754, 7.484509))
df_for_heatmap <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, mad_per_strain_per_protein) %>%
dplyr::distinct(protein, Strain.Name, mad_per_strain_per_protein)
df_for_heatmap <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, mad_per_strain_per_protein) %>%
dplyr::distinct(protein, Strain.Name, mad_per_strain_per_protein)
View(df_for_heatmap)
2949*197
2949*198
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_viridis_d(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_viridis_d(limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_viridis_d(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Strain.Name, protein, label = mad_per_strain_per_protein), size = 3) +
scale_fill_viridis_d(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Strain.Name, protein, label = mad_per_strain_per_protein), size = 3) +
scale_fill_viridis_c(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
xlab("Strain") +
ylab("Protein")
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
labs(title = "Heatmap of the MAD across the 3 replicates of a strain, for each protein") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
proteomics_data_log2_long <- proteomics_data_log2_long %>%
group_by(Strain.Name, protein) %>%
dplyr::mutate(CV_per_strain_per_protein = robust_cv(value)) %>%
ungroup()
df_for_heatmap <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, CV_per_strain_per_protein) %>%
dplyr::distinct(protein, Strain.Name, CV_per_strain_per_protein)
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=CV_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="CV per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
labs(title = "Heatmap of the CV across the 3 replicates of a strain, for each protein") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain",
subtitle = "At protein level") +
xlab("Strain") +
ylab("Coefficient of variation")
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain",
subtitle = "At protein level - quantified from log2 precursor data") +
xlab("Strain") +
ylab("Coefficient of variation")
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="grey"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain",
subtitle = "At protein level - quantified from log2 precursor data") +
xlab("Strain") +
ylab("Coefficient of variation")
################################################################################
# Calculate robust CV (coefficient of variation)
################################################################################
robust_cv <- function(x, na.rm = TRUE) {
# Get rid of NAs in the input if specified
if (na.rm) x <- x[!is.na(x)]
# Return NA if there's only one value in the input
if (length(x) == 1) {
return(NA)
}
# Otherwise, calculate the CV and return it
else {
median_x <- median(x)
mad_x <- mad(x)
return(mad_x/median_x)
}
}
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/basic/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# Turn all dashes to underscores
sample_layout <- sample_layout %>%
dplyr::mutate(Sample.ID = str_replace_all(Sample.ID, "-", "_"),
Sample.ID.unique = str_replace_all(Sample.ID.unique, "-", "_"))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
dplyr::mutate(Position.Within.Plate.384 = case_when(nchar(as.character(Analysis.Column.384)) == 2 ~ paste(Analysis.Row.384, Analysis.Column.384, sep=""),
nchar(as.character(Analysis.Column.384)) == 1 ~ paste(Analysis.Row.384, 0, Analysis.Column.384, sep="")),
Position.Within.Plate.96 = case_when(nchar(as.character(Analysis.Column.96)) == 2 ~ paste(Analysis.Row.96, Analysis.Column.96, sep=""),
nchar(as.character(Analysis.Column.96)) == 1 ~ paste(Analysis.Row.96, 0, Analysis.Column.96, sep="")))
# Create a column that can match the colnames of the proteomics data as I get it from Boris
sample_layout <- sample_layout %>%
dplyr::mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
# Here I also deal with the  strains that are present twice! Label their replicates from 1 to 6 instead of 1 to 3 twice, which made it a bit hard to work with them
sample_layout <- sample_layout %>%
dplyr::mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
Strain.Name == "tV(AAC)J" & Strain.ID == 85 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tV(AAC)J" & Strain.ID == 87 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 96 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 97 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Add some columns - I used to do this in my main analysis file
## Fix the QC rows to say "QC" instead of "NA" in the columns that don't apply
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
## Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
dplyr::mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
dplyr::mutate(Injection_Order = str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
## Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
## Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
## Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
dplyr::mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Add a column with Strain.Name but using "." instead of "_", for makeContrasts()
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Name.Dots.Delete = str_replace_all(Strain.Name, "\\(", "."),
Strain.Name.Dots = str_replace_all(Strain.Name.Dots.Delete, "\\)", ".")) %>%
dplyr::select(-Strain.Name.Dots.Delete)
# Merge with master dataframe - I used to do this in the main tRNA script
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Save final version
if (working_from == "home") {
fwrite(sample_layout, "/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv")
} else {
fwrite(sample_layout, "S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv")
}
# This only works when run from the Charité computer, since the version of the sample_layout I am starting from is in the S drive
# This sample_layout was already prepared by Boris from previous ones, I'm just making some small modifications based on how I want to use it
# This file reads the sample layout by Boris from the S drive, modifies slightly and writes it to my directory within 30-0092
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/basic/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# Turn all dashes to underscores
sample_layout <- sample_layout %>%
dplyr::mutate(Sample.ID = str_replace_all(Sample.ID, "-", "_"),
Sample.ID.unique = str_replace_all(Sample.ID.unique, "-", "_"))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
dplyr::mutate(Position.Within.Plate.384 = case_when(nchar(as.character(Analysis.Column.384)) == 2 ~ paste(Analysis.Row.384, Analysis.Column.384, sep=""),
nchar(as.character(Analysis.Column.384)) == 1 ~ paste(Analysis.Row.384, 0, Analysis.Column.384, sep="")),
Position.Within.Plate.96 = case_when(nchar(as.character(Analysis.Column.96)) == 2 ~ paste(Analysis.Row.96, Analysis.Column.96, sep=""),
nchar(as.character(Analysis.Column.96)) == 1 ~ paste(Analysis.Row.96, 0, Analysis.Column.96, sep="")))
# Create a column that can match the colnames of the proteomics data as I get it from Boris
sample_layout <- sample_layout %>%
dplyr::mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
# Here I also deal with the  strains that are present twice! Label their replicates from 1 to 6 instead of 1 to 3 twice, which made it a bit hard to work with them
sample_layout <- sample_layout %>%
dplyr::mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
Strain.Name == "tV(AAC)J" & Strain.ID == 85 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tV(AAC)J" & Strain.ID == 87 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 96 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 97 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Add some columns - I used to do this in my main analysis file
## Fix the QC rows to say "QC" instead of "NA" in the columns that don't apply
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
## Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
dplyr::mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
dplyr::mutate(Injection_Order = str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
## Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
## Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
## Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
dplyr::mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Add a column with Strain.Name but using "." instead of "_", for makeContrasts()
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Name.Dots.Delete = str_replace_all(Strain.Name, "\\(", "."),
Strain.Name.Dots = str_replace_all(Strain.Name.Dots.Delete, "\\)", ".")) %>%
dplyr::select(-Strain.Name.Dots.Delete)
# Merge with master dataframe - I used to do this in the main tRNA script
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Save final version
if (working_from == "home") {
fwrite(sample_layout, "/home/alvaro/MyStuff/tRNA_KOs/Data/basic/sample_layout_alvaro.tsv")
} else {
fwrite(sample_layout, "S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv")
}
remotes::install_github("gadenbuie/foldr")
install.packages("remotes")
remotes::install_github("gadenbuie/foldr")
