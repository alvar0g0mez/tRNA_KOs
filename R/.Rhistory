gmt_lines <- sapply(names(go_list), function(go_term) {
paste(c(go_term, "na", go_list[[go_term]]), collapse = "\t")
})
# Step 6: Save as a .gmt file
writeLines(gmt_lines, con = paste(base_dir, "Data/Other/enrichment_analysis/yeast_GO_BP.gmt", sep=""))
# Step 1: Connect to Ensembl Fungi
ensembl_fungi <- useMart("fungi_mart", dataset = "scerevisiae_eg_gene", host = "https://fungi.ensembl.org")
# Step 2: Retrieve GO annotations
go_annotations <- getBM(attributes = c("ensembl_gene_id", "external_gene_name",
"go_id", "name_1006", "namespace_1003"),
mart = ensembl_fungi)
# Check the first few rows
head(go_annotations)
# Step 3: Filter for Biological Process (BP) only
go_annotations <- go_annotations %>%
#filter(namespace_1003 == "biological_process") %>%
filter(go_id != "")  # Remove any empty GO terms if present
# Step 4: Build a list: GO Term -> Genes
# Use external_gene_name (common names) or ensembl_gene_id (your choice)
go_list <- split(go_annotations$ensembl_gene_id, go_annotations$name_1006)
View(go_list)
ensembl_fungi <- useMart("fungi_mart", dataset = "scerevisiae_eg_gene", host = "https://fungi.ensembl.org")
# Step 2: Retrieve GO annotations
go_annotations <- getBM(attributes = c("ensembl_gene_id", "external_gene_name",
"go_id", "name_1006", "namespace_1003"),
mart = ensembl_fungi)
View(go_list)
# Step 1: Connect to Ensembl Fungi
ensembl_fungi <- useMart("fungi_mart", dataset = "scerevisiae_eg_gene", host = "https://fungi.ensembl.org")
# Step 2: Retrieve GO annotations
go_annotations <- getBM(attributes = c("ensembl_gene_id", "external_gene_name",
"go_id", "name_1006", "namespace_1003"),
mart = ensembl_fungi)
# This is added by me
go_annotations <- go_annotations %>%
dplyr::filter(namespace_1003 != "go") %>%
dplyr::mutate(gene_set = case_when(namespace_1003 == "molecular_function" ~ paste(name_1006, " (MF)", sep=""),
namespace_1003 == "biological_process" ~ paste(name_1006, " (BP)", sep=""),
namespace_1003 == "cellular_component" ~ paste(name_1006, " (CC)", sep="")))
# Check the first few rows
head(go_annotations)
# Step 3: Filter for Biological Process (BP) only
go_annotations <- go_annotations %>%
#filter(namespace_1003 == "biological_process") %>%
filter(go_id != "")  # Remove any empty GO terms if present
# Step 4: Build a list: GO Term -> Genes
# Use external_gene_name (common names) or ensembl_gene_id (your choice)
go_list <- split(go_annotations$ensembl_gene_id, go_annotations$gene_set)
# Step 5: Save this named list of vectors as a JSON file
write_json(go_list, path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), pretty = T)
# Read in the .json file
gmt <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), simplifyVector = T)
# Read in the .json file
gmt <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), simplifyVector = T)
View(gmt)
View(go_annotations)
# Step 1: Connect to Ensembl Fungi
ensembl_fungi <- useMart("fungi_mart", dataset = "scerevisiae_eg_gene", host = "https://fungi.ensembl.org")
# Step 2: Retrieve GO annotations
go_annotations <- getBM(attributes = c("ensembl_gene_id", "external_gene_name",
"go_id", "name_1006", "namespace_1003"),
mart = ensembl_fungi)
# This is added by me
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
go_annotations <- go_annotations %>%
dplyr::filter(namespace_1003 != "go") %>%                                     # Pretty sure these rows are just wrong, or at least not useful to me
dplyr::filter(ensembl_gene_id %in% rownames(trna_ko)) %>%                     # Keep only those genes which are detected in our data, so as to prevent bias
dplyr::mutate(gene_set = case_when(namespace_1003 == "molecular_function" ~ paste(name_1006, " (MF)", sep=""),
namespace_1003 == "biological_process" ~ paste(name_1006, " (BP)", sep=""),
namespace_1003 == "cellular_component" ~ paste(name_1006, " (CC)", sep="")))
# Check the first few rows
head(go_annotations)
# Step 3: Filter for Biological Process (BP) only
go_annotations <- go_annotations %>%
#filter(namespace_1003 == "biological_process") %>%
filter(go_id != "")  # Remove any empty GO terms if present
# Step 4: Build a list: GO Term -> Genes
# Use external_gene_name (common names) or ensembl_gene_id (your choice)
go_list <- split(go_annotations$ensembl_gene_id, go_annotations$gene_set)
# Step 5: Save this named list of vectors as a JSON file
write_json(go_list, path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), pretty = T)
# Read in the .json file
go_gene_sets <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), simplifyVector = T)
go_gsea_results <- list()
for (i in 1:length(ranked_genes)) {
go_gsea_results[[names(ranked_genes)[i]]] <- fgsea(pathways = go_gene_sets,                                # List of gene sets to check
stats = ranked_genes[[i]],
scoreType = 'std',
# in this case we have both pos and neg rankings. if only pos or neg, set to 'pos', 'neg'
minSize = 1,
maxSize = 1000,
nproc = 1)                                             # for parallelisation
}
# This returns a list, where each element is a dataframe for the corresponding KO strain, and each row in that dataframe is a pathway. However, all pathways are included, so we are going to filter all of these dataframes to keep only the pathways that are significant in each KO strain
go_gsea_results_filtered <- lapply(go_gsea_results, function(x) filter(x, padj < 0.05))
View(go_gsea_results_filtered)
View(ranked_genes)
# Step 1: Connect to Ensembl Fungi
ensembl_fungi <- useMart("fungi_mart", dataset = "scerevisiae_eg_gene", host = "https://fungi.ensembl.org")
# Step 2: Retrieve GO annotations
go_annotations <- getBM(attributes = c("ensembl_gene_id", "external_gene_name",
"go_id", "name_1006", "namespace_1003", "entrezgene_id"),
mart = ensembl_fungi)
# This is added by me
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
go_annotations <- go_annotations %>%
dplyr::filter(namespace_1003 != "go") %>%                                     # Pretty sure these rows are just wrong, or at least not useful to me
dplyr::filter(ensembl_gene_id %in% rownames(trna_ko)) %>%                     # Keep only those genes which are detected in our data, so as to prevent bias
dplyr::mutate(gene_set = case_when(namespace_1003 == "molecular_function" ~ paste(name_1006, " (MF)", sep=""),
namespace_1003 == "biological_process" ~ paste(name_1006, " (BP)", sep=""),
namespace_1003 == "cellular_component" ~ paste(name_1006, " (CC)", sep="")))
# Check the first few rows
head(go_annotations)
# Step 3: Filter for Biological Process (BP) only
go_annotations <- go_annotations %>%
#filter(namespace_1003 == "biological_process") %>%
filter(go_id != "")  # Remove any empty GO terms if present
# Step 4: Build a list: GO Term -> Genes
# Use external_gene_name (common names) or ensembl_gene_id (your choice)
go_list <- split(go_annotations$entrezgene_id, go_annotations$gene_set)
# Step 5: Save this named list of vectors as a JSON file
write_json(go_list, path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), pretty = T)
View(go_annotations)
# Read in the .json file
go_gene_sets <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_list_gmt.json", sep=""), simplifyVector = T)
go_gsea_results <- list()
for (i in 1:length(ranked_genes)) {
go_gsea_results[[names(ranked_genes)[i]]] <- fgsea(pathways = go_gene_sets,                                # List of gene sets to check
stats = ranked_genes[[i]],
scoreType = 'std',
# in this case we have both pos and neg rankings. if only pos or neg, set to 'pos', 'neg'
minSize = 1,
maxSize = 1000,
nproc = 1)                                             # for parallelisation
}
# This returns a list, where each element is a dataframe for the corresponding KO strain, and each row in that dataframe is a pathway. However, all pathways are included, so we are going to filter all of these dataframes to keep only the pathways that are significant in each KO strain
go_gsea_results_filtered <- lapply(go_gsea_results, function(x) filter(x, padj < 0.05))
View(go_gsea_results_filtered)
bool <- lapply(kegg_gsea_results, function(x) nrow(x))
bool <- sapply(kegg_gsea_results, function(x) nrow(x))
bool <- sapply(kegg_gsea_results_filtered, function(x) nrow(x)>0)
kegg_gsea_results_filtered <- kegg_gsea_results_filtered[[bool]]
kegg_gsea_results_filtered <- kegg_gsea_results_filtered[bool]
View(kegg_gsea_results_filtered)
# Save these results
write_json(kegg_gsea_results_filtered, paste(base_dir, "Data/Other/enrichment_analysis/kegg_gsea_results_005.json", sep=""), pretty = T)
bool <- sapply(go_gsea_results_filtered, function(x) nrow(x)>0)
go_gsea_results_filtered <- go_gsea_results_filtered[bool]
# Save these results
write_json(go_gsea_results_filtered, paste(base_dir, "Data/Other/enrichment_analysis/go_gsea_results_005.json", sep=""), pretty = T)
knitr::opts_chunk$set(echo = TRUE)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(data.table)
library(dplyr)
library(fgsea)
library(ggplot2)
library(jsonlite)
library(stringr)
library(forcats)
library(GO.db)
library(biomaRt)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
kegg_gsea_results_filtered <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/kegg_gsea_results_005.json", sep=""), simplifyVector = T)
go_gsea_results_filtered <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_gsea_results_005.json", sep=""), simplifyVector = T)
View(go_gsea_results_filtered)
View(kegg_gsea_results_filtered)
rm(go_gsea_results_filtered)
rm(kegg_gsea_results_filtered)
kegg_gsea_results <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/kegg_gsea_results_005.json", sep=""), simplifyVector = T)
go_gsea_results <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_gsea_results_005.json", sep=""), simplifyVector = T)
add_strain_tag <- function(df, strain) {
df$Strain <- rep(strain, nrow(df))
return(df)
}
kegg_gsea_results <- mapply(FUN = add_strain_tag, df = kegg_gsea_results, strain = names(go_results_list_001), SIMPLIFY = F)
kegg_gsea_results <- mapply(FUN = add_strain_tag, df = kegg_gsea_results, strain = names(kegg_gsea_results), SIMPLIFY = F)
kegg_terms_df_full <- bind_rows(kegg_gsea_results) %>%
summarize_mine(column_name = "Description", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
kegg_terms_df_full <- bind_rows(kegg_gsea_results) %>%
summarize_mine(column_name = "Description", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
kegg_terms_df_full <- bind_rows(kegg_gsea_results) %>%
summarize_mine(column_name = "pathway", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
temp <- kegg_terms_df_full %>%
distinct(Description, .keep_all = T) %>%
slice(1:10)
temp <- kegg_terms_df_full %>%
distinct(pathway, .keep_all = T) %>%
slice(1:10)
ggplot(data = temp, aes(x = fct_reorder(Description, EA_term_count), y = EA_term_count, fill = ONTOLOGY)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common KEGG GSEA terms",
subtitle = "Across strains growing worse than WT in DTT",
fill = "Ontology") +
ylab("Strain count") +
xlab("GSEA term")
## Plot with total EA term count
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count, fill = ONTOLOGY)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common KEGG GSEA terms",
subtitle = "Across strains growing worse than WT in DTT",
fill = "Ontology") +
ylab("Strain count") +
xlab("GSEA term")
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common KEGG GSEA terms",
subtitle = "Across strains growing worse than WT in DTT",
fill = "Ontology") +
ylab("Strain count") +
xlab("GSEA term")
# Plot with % - total EA term count/number of strains
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_percentage)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common KEGG GSEA terms",
subtitle = "Across strains growing worse than WT in DTT",
fill = "Ontology") +
ylab("Strain percentage") +
xlab("GSEA term")
# Prepare dataframe
## Add strain tag to each dataframe before collapsing
add_strain_tag <- function(df, strain) {
df$Strain <- rep(strain, nrow(df))
return(df)
}
go_gsea_results <- mapply(FUN = add_strain_tag, df = go_gsea_results, strain = names(go_gsea_results), SIMPLIFY = F)
## Collapse list of dataframes into single dataframe and add a column with the count of Description
go_terms_df_full <- bind_rows(go_gsea_results) %>%
summarize_mine(column_name = "pathway", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
# Plot
## Grab only top 10 most common EA terms
temp <- go_terms_df_full %>%
distinct(pathway, .keep_all = T) %>%
slice(1:10)
## Plot with total EA term count
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common GO GSEA terms",
subtitle = "Across all strains") +
ylab("Strain count") +
xlab("GSEA term")
# Plot with % - total EA term count/number of strains
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_percentage)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common GO GSEA terms",
subtitle = "Across all strains") +
ylab("Strain percentage") +
xlab("GSEA term")
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)+sd(phenotypic_data$DTT, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)-sd(phenotypic_data$DTT, na.rm = T), col = "red")
ggplot(data = phenotypic_data, aes(x = DTT_GY)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)+sd(phenotypic_data$DTT_GY, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)-sd(phenotypic_data$DTT_GY, na.rm = T), col = "red")
# At first I just divided strains into those above and below 0, and grabbed those that were above 0 in both GR and GY as one group, and those that were below 0 in both GR and GY as the other group. However, I found no pattern at all, so I think it would make sense to be a bit more stringent in how I select the strains. I am going to do it based on the SD of each of the distribution above
# Need to look into the original article to figure out which one to use - going with both for now, so I don't take all strains here, only those that agree on their GR and GY (not sure if that makes sense, going by vibes for now)
## Need to get rid of the lethal strains before I select here
phenotypic_data <- phenotypic_data %>%
filter(lethal != "Yes",
!(is.na(DTT)),
!is.na(DTT_GY))
## Actually perform the selection
strains_better_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT > sd(phenotypic_data$DTT, na.rm = T) & phenotypic_data$DTT_GY > sd(phenotypic_data$DTT_GY, na.rm = T)]
strains_worse_or_equal_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT < -sd(phenotypic_data$DTT, na.rm = T) & phenotypic_data$DTT_GY < -sd(phenotypic_data$DTT_GY, na.rm = T)]
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)+sd(phenotypic_data$DTT, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)-sd(phenotypic_data$DTT, na.rm = T), col = "red")
ggplot(data = phenotypic_data, aes(x = DTT_GY)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)+sd(phenotypic_data$DTT_GY, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)-sd(phenotypic_data$DTT_GY, na.rm = T), col = "red")
# At first I just divided strains into those above and below 0, and grabbed those that were above 0 in both GR and GY as one group, and those that were below 0 in both GR and GY as the other group. However, I found no pattern at all, so I think it would make sense to be a bit more stringent in how I select the strains. I am going to do it based on the SD of each of the distribution above
# Need to look into the original article to figure out which one to use - going with both for now, so I don't take all strains here, only those that agree on their GR and GY (not sure if that makes sense, going by vibes for now)
## Need to get rid of the lethal strains before I select here
phenotypic_data <- phenotypic_data %>%
filter(lethal != "Yes",
!(is.na(DTT)),
!is.na(DTT_GY))
## Actually perform the selection
strains_better_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT > sd(phenotypic_data$DTT, na.rm = T) & phenotypic_data$DTT_GY > sd(phenotypic_data$DTT_GY, na.rm = T)]
strains_worse_or_equal_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT < -sd(phenotypic_data$DTT, na.rm = T) & phenotypic_data$DTT_GY < -sd(phenotypic_data$DTT_GY, na.rm = T)]
# Step 1 - Separate results
kegg_list_better_dtt <- list()
kegg_list_worse_dtt <- list()
for (i in 1:length(kegg_gsea_results)) {
strain_name <- names(kegg_gsea_results)[i]
if (strain_name %in% strains_better_in_DTT) {
kegg_list_better_dtt[[strain_name]] <- kegg_gsea_results[[i]]
}
else if (strain_name %in% strains_worse_or_equal_in_DTT) {
kegg_list_worse_dtt[[strain_name]] <- kegg_gsea_results[[i]]
}
}
# Step 2 - Turn to dataframes
## For strains growing worse in DTT
### Add strain tag to each dataframe before collapsing
add_strain_tag <- function(df, strain) {
df$Strain <- rep(strain, nrow(df))
return(df)
}
kegg_list_worse_dtt <- mapply(FUN = add_strain_tag, df = kegg_list_worse_dtt, strain = names(kegg_list_worse_dtt), SIMPLIFY = F)
### Collapse list of dataframes into single dataframe and add a column with the count of Description
kegg_terms_df_worse_dtt <- bind_rows(kegg_list_worse_dtt) %>%
summarize_mine(column_name = "Description", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
# Step 1 - Separate results
kegg_list_better_dtt <- list()
kegg_list_worse_dtt <- list()
for (i in 1:length(kegg_gsea_results)) {
strain_name <- names(kegg_gsea_results)[i]
if (strain_name %in% strains_better_in_DTT) {
kegg_list_better_dtt[[strain_name]] <- kegg_gsea_results[[i]]
}
else if (strain_name %in% strains_worse_or_equal_in_DTT) {
kegg_list_worse_dtt[[strain_name]] <- kegg_gsea_results[[i]]
}
}
# Step 2 - Turn to dataframes
## For strains growing worse in DTT
### Add strain tag to each dataframe before collapsing
add_strain_tag <- function(df, strain) {
df$Strain <- rep(strain, nrow(df))
return(df)
}
kegg_list_worse_dtt <- mapply(FUN = add_strain_tag, df = kegg_list_worse_dtt, strain = names(kegg_list_worse_dtt), SIMPLIFY = F)
### Collapse list of dataframes into single dataframe and add a column with the count of pathway
kegg_terms_df_worse_dtt <- bind_rows(kegg_list_worse_dtt) %>%
summarize_mine(column_name = "pathway", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
## For strains growing better in DTT
### Add strain tag to each dataframe before collapsing
kegg_list_better_dtt <- mapply(FUN = add_strain_tag, df = kegg_list_better_dtt, strain = names(kegg_list_better_dtt), SIMPLIFY = F)
### Collapse list of dataframes into single dataframe and add a column with the count of pathway
kegg_terms_df_better_dtt <- bind_rows(kegg_list_better_dtt) %>%
summarize_mine(column_name = "pathway", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
# For strains growing worse in DTT
## Grab only top 10 most common EA terms
temp <- kegg_terms_df_worse_dtt %>%
distinct(pathway, .keep_all = T) %>%
slice(1:10)
## Plot with total EA term count
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing worse than WT in DTT") +
ylab("Strain count") +
xlab("EA term")
# Plot with % - total EA term count/number of strains
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_percentage)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing worse than WT in DTT") +
ylab("Strain percentage") +
xlab("EA term")
# For strains growing better in DTT
## Grab only top 10 most common EA terms
temp <- kegg_terms_df_better_dtt %>%
distinct(pathway, .keep_all = T) %>%
slice(1:10)
## Plot with total EA term count
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing better than WT in DTT") +
ylab("Strain count") +
xlab("EA term")
# Plot with % - total EA term count/number of strains
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_percentage)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing better than WT in DTT") +
ylab("Strain percentage") +
xlab("EA term")
View(kegg_terms_df_better_dtt)
View(kegg_list_worse_dtt)
# Step 1 - Separate results
go_list_better_dtt <- list()
go_list_worse_dtt <- list()
for (i in 1:length(go_gsea_results)) {
strain_name <- names(go_gsea_results)[i]
if (strain_name %in% strains_better_in_DTT) {
go_list_better_dtt[[strain_name]] <- go_gsea_results[[i]]
}
else if (strain_name %in% strains_worse_or_equal_in_DTT) {
go_list_worse_dtt[[strain_name]] <- go_gsea_results[[i]]
}
}
# Step 2 - Turn to dataframes
## For strains growing worse in DTT
### Add strain tag to each dataframe before collapsing
add_strain_tag <- function(df, strain) {
df$Strain <- rep(strain, nrow(df))
return(df)
}
go_list_worse_dtt <- mapply(FUN = add_strain_tag, df = go_list_worse_dtt, strain = names(go_list_worse_dtt), SIMPLIFY = F)
### Collapse list of dataframes into single dataframe and add a column with the count of pathway
go_terms_df_worse_dtt <- bind_rows(go_list_worse_dtt) %>%
summarize_mine(column_name = "pathway", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
## For strains growing better in DTT
### Add strain tag to each dataframe before collapsing
go_list_better_dtt <- mapply(FUN = add_strain_tag, df = go_list_better_dtt, strain = names(go_list_better_dtt), SIMPLIFY = F)
### Collapse list of dataframes into single dataframe and add a column with the count of pathway
go_terms_df_better_dtt <- bind_rows(go_list_better_dtt) %>%
summarize_mine(column_name = "pathway", output_column_name = "EA_term_count") %>%
mutate(EA_term_percentage = EA_term_count/length(unique(Strain))) %>%
arrange(desc(EA_term_count))
# For strains growing worse in DTT
## Grab only top 10 most common EA terms
temp <- go_terms_df_worse_dtt %>%
distinct(pathway, .keep_all = T) %>%
slice(1:10)
## Plot with total EA term count
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing worse than WT in DTT") +
ylab("Strain count") +
xlab("EA term")
# Plot with % - total EA term count/number of strains
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_percentage)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing worse than WT in DTT") +
ylab("Strain percentage") +
xlab("EA term")
# For strains growing better in DTT
## Grab only top 10 most common EA terms
temp <- go_terms_df_better_dtt %>%
distinct(pathway, .keep_all = T) %>%
slice(1:10)
## Plot with total EA term count
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_count)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing better than WT in DTT") +
ylab("Strain count") +
xlab("EA term")
# Plot with % - total EA term count/number of strains
ggplot(data = temp, aes(x = fct_reorder(pathway, EA_term_count), y = EA_term_percentage)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Most common EA terms",
subtitle = "Across strains growing better than WT in DTT") +
ylab("Strain percentage") +
xlab("EA term")
