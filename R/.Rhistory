for (i in 1:length(de_proteins_list_001)) {
temp <- data.frame("Protein_stable_ID" = de_proteins_list_001[[i]])
temp <- left_join(temp, entrez_db, by = "Protein_stable_ID")
temp <- temp$`NCBI_gene_(formerly_Entrezgene)_ID`
de_proteins_list_entrez_ID_001[[i]] <- temp
}
names(de_proteins_list_entrez_ID_001) <- names(de_proteins_list_001)
de_prots_per_strain <- c()
for (i in 1:length(de_proteins_list_001)) {
temp <- de_proteins_list_001[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_001 <- data.frame(Strain.Name = names(de_proteins_list_001),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_001[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_001_bp <- list()
for (i in 2:length(de_proteins_list_entrez_ID_001)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_001[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "BP",
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_001_bp[[names(de_proteins_list_entrez_ID_001)[i]]] <- go_results
}
}
}
# Check how much correlation there is between strains having many DEPs and strains showing some GO enrichment results
has_go_results <- c()
number_of_go_terms <- c()
for (i in 1:nrow(de_prots_per_strain_001)) {
strain <- de_prots_per_strain_001$Strain.Name[i]
if (strain %in% names(go_results_list_001_bp)) {
has_go_results <- c(has_go_results, "Yes")
number_of_go_terms <- c(number_of_go_terms, nrow(go_results_list_001_bp[[strain]]))
}
else {
has_go_results <- c(has_go_results, "No")
number_of_go_terms <- c(number_of_go_terms, 0)
}
}
de_prots_per_strain_001$GO_results_bp <- has_go_results
de_prots_per_strain_001$num_of_go_terms_bp <- number_of_go_terms
View(go_results_list_001_bp)
strains_worse_or_equal_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT <= 0 & phenotypic_data$DTT_GY <= 0]
go_list_better_dtt <- list()
go_list_worse_dtt <- list()
for (i in 1:length(go_results_list_001_bp)) {
strain_name <- names(go_results_list_001_bp)[i]
if (strain_name %in% strains_better_in_DTT) {
go_list_better_dtt[[strain_name]] <- go_results_list_001_bp[[i]]
}
else if (strain_name %in% strains_worse_or_equal_in_DTT) {
go_list_worse_dtt[[strain_name]] <- go_results_list_001_bp[[i]]
}
}
View(go_list_better_dtt)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(data.table)
library(dplyr)
library(fgsea)
library(ggplot2)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.RData", sep=""))
knitr::opts_chunk$set(echo = TRUE)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(data.table)
library(dplyr)
library(fgsea)
library(ggplot2)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.RData", sep=""))
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05
de_proteins_list_005 <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.RData", sep=""))
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
View(de_proteins_list_001)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# Extract the date for when each sample was run
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"))
# Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
# Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
# Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Come up with new colnames
new_names <- c("sample_group", "genes")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[5:nrow(proteomics_raw), colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
first_rows <- proteomics_raw[1:4, colnames(proteomics_raw) == strain]
out <- c(first_rows[,1], apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%             # Remove rows for which "genes" column is empty or has "Genes" as value
dplyr::select(-genes & !contains('QC')) %>%                                  # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'sample_group')                              # Convert gene name column to rownames
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Add sample_names to sample_layout so that we can filter out in the next line
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Remove the sub-batch that went wrong
samples_in_wrong_batch <- sample_layout$sample_names[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, first_rows, out, batch_num, i, new_name, new_names, strain_and_batch, trna_name,
samples_in_wrong_batch, working_from)
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$sample_names == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Fit linear model
fit <- lmFit(trna_ko_log, mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', number = Inf, sort.by = 'none')
}
library(jsonlite)
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_001 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < alpha]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_001[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep="")
write_json(de_proteins_list_001, file=output_file)
write_json(de_proteins_list_001, path=output_file)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
View(de_proteins_list_001)
# At alpha= 0.05
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_005 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < 0.05]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_005[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep="")
write_json(de_proteins_list_005, path=output_file)
write_json(da, path=paste(base_dir, "Data/Other/enrichment_analysis/da.json", sep=""))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
codon_counts_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
View(codon_counts_list)
i = 1
strain_name <- names(codon_counts_list)[i]
de <- codon_counts_list[strain_name]$`tA(AGC)D`
de <- codon_counts_list[strain_name]
View(de)
de <- codon_counts_list[strain_name][DE]
de <- codon_counts_list[strain_name]["DE"]
View(de)
View(codon_counts_list)
de <- codon_counts_list[[strain_name]][["DE"]]
non_de <- codon_counts_list[[strain_name]][["non_DE"]]
de <- data.frame(codon_counts_list[[strain_name]][["DE"]])
non_de <- data.frame(codon_counts_list[[strain_name]][["non_DE"]])
ggplot() +
geom_histogram(data = de, aes(x = codon_counts_list..strain_name.....DE...), col = "lightblue") +
geom_histogram(data = non_de, aes(x = codon_counts_list..strain_name.....non_DE...), col ="orange")
ggplot() +
geom_histogram(data = de, aes(x = codon_counts_list..strain_name.....DE...), fill = "lightblue") +
geom_histogram(data = non_de, aes(x = codon_counts_list..strain_name.....non_DE...), fill ="orange")
ggplot() +
geom_histogram(data = de, aes(x = codon_counts_list..strain_name.....DE...), fill = "lightblue", alpha = 0.2) +
geom_histogram(data = non_de, aes(x = codon_counts_list..strain_name.....non_DE...), fill ="orange", alpha = 0.2)
ggplot() +
geom_histogram(data = de, aes(x = codon_counts_list..strain_name.....DE...), fill = "lightblue", alpha = 0.2)
poisson.test(de, non_de, alternative = "two.sided")
codon_counts_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
View(codon_counts_list)
rm(codon_counts_list)
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
ggplot() +
geom_histogram(data = de, aes(x = codon_counts_list..strain_name.....DE...), fill = "lightblue", alpha = 0.4) +
geom_histogram(data = non_de, aes(x = codon_counts_list..strain_name.....non_DE...), fill = "orange", alpha = 0.4)
de <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
ggplot() +
geom_histogram(data = de, aes(x = codon_counts_list..strain_name.....DE...), fill = "lightblue", alpha = 0.4) +
geom_histogram(data = non_de, aes(x = codon_counts_list..strain_name.....non_DE...), fill = "orange", alpha = 0.4)
ggplot() +
geom_histogram(data = de, aes(x = codon_ratios_list..strain_name.....DE...), fill = "lightblue", alpha = 0.4) +
geom_histogram(data = non_de, aes(x = codon_ratios_list..strain_name.....non_DE...), fill = "orange", alpha = 0.4)
ggplot() +
geom_histogram(data = de, aes(x = codon_ratios_list..strain_name.....DE...), fill = "lightblue", alpha = 0.9) +
geom_histogram(data = non_de, aes(x = codon_ratios_list..strain_name.....non_DE...), fill = "orange", alpha = 0.4)
ggplot() +
geom_histogram(data = de, aes(x = codon_ratios_list..strain_name.....DE...), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de, aes(x = codon_ratios_list..strain_name.....non_DE...), fill = "orange", alpha = 0.4)
ggplot() +
geom_histogram(data = de, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
View(de)
View(non_de)
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Test - for now I am log transforming and using t-test - would it be better to not transform and use WMW?
t.test(de, non_de)
# Test - for now I am log transforming and using t-test - would it be better to not transform and use WMW?
t.test(de, non_de)$p.value
t.test(log2(de), log2(non_de))
de_log2 <- log2(codon_ratios_list[[strain_name]][["DE"]])
non_de_log2 <- log2(codon_ratios_list[[strain_name]][["non_DE"]])
wilcox.test(de, non_de)
strains <- names(codon_ratios_list)
p.values_wmw <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
}
strains <- names(codon_ratios_list)
p.values_wmw <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
}
View(non_de_df)
View(codon_ratios_list)
bool <- c()
for (i in 1:length(codon_ratios_list)) {
bool <- c(bool, length(codon_ratios_list[[i]][["DE"]]) > 4)
}
sum(bool)
codon_ratios_list <- codon_ratios_list[[bool]]
codon_ratios_list <- codon_ratios_list[bool]
strains <- names(codon_ratios_list)
p.values_wmw <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
}
p.values.adj <- p.adjust(p.values_wmw, method = "fdr")
test_codon_enrichment <- data.frame(strains, p.values_wmw, p.values.adj)
View(test_codon_enrichment)
strains <- names(codon_ratios_list)
p.values_wmw <- c()
mean_de <- c()
mean_non_de <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
# Save the mean of each group to the output dataframe as well
mean_de <- c(mean_de, mean(de))
mean_non_de <- c(mean_non_de, mean(non_de))
}
p.values.adj <- p.adjust(p.values_wmw, method = "fdr")
test_codon_enrichment <- data.frame(strains, p.values_wmw, p.values.adj)
View(test_codon_enrichment)
test_codon_enrichment <- data.frame(strains, p.values_wmw, p.values.adj, mean_de, mean_non_de)
1/64
hist(test_codon_enrichment$mean_non_de)
test_codon_enrichment <- data.frame(strains, p.values_wmw, p.values.adj, mean_de, mean_non_de) %>%
mutate(direction = case_when(mean_de > mean_non_de ~ "DE",
TRUE ~ "non_DE"))
