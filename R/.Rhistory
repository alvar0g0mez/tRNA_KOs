# I get a weird error here, which I think I got already at some point in my masters - it doesn't say it, but it is likely due to a convergence error? Last time, using this other package to fit the model worked. Got it from here in both cases: https://stats.stackexchange.com/questions/93352/error-in-fitting-negative-binomial-regression-model-in-r-when-replicating-publis
library(glmmADMB)
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency*tRNA_expression,
family = "nbinom")
summary(fit)
# With synthetase abundance from our WTs
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*codon_frequency*tRNA_expression,
link = log)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
library(limpa)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 0.5
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Processed KO proteomics dataframe
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "tRNA_KOs/Data/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
# List of dataframes with the proteins that were DE in each KO strain
de_proteins_list <- fromJSON(paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""))
## Remove WT dataframe
de_proteins_list <- de_proteins_list[names(de_proteins_list) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# How many tRNA synthases
sum(grepl("trna synthase", synthetases$Gene.name, ignore.case = T))
# How many tRNA synthetases
sum(grepl("trna synthetase", synthetases$Gene.name, ignore.case = T))
# How many are mitochondrial?
sum(grepl("mitochondrial", synthetases$Gene.name, ignore.case = T))
View(chu_synths)
synthetases <- fread(paste(base_dir, "tRNA_KOs/Data/basic/trna_synthetases.csv", sep=""))
View(synthetases)
# How many tRNA synthases
sum(grepl("trna synthase", synthetases$Gene.name, ignore.case = T))
# How many tRNA synthetases
sum(grepl("trna synthetase", synthetases$Gene.name, ignore.case = T))
# How many are mitochondrial?
sum(grepl("mitochondrial", synthetases$Gene.name, ignore.case = T))
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# See how many tRNA synthetases are in there: 18, 67% of them
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Import the functions I have created in another file
source(paste(base_dir, "tRNA_KOs/Code/R/Mine/0.general_use_functions.R", sep=""))
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# See how many tRNA synthetases are in there: 18, 67% of them
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Prepare
WTs <- trna_ko[, grepl("WT", colnames(trna_ko))]
KOs <- trna_ko[, !grepl("WT", colnames(trna_ko))]
rownames(WTs) <- match_systematic_and_standard_protein_names(as.character(rownames(WTs)),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Actually check and save it to a new column in the dataframe
measured_proteomics_WTs <- c()
quantified_in_how_many_WTs <- c()
quantified_in_how_many_KO_samples <- c()
for (i in 1:nrow(synthetases)) {
synth <- synthetases$Gene.secondaryIdentifier[i]
# If the synthetase is detected at all, present in the dataset
if (synth %in% rownames(WTs)) {
## Get the average expression of this synthetase across WTs
synth_quant_across_WTs <- as.numeric(WTs[rownames(WTs) == synth,])
measured_proteomics_WTs <- c(measured_proteomics_WTs, mean(synth_quant_across_WTs, na.rm = T))
hist(as.numeric(WTs[rownames(WTs) == synth,]))
## In how many WT samples is this synthetase actually detected? (value != 0)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, sum(synth_quant_across_WTs != 0))
## In how many samples in total is this synthetase actually detected? (value != 0)
synth_quant_across_KO_samples <- as.numeric(KOs[rownames(KOs) == synth,])
quantified_in_how_many_KO_samples <- c(quantified_in_how_many_KO_samples, sum(synth_quant_across_all_samples != 0))
}
# If it is not
else {
measured_proteomics_WTs <- c(measured_proteomics_WTs, NA)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, NA)
quantified_in_how_many_KO_samples <- c(quantified_in_how_many_KO_samples, NA)
}
}
synthetases$measured_proteomics_WTs_WT <- measured_proteomics_WTs
synthetases$quantified_in_how_many_WTs <- quantified_in_how_many_WTs
synthetases$quantified_in_how_many_KO_samples <- quantified_in_how_many_KO_samples
# Add columns with all other amino acid information
temp <- fread(paste(base_dir, "tRNA_KOs/Data/databases/GtRNAdb/amino_acids.csv", sep="")) %>%
dplyr::select(-molecular_weight_Da)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# One final thing - add information of which ones are included in the TS library, and which ones are included in the GFP/RFP data
ts_sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
de_synthetases <- list()
for (i in 1:length(de_proteins_list)) {
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases <- list()
for (i in 1:length(de_proteins_list)) {
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% synthetases$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
View(de_synthetases)
View(de_proteins_list)
# da
da <- read_json(path=paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/da_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), simplifyVector = T)
View(da)
View(da[["tA(AGC)D"]])
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
library(limpa)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 0.5
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Proteomics data
proteomics_raw <- read.delim2(paste(base_dir, 'tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', sep=""), header = T)
# Sample layout
sample_layout <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/sample_layout_alvaro.tsv", sep="")))
# The master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# The ODs
od <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# UniProt dataset
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Import the functions I have created in another file
source(paste(base_dir, "tRNA_KOs/Code/R/Mine/0.general_use_functions.R", sep=""))
# limpa output
dpcfit <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/dpcfit.rds", sep=""))
y.protein <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/y.protein.rds", sep=""))
## Set this so I don't have to change its name in the code below
trna_ko <- y.protein$E
# Prepare to perform the DEA
## Change the protein names from the UniProt ones (produced by DIA-NN) to systematic Sc ones
## Some systematic names contain 2 of them - I have to deal with that - I'M TAKING THE FIRST ONE, HOPE THAT'S NOT TOO BAD
temp_uniprot <- uniprot_db %>%
dplyr::select(Entry, `Gene Names (ordered locus)`) %>%
dplyr::rename(Gene.secondaryIdentifier = `Gene Names (ordered locus)`)
temp_rownames <- data.frame(rownames(y.protein$E))
colnames(temp_rownames) <- "Entry"
temp_rownames <- temp_rownames %>%
left_join(temp_uniprot, by = "Entry")
remove_second_systematic_name <- function(name) {
if (grepl(";", name)) {
new_name <- substr(name, 0, str_locate(name, ";")[1]-1)
}
else {
new_name <- name
}
return(new_name)
}
temp_rownames$Gene.secondaryIdentifier <- sapply(temp_rownames$Gene.secondaryIdentifier, remove_second_systematic_name)
rownames(y.protein$E) <- temp_rownames$Gene.secondaryIdentifier
## Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
## Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
fit <- dpcDE(y.protein, mm)
# Limpa QC plots
#plotDPC(dpcfit)
#plotMDSUsingSEs(y.protein)
## Average expression of each protein across all samples - need to get this working for limpa!!
#hist(rowMeans(y.protein))
#hist(apply(y.protein, 1, var), breaks = 60)
#mean(apply(y.protein, 1, var))
#median(apply(y.protein, 1, var))
# This is what they provide, I wonder if they use the kind of design matrix that Alexis used
# I did not, so I am going to introduce contrasts here? I hope that makes sense?
## Create all contrasts - need to susbtitute parentheses in strain names by dots so that it runs...
treatments <- colnames(fit$coefficients)
treatments <- sapply(treatments, function(x) str_replace(x, "\\(", "."))
treatments <- sapply(treatments, function(x) str_replace(x, "\\)", "."))
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-WT")
## Need to change parentheses to dots in the fit object as well so they match...
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\(", "."))
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\)", "."))
## Introduce the contrasts and run eBayes for them, 10 at a time
da <- list()
batch_size <- 10
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
new_contrast_names <- c()
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
new_name <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
if (grepl(".", new_name)) {
substr(new_name, 3, 3) <- "("
substr(new_name, 7, 7) <- ")"
}
da[[new_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
da[[new_name]]$Strain.Name <- rep(new_name, nrow(da[[new_name]]))
}
}
View(da)
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
temp <- na.omit(temp)
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[(temp$adj.P.Val < alpha) &
(temp$logFC > lfc_threshold | temp$logFC < -lfc_threshold)]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep="")
da <- bind_rows(da) %>%
dplyr::mutate(protein = rep(rownames(da[[1]]), times = length(da))) %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
temp <- sample_layout %>%
dplyr::distinct(Strain.Name, .keep_all = T)
da <- left_join(da, temp, by = "Strain.Name") %>%
dplyr::relocate(Strain.Name, .before = logFC) %>%
dplyr::relocate(protein, .after = Strain.Name) %>%
filter(Strain.Name != "WT")
da <- da %>%
dplyr::select(protein, Strain.Name, logFC, P.Value, adj.P.Val) %>%                              # From here on in this function it's added by me
dplyr::mutate(diffexpressed_adjusted = case_when((logFC > lfc_threshold) & (adj.P.Val < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (adj.P.Val < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"),
diffexpressed_non_adjusted = case_when((logFC > lfc_threshold) & (P.Value < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (P.Value < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"))
da <- da %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
View(da)
write_json(da, path=paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/da_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), pretty = T)
# Processed KO proteomics dataframe
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "tRNA_KOs/Data/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
# List of dataframes with the proteins that were DE in each KO strain
de_proteins_list <- fromJSON(paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""))
## Remove WT dataframe
de_proteins_list <- de_proteins_list[names(de_proteins_list) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Articles/chu_2011/S3.csv", sep="")))[1:20,]
synthetases <- fread(paste(base_dir, "tRNA_KOs/Data/basic/trna_synthetases.csv", sep=""))
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Responsiveness
# How many tRNA synthases
sum(grepl("trna synthase", synthetases$Gene.name, ignore.case = T))
# How many tRNA synthetases
sum(grepl("trna synthetase", synthetases$Gene.name, ignore.case = T))
# How many are mitochondrial?
sum(grepl("mitochondrial", synthetases$Gene.name, ignore.case = T))
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# See how many tRNA synthetases are in there: 18, 67% of them
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Prepare
WTs <- trna_ko[, grepl("WT", colnames(trna_ko))]
KOs <- trna_ko[, !grepl("WT", colnames(trna_ko))]
rownames(WTs) <- match_systematic_and_standard_protein_names(as.character(rownames(WTs)),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Actually check and save it to a new column in the dataframe
measured_proteomics_WTs <- c()
quantified_in_how_many_WTs <- c()
quantified_in_how_many_KO_samples <- c()
for (i in 1:nrow(synthetases)) {
synth <- synthetases$Gene.secondaryIdentifier[i]
# If the synthetase is detected at all, present in the dataset
if (synth %in% rownames(WTs)) {
## Get the average expression of this synthetase across WTs
synth_quant_across_WTs <- as.numeric(WTs[rownames(WTs) == synth,])
measured_proteomics_WTs <- c(measured_proteomics_WTs, mean(synth_quant_across_WTs, na.rm = T))
hist(as.numeric(WTs[rownames(WTs) == synth,]))
## In how many WT samples is this synthetase actually detected? (value != 0)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, sum(synth_quant_across_WTs != 0))
## In how many samples in total is this synthetase actually detected? (value != 0)
synth_quant_across_KO_samples <- as.numeric(KOs[rownames(KOs) == synth,])
quantified_in_how_many_KO_samples <- c(quantified_in_how_many_KO_samples, sum(synth_quant_across_all_samples != 0))
}
# If it is not
else {
measured_proteomics_WTs <- c(measured_proteomics_WTs, NA)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, NA)
quantified_in_how_many_KO_samples <- c(quantified_in_how_many_KO_samples, NA)
}
}
synthetases$measured_proteomics_WTs_WT <- measured_proteomics_WTs
synthetases$quantified_in_how_many_WTs <- quantified_in_how_many_WTs
synthetases$quantified_in_how_many_KO_samples <- quantified_in_how_many_KO_samples
# Add columns with all other amino acid information
temp <- fread(paste(base_dir, "tRNA_KOs/Data/databases/GtRNAdb/amino_acids.csv", sep="")) %>%
dplyr::select(-molecular_weight_Da)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# One final thing - add information of which ones are included in the TS library, and which ones are included in the GFP/RFP data
ts_sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
de_synthetases <- list()
direction <- list()
View(de_synthetases)
View(de_proteins_list)
de_synthetases <- list()
direction <- list()
for (i in 1:length(de_proteins_list)) {
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% synthetases$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
for (j in 1:length(temp)) {
}
direction[[names(de_proteins_list)[i]]] <- da$protein
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
names(de_synthetases)[[1]]
i = 4
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% synthetases$Gene.secondaryIdentifier]
(length(temp) > 0)
de_synthetases <- list()
direction <- list()
for (i in 1:length(de_proteins_list)) {
strain <- names(de_proteins_list)[i]
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% synthetases$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
direction_this_strain <- c()
for (j in 1:length(temp)) {
protein <- temp[j]
direction_this_strain <- c(direction_this_strain, da$diffexpressed_adjusted[da$protein == protein & da$Strain.Name == strain])
}
direction[[names(de_proteins_list)[i]]] <- direction_this_strain
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Are these up- or down-regulated?
# Remove unnecessary variables
rm(de_proteins, temp)
View(direction)
