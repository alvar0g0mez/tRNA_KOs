colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Load their phenotypic data: growth rate and growth yield for all KOs
loc <- paste(base_dir, "Data/Other/bloom_ackermann_2014/phenotypic_results.tsv", sep="")
phenotypic_data <- as.data.frame(fread(loc))
# Change "ko" colname to allow to merge datasets based on it
colnames(resp_filtered)[colnames(resp_filtered) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp_filtered, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>% select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary objects
rm(test, test_corrs, melted_corrs)
# Load their small microarray data: fold changes for all genes but only for 5 samples
microarray_data <- as.data.frame(fread(paste(base_dir, "Data/bloom_ackermann_2014/microarray_fold_change_data.tsv", sep="")))
# Load their small microarray data: fold changes for all genes but only for 5 samples
microarray_data <- as.data.frame(fread(paste(base_dir, "Data/Other/bloom_ackermann_2014/microarray_fold_change_data.tsv", sep="")))
# Load all S. cerevisiae genes from AllianceMine - to be able to go from standard to systematic gene names and vice versa
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Need to change the colnames in the microarray data to use () instead of ..
colnames(microarray_data) <- c("gene_names", "tM(CAU)C", "tR(CCU)J", "tR(UCU)M2", "tH(GUG)G1", "tL(GAG)G")
# Get standard protein names
source(paste(base_dir, "C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R", sep=""))
# Get standard protein names
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
install.packages("readODS")
# Get standard protein names
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
install.packages("roxygen2")
# Get standard protein names
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
microarray_data <- match_systematic_and_standard_protein_names(data = microarray_data,
yeastmine = yeastmine,
input = "systematic",
simplify = FALSE,
add_extra_columns = FALSE)
# Join with our proteomics data - not too sure if this merge is the most appropriate way to do it, even though I think so?
trna_ko_temp <- trna_ko %>%
mutate(Gene.symbol = rownames(trna_ko))
proteomics_and_microarray_data <- left_join(trna_ko_temp, microarray_data, by = "Gene.symbol") # IM KEEPING ALL PROTEINS IN TRNA_KO, THERE ARE ACTUALLY 2863 WHICH ARE IN BOTH, SO SOME IN TRNA_KO ARE NOT IN MICROARRAY_DATA, I SHOULD FIX THIS CODE SO THOSE ARE NOT INCLUDED IN THE RESULTING DATA SET
# Correlation heatmap between our samples
samples_in_microarray <- colnames(microarray_data)[2:6]
sample_names_escaped <- c("tM\\(CAU\\)C",  "tR\\(CCU\\)J",  "tR\\(UCU\\)M2", "tH\\(GUG\\)G1", "tL\\(GAG\\)G")
proteomics_and_microarray_subset <- data.frame(matrix(nrow = nrow(proteomics_and_microarray_data), ncol = 0))
for (i in 1:length(samples_in_microarray)) {
sample_name <- sample_names_escaped[i]
temp <- proteomics_and_microarray_data[, grepl(sample_name, colnames(proteomics_and_microarray_data))]
proteomics_and_microarray_subset <- cbind(proteomics_and_microarray_subset, temp)
}
cormat <- round(cor(proteomics_and_microarray_subset, use = "pairwise.complete.obs", method = "kendall"), 2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary objects
list_for_venn_diagram <- list(Proteomics = rownames(trna_ko),
Transcriptomics = microarray_data$Gene.symbol)
ggvenn(
list_for_venn_diagram,
fill_color = c("#80AAFF", "#FF8080"),
stroke_size = 0.5, set_name_size = 4
)
test <- microarray_data %>% select(-Gene.secondaryIdentifier, -Gene.symbol)
corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary variables
rm(test, corrs, melted_corrs)
# Grab columns of proteomics data with only samples from the strains for which there are microarray data
matches <- grepl(paste(sample_names_escaped, collapse="|"),
colnames(trna_ko))
MC_and_SC_proteomics <- trna_ko[, matches]
# Add MC or SC information to column names and sort columns by this so (expected) clusters are easily visible on heatmap
new_colnames <- c()
for (i in 1:ncol(MC_and_SC_proteomics)) {
old_colname <- colnames(MC_and_SC_proteomics)[i]
if (grepl(paste(c("UCU", "GUG"), collapse = "|"), old_colname))
new_colnames <- c(new_colnames, paste("MC", old_colname, sep = "_"))
else if ((grepl(paste(c("CCU", "GAG", "CAU"), collapse = "|"), old_colname)))
new_colnames <- c(new_colnames, paste("SC", old_colname, sep = "_"))
}
colnames(MC_and_SC_proteomics) <- new_colnames
MC_and_SC_proteomics <- MC_and_SC_proteomics %>% select(order(colnames(MC_and_SC_proteomics)))
# Correlation heatmap
corrs <- round(cor(MC_and_SC_proteomics, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary objects
rm(toMatch, matches, corrs, melted_corrs, old_colname, new_colnames)
corrs <- round(cor(trna_ko, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
microarray_samples <- colnames(microarray_data[2:6])
da_for_microarray_samples <- da_full %>% filter(Strain.Name %in% microarray_samples)
for (i in 1:length(microarray_samples)) {
sample <- microarray_samples[i]
da_temp <- da_full %>%
filter(Strain.Name == sample) %>%
select(protein, diffexpressed, logFC, adj.P.Val)
colnames(da_temp) <- c("Gene.symbol", "diffexpressed", "logFC", "adj.P.Val")
microarray_temp <- microarray_data %>% select(all_of(sample), Gene.symbol)
test <- left_join(microarray_temp, da_temp, by = "Gene.symbol")
test <- inner_join(da_temp, microarray_temp, by = "Gene.symbol")
test <- test %>% mutate(diffexpressed = case_when(diffexpressed == "Up_regulated" ~ "Up_regulated",
diffexpressed == "Down_regulated" ~ "Down_regulated",
TRUE ~ "Not_significant"))
colnames(test) <- c("Gene.symbol", "diffexpressed", "logFC", "adj.P.Val", "logfold_microarray")
# Calculate correlation to add to plot
corr_coef <- round(cor(test$logFC, test$logfold_microarray, method = "spearman", use = "complete.obs"), 2)
# Protein names in X axis, transcriptomics fold change in Y axis, color by significance in proteomics - not such a good plot tbh
#p1 <- ggplot(data = test, aes(x = Gene.symbol, y = as.numeric(logfold_microarray), col = diffexpressed)) +
#  geom_point() +
#  labs(title = sample,
#       col = "Differentially\nexpressed\nin proteomics\ndata") +
#  xlab("Protein name") +
#  ylab("Transcriptomics fold change") +
#  theme(axis.text.x=element_blank(),
#      axis.ticks.x=element_blank()) +
#  geom_text(data = subset(test, diffexpressed == "Up_regulated" | diffexpressed == "Down_regulated"),
#            aes(x = Gene.symbol, y = as.numeric(logfold_microarray), col = diffexpressed, label = Gene.symbol),
#            size = 5)
#print(p1)
# logFC transcriptomics vs. logFC proteomics - color by significance in proteomics: much better
p2 <- ggplot(data = test, aes(x = logFC, y = logfold_microarray, col = diffexpressed)) +
geom_point(size = 1.5) +
labs(title = glue('{sample} - correlation coef. = {corr_coef}'),
col = "Differentially\nexpressed\nin proteomics\ndata") +
xlab("logFC proteomics") +
ylab("logFC transcriptomics") +
theme_light() +
geom_text_repel(data = subset(test, diffexpressed == "Up_regulated" | diffexpressed == "Down_regulated"),
aes(x = logFC, y = logfold_microarray, col = diffexpressed, label = Gene.symbol),
size = 4) +
geom_abline() +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
print(p2)
# This is just to check if the FCs from the microarrays data are also log2FCs, which I think so but their article says only FC
#hist(test$logfold_microarray)
#hist(test$logFC)
#hist((test$logFC)^2)
}
cozen <- read.xlsx(paste(base_dir, "Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1)
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1)
# Split rows with multiple genes identified into multiple rows with a single gene, with the same values in all other columns - add a column identifying whether each row came from an original row with multiple tRNAs or not
cozen <- cozen %>%
select(-c(corresponding.mature.tRNA.or.tRNA.locus.names..RNA.central., genomic.tRNA.database.legacy.names))
new_column <- c()
cozen_split <- data.frame(matrix(nrow = 0, ncol = ncol(cozen)))
colnames(cozen_split) <- colnames(cozen)
for (i in 1:nrow(cozen)) {
trna_names <- cozen$saccaromyces.genome.datasbase..sgd..tRNA.name[i]
if (!grepl(",", trna_names)) {
cozen_split <- rbind(cozen_split, cozen[i,])
new_column <- c(new_column, "Single")
}
else {
trnas_mapped_to <- strsplit(trna_names, ",")[[1]]
for (j in 1:length(trnas_mapped_to)) {
new_row <- cozen[i,]
new_row[which(colnames(cozen) == "saccaromyces.genome.datasbase..sgd..tRNA.name")] <- trnas_mapped_to[j]
cozen_split <- rbind(cozen_split, new_row)
new_column <- c(new_column, "Multiple")
}
}
}
cozen_split$Num_of_tRNAs_originally_in_row <- new_column
cozen_to_merge <- cozen_split %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, Num_of_tRNAs_originally_in_row,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "Strain.Name")
View(resp_filtered)
View(cozen_to_merge)
cozen_to_merge <- cozen_split %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, Num_of_tRNAs_originally_in_row,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(gene_name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "gene_name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = Num_of_tRNAs_originally_in_row)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression - mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = Num_of_tRNAs_originally_in_row)) +
geom_point() +
theme_light()
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/chu_2011/S3.csv", sep="")))
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/chu_2011/S3.csv", sep="")))
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Article/chu_2011/S3.csv", sep="")))
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
## Mature tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
## Genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
## Mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
View(resp_and_expression)
genomic <- resp_and_expression %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
mature <- resp_and_expression %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA")
View(genomic)
View(mature)
View(cozen)
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
View(cozen)
sum(grepl(",", cozen$saccaromyces.genome.datasbase..sgd..tRNA.name))
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, Num_of_tRNAs_originally_in_row,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(gene_name = saccaromyces.genome.datasbase..sgd..tRNA.name)
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(gene_name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "gene_name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = Num_of_tRNAs_originally_in_row)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression - mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
View(resp_and_expression)
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
## Mature tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
## Genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
## Mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA") +
ylab("nDEP from proteomics")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA") +
ylab("nDEP per tRNA")
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
fit <- lm(data = resp_and_expression, nDEP ~ synthetase_abundance*mean_reads_per_tRNA)
summary(fit)
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point()
# Plot tRNA abundance from Cozen et al., against log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA") +
ylab("nDEP per tRNA KO")
gc()
