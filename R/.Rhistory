(nrow(check_lit)/nrow(resp_and_expression_modelling))*100
check_WTs <- resp_and_expression_modelling %>%
dplyr::select(nDEP, tRNA_expression, synthetase_abundance_our_WTs, catalytic_constant, codon_frequency) %>%
na.omit()
nrow(check_WTs)
(nrow(check_WTs)/nrow(resp_and_expression_modelling))*100
sum(is.na(resp_and_expression_modelling$nDEP))
sum(is.na(resp_and_expression_modelling$tRNA_expression))
sum(is.na(resp_and_expression_modelling$synthetase_abundance_literature))
sum(is.na(resp_and_expression_modelling$catalytic_constant))
sum(is.na(resp_and_expression_modelling$codon_frequency))
sum(is.na(resp_and_expression_modelling$synthetase_abundance_our_WTs))
ggplot(data = resp_and_expression_modelling, aes(x = synthetase_abundance_literature, y = synthetase_abundance_our_WTs)) +
geom_point()
ggplot(data = resp_and_expression_modelling, aes(x = synthetase_abundance_literature, y = synthetase_abundance_our_WTs)) +
geom_point() +
geom_abline(col = "red") +
theme_light()
ggplot(data = resp_and_expression_modelling, aes(x = synthetase_abundance_literature, y = synthetase_abundance_our_WTs)) +
geom_point() +
geom_abline(col = "red", slope = 0.1) +
theme_light()
# With synthetase abundance from van der Haar, 2008
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency,
link = log)
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency,
family = "nbinom")
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency,
family = "nbinom")
summary(fit)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*codon_frequency,
link = log)
summary(fit)
check_overdispersion(fit)
# What if I fit this model with the same function as above?
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*codon_frequency,
family = "nbinom")
summary(fit)
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency,
family = "nbinom")
summary(fit)
check_overdispersion(fit)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*codon_frequency,
link = log)
summary(fit)
check_overdispersion(fit)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency*tRNA_expression,
link = log)
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency*tRNA_expression,
family = "nbinom")
summary(fit)
fit <- glm.nb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_our_WTs*catalytic_constant*codon_frequency,
link = log)
summary(fit)
check_overdispersion(fit)
fit <- glmmadmb(data = resp_and_expression_modelling,
formula = nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency,
family = "nbinom")
summary(fit)
check_overdispersion(fit)
fit$b
exp(fit$b)
range(resp_and_expression_modelling$synthetase_abundance_literature)
range(resp_and_expression_modelling$catalytic_constant)
range(resp_and_expression_modelling$codon_frequency)
rm(check_lit, check_WTs, fit, resp_and_expression, resp_and_expression_modelling, resp_measure_corrs, measured_proteomics)
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
# Remove from the list those strains where there aren't at least 4 DE proteins
bool <- c()
for (i in 1:length(codon_ratios_list)) {
bool <- c(bool, length(codon_ratios_list[[i]][["DE"]]) > 4)
}
codon_ratios_list <- codon_ratios_list[bool]
strains <- names(codon_ratios_list)
p.values_wmw <- c()
mean_de <- c()
mean_non_de <- c()
num_de <- c()
num_non_de <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms - not worth it I think
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
# Save the mean of each group to the output vectors as well
mean_de <- c(mean_de, mean(de))
mean_non_de <- c(mean_non_de, mean(non_de))
# Save the number of proteins in each of the two groups - probably will explain the significance bc of low power with small DE protein counts
num_de <- c(num_de, length(de))
num_non_de <- c(num_non_de, length(non_de))
}
p.values.adj <- p.adjust(p.values_wmw, method = "fdr")
test_codon_enrichment <- data.frame(Strain.Name = strains, p.values_wmw, p.values.adj, mean_de, mean_non_de, num_de, num_non_de) %>%
mutate(direction = case_when(mean_de > mean_non_de ~ "DE",
TRUE ~ "non_DE"),
FC = mean_de/mean_non_de)
# Get the logFC - need to deal with the negative values in the FC - there is definitely a better way to do this but oh well
logFC <- c()
for (i in 1:nrow(test_codon_enrichment)) {
FC <- test_codon_enrichment$FC[i]
if (FC < 1) {
out <- -log10(abs(FC))
}
else if (FC > 1) {
out <- log10(FC)
}
else if (FC == 0) {
out <- 0
}
logFC <- c(logFC, out)
}
test_codon_enrichment$logFC <- log10(test_codon_enrichment$FC)
# Remove unnecessary variables
rm(bool, strains, p.values_wmw, mean_de, mean_non_de, p.values.adj, logFC, FC, out, num_de, num_non_de)
# Load master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
temp <- master_dataset %>%
dplyr::select(Strain.Name, Anticodon, Best_isotype_model_1_letter, Family_size) %>%
rename(AA = Best_isotype_model_1_letter)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
temp <- resp_and_expression %>%
dplyr::select(Strain.Name, codon_frequency_chu_2011)
# Load resp_and_expression dataset
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
temp <- master_dataset %>%
dplyr::select(Strain.Name, Anticodon, Best_isotype_model_1_letter, Family_size) %>%
rename(AA = Best_isotype_model_1_letter)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
temp <- resp_and_expression %>%
dplyr::select(Strain.Name, codon_frequency_chu_2011)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
rm(temp)
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag only significant p-values and FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, (((FC < 0.5 | FC > 1.5) & -log10(p.values.adj) > -log10(0.05)))|-log10(p.values.adj) > -log10(0.05)),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag all significant FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, FC < 0.5 | FC > 1.5),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Color by count of DE proteins
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = num_de)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Anticodon)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
View(test_codon_enrichment)
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
# Remove from the list those strains where there aren't at least 4 DE proteins
bool <- c()
for (i in 1:length(codon_ratios_list)) {
bool <- c(bool, length(codon_ratios_list[[i]][["DE"]]) > 4)
}
codon_ratios_list <- codon_ratios_list[bool]
# Load master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Load resp_and_expression dataset
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
strains <- names(codon_ratios_list)
p.values_wmw <- c()
mean_de <- c()
mean_non_de <- c()
num_de <- c()
num_non_de <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms - not worth it I think
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
# Save the mean of each group to the output vectors as well
mean_de <- c(mean_de, mean(de))
mean_non_de <- c(mean_non_de, mean(non_de))
# Save the number of proteins in each of the two groups - probably will explain the significance bc of low power with small DE protein counts
num_de <- c(num_de, length(de))
num_non_de <- c(num_non_de, length(non_de))
}
p.values.adj <- p.adjust(p.values_wmw, method = "fdr")
test_codon_enrichment <- data.frame(Strain.Name = strains, p.values_wmw, p.values.adj, mean_de, mean_non_de, num_de, num_non_de) %>%
mutate(direction = case_when(mean_de > mean_non_de ~ "DE",
TRUE ~ "non_DE"),
FC = mean_de/mean_non_de)
# Get the logFC - need to deal with the negative values in the FC - there is definitely a better way to do this but oh well
logFC <- c()
for (i in 1:nrow(test_codon_enrichment)) {
FC <- test_codon_enrichment$FC[i]
if (FC < 1) {
out <- -log10(abs(FC))
}
else if (FC > 1) {
out <- log10(FC)
}
else if (FC == 0) {
out <- 0
}
logFC <- c(logFC, out)
}
test_codon_enrichment$logFC <- log10(test_codon_enrichment$FC)
# Remove unnecessary variables
rm(bool, strains, p.values_wmw, mean_de, mean_non_de, p.values.adj, logFC, FC, out, num_de, num_non_de)
temp <- master_dataset %>%
dplyr::select(Strain.Name, Anticodon, Best_isotype_model_1_letter, Family_size) %>%
rename(AA = Best_isotype_model_1_letter)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
temp <- resp_and_expression %>%
dplyr::select(Strain.Name, codon_frequency_chu_2011)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
rm(temp)
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag only significant p-values and FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, (((FC < 0.5 | FC > 1.5) & -log10(p.values.adj) > -log10(0.05)))|-log10(p.values.adj) > -log10(0.05)),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag all significant FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, FC < 0.5 | FC > 1.5),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Color by count of DE proteins
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = num_de)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Anticodon)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family size
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Family_size)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by amino acid
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = AA)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by codon frequency
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = codon_frequency_chu_2011)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
View(codon_ratios_list)
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
# Remove from the list those strains where there aren't at least 4 DE proteins
bool <- c()
for (i in 1:length(codon_ratios_list)) {
bool <- c(bool, length(codon_ratios_list[[i]][["DE"]]) > 4)
}
codon_ratios_list <- codon_ratios_list[bool]
# Load master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Load resp_and_expression dataset
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
strains <- names(codon_ratios_list)
p.values_wmw <- c()
mean_de <- c()
mean_non_de <- c()
num_de <- c()
num_non_de <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms - not worth it I think
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
# Save the mean of each group to the output vectors as well
mean_de <- c(mean_de, mean(de))
mean_non_de <- c(mean_non_de, mean(non_de))
# Save the number of proteins in each of the two groups - probably will explain the significance bc of low power with small DE protein counts
num_de <- c(num_de, length(de))
num_non_de <- c(num_non_de, length(non_de))
}
p.values.adj <- p.adjust(p.values_wmw, method = "fdr")
test_codon_enrichment <- data.frame(Strain.Name = strains, p.values_wmw, p.values.adj, mean_de, mean_non_de, num_de, num_non_de) %>%
mutate(direction = case_when(mean_de > mean_non_de ~ "DE",
TRUE ~ "non_DE"),
FC = mean_de/mean_non_de)
# Get the logFC - need to deal with the negative values in the FC - there is definitely a better way to do this but oh well
logFC <- c()
for (i in 1:nrow(test_codon_enrichment)) {
FC <- test_codon_enrichment$FC[i]
if (FC < 1) {
out <- -log10(abs(FC))
}
else if (FC > 1) {
out <- log10(FC)
}
else if (FC == 0) {
out <- 0
}
logFC <- c(logFC, out)
}
test_codon_enrichment$logFC <- log10(test_codon_enrichment$FC)
# Remove unnecessary variables
rm(bool, strains, p.values_wmw, mean_de, mean_non_de, p.values.adj, logFC, FC, out, num_de, num_non_de)
temp <- master_dataset %>%
dplyr::select(Strain.Name, Anticodon, Best_isotype_model_1_letter, Family_size) %>%
rename(AA = Best_isotype_model_1_letter)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
temp <- resp_and_expression %>%
dplyr::select(Strain.Name, codon_frequency_chu_2011)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
rm(temp)
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag only significant p-values and FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, (((FC < 0.5 | FC > 1.5) & -log10(p.values.adj) > -log10(0.05)))|-log10(p.values.adj) > -log10(0.05)),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag all significant FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, FC < 0.5 | FC > 1.5),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Color by count of DE proteins
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = num_de)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Anticodon)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family size
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Family_size)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by amino acid
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = AA)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by codon frequency
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = codon_frequency_chu_2011)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
ggplot(data = test_codon_enrichment, aes(x = num_de, y = FC)) +
geom_point() +
theme_light()
hist(test_codon_enrichment$FC)
rm(codon_ratios_list, de_df, master_dataset, non_de_df, resp_and_expression, test_codon_enrichment, de, i, non_de, strain_name)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
# Preparations: remove KOs with 0 DE proteins from list, grab anticodon names, create empty list to put Jaccard index matrices there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons and get a Jaccard index matrix for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_protein_list)[grepl(anticodon, names(de_protein_list))]
# This is so I don't end up with matrices with a single cell
if (length(KOs_with_anticodon) > 1) {
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
}
# Iterate over the Jaccard index matrices and get a heatmap from each of them
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
anticodon <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - anticodon {anticodon}")) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/Jaccard_index_heatmaps_per_anticodon_no_NAs.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
# Remove unnecessary variables
rm(anticodons, jaccard_matrices_list, anticodon, KOs_with_anticodon, jaccard_matrix, plot_list, my_grobs, output_file)
# Preparations: remove KOs with 0 DE proteins from list, grab anticodon names, create empty list to put Jaccard index matrices there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
amino_acids <- unique(responsiveness$AA)
jaccard_matrices_list <- list()
# Iterate over the amino acids and get a Jaccard index matrix for each of them
for (i in 1:length(amino_acids)) {
# For each amino acid, grab the tRNAs that carry it, and get a matrix with the Jaccard index across them
aa <- amino_acids[i]
strain_names <- unique(responsiveness$Strain.Name[responsiveness$AA == aa])
KOs_with_amino_acid <- names(de_protein_list)[names(de_protein_list) %in% strain_names]
# This is so I don't end up with matrices with a single cell
if (length(KOs_with_amino_acid) > 1) {
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_amino_acid)
jaccard_matrices_list[[aa]] <- jaccard_matrix
}
}
# Iterate over the Jaccard index matrices and get a heatmap from each of them
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
aa <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - amino acid: {aa}")) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
