sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Prepare
WTs <- trna_ko[, grepl("WT", colnames(trna_ko))]
rownames(WTs) <- match_systematic_and_standard_protein_names(as.character(rownames(WTs)),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Actually check and save it to a new column in the dataframe
measured_proteomics <- c()
quantified_in_how_many_WTs <- c()
quantified_in_how_many_total_samples <- c()
for (i in 1:nrow(synthetases)) {
synth <- synthetases$Gene.secondaryIdentifier[i]
# If the synthetase is detected at all, present in the dataset
if (synth %in% rownames(WTs)) {
## Get the average expression of this synthetase across WTs
synth_quant_across_WTs <- as.numeric(WTs[rownames(WTs) == synth,])
measured_proteomics <- c(measured_proteomics, mean(synth_quant_across_WTs, na.rm = T))
hist(as.numeric(WTs[rownames(WTs) == synth,]))
## In how many WT samples is this synthetase actually detected? (value != 0)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, sum(synth_quant_across_WTs != 0))
## In how many samples in total is this synthetase actually detected? (value != 0)
synth_quant_across_all_samples <- as.numeric(trna_ko[rownames(trna_ko) == synth,])
quantified_in_how_many_total_samples <- c(quantified_in_how_many_total_samples, sum(synth_quant_across_all_samples != 0))
}
# If it is not
else {
measured_proteomics <- c(measured_proteomics, NA)
}
}
synthetases$measured_proteomics_WT <- measured_proteomics
synthetases$quantified_in_how_many_WTs <- quantified_in_how_many_WTs
# Processed KO proteomics dataframe
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
# List of dataframes with the proteins that were DE in each KO strain
de_proteins_list <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""))
## Remove WT dataframe
de_proteins_list <- de_proteins_list[names(de_proteins_list) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
dplyr::rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
# Load YeastMine dataset
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Subset this into a new dataframe with only info of tRNA synthases/synthetases (remove "kinase" because there is one that says "tRNA synthase-associated kinase")
synthetases <- yeastmine[(grepl("trna synthase", yeastmine$Gene.name, ignore.case = T)|grepl("trna synthetase", yeastmine$Gene.name, ignore.case = T)) &
!grepl("kinase", yeastmine$Gene.name, ignore.case = T),]
# Add a column with information on:
#   - Whether each synthetase is mitochondrial or not
#   - Whether it is a synthase or a synthetase
#   - Whether it is the actual enzyme or a cofactor
synthetases <- synthetases %>%
mutate(mitochondrial = case_when(grepl("mitochondrial", Gene.name, ignore.case = T) ~ "Yes",
TRUE ~ "No"),
type = case_when(grepl("synthase", Gene.name, ignore.case = T) ~ "synthase",
grepl("synthetase", Gene.name, ignore.case = T) ~ "synthetase"),
cofactor_or_enzyme = case_when(grepl("cofactor", Gene.name, ignore.case = T) ~ "cofactor",
TRUE ~ "enzyme"))
# Merge this with the k_cat and other synthetase info from van der Haar et al., 2008
check <- left_join(synthetases, chu_synths_new, by = "Gene.secondaryIdentifier") %>%
dplyr::select(-Gene.briefDescription)
# Try to get a column with the amino acid that is loaded by each synthetase based on chu_synths_new
temp <- chu_synths_new %>%
dplyr::select(Amino_acid_3_letter, Gene.secondaryIdentifier)
synthetases <- left_join(synthetases, temp, by = "Gene.secondaryIdentifier")
# Some of them need to be added manually because they are not included in chu_synths_new (got them from SGD myself)
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "GRS2"] <- "Gly"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "ISM1"] <- "Ile"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSR1"] <- "Arg"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MST1"] <- "Thr"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSW1"] <- "Trp"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSM1"] <- "Met"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSK1"] <- "Lys"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSE1"] <- "Glu"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSY1"] <- "Tyr"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSD1"] <- "Asp"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSF1"] <- "Phe"
synthetases <- synthetases %>%
dplyr::select(-Gene.briefDescription)
# How many tRNA synthases
sum(grepl("trna synthase", synthetases$Gene.name, ignore.case = T))
# How many tRNA synthetases
sum(grepl("trna synthetase", synthetases$Gene.name, ignore.case = T))
# How many are mitochondrial?
sum(grepl("mitochondrial", synthetases$Gene.name, ignore.case = T))
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# See how many tRNA synthetases are in there: 18, 67% of them
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Prepare
WTs <- trna_ko[, grepl("WT", colnames(trna_ko))]
rownames(WTs) <- match_systematic_and_standard_protein_names(as.character(rownames(WTs)),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Actually check and save it to a new column in the dataframe
measured_proteomics <- c()
quantified_in_how_many_WTs <- c()
quantified_in_how_many_total_samples <- c()
for (i in 1:nrow(synthetases)) {
synth <- synthetases$Gene.secondaryIdentifier[i]
# If the synthetase is detected at all, present in the dataset
if (synth %in% rownames(WTs)) {
## Get the average expression of this synthetase across WTs
synth_quant_across_WTs <- as.numeric(WTs[rownames(WTs) == synth,])
measured_proteomics <- c(measured_proteomics, mean(synth_quant_across_WTs, na.rm = T))
hist(as.numeric(WTs[rownames(WTs) == synth,]))
## In how many WT samples is this synthetase actually detected? (value != 0)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, sum(synth_quant_across_WTs != 0))
## In how many samples in total is this synthetase actually detected? (value != 0)
synth_quant_across_all_samples <- as.numeric(trna_ko[rownames(trna_ko) == synth,])
quantified_in_how_many_total_samples <- c(quantified_in_how_many_total_samples, sum(synth_quant_across_all_samples != 0))
}
# If it is not
else {
measured_proteomics <- c(measured_proteomics, NA)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, NA)
quantified_in_how_many_total_samples <- c(quantified_in_how_many_total_samples, NA)
}
}
synthetases$measured_proteomics_WT <- measured_proteomics
synthetases$quantified_in_how_many_WTs <- quantified_in_how_many_WTs
synthetases$quantified_in_how_many_total_samples <- quantified_in_how_many_total_samples
# Add columns with all other amino acid information
temp <- fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")) %>%
dplyr::select(-molecular_weight_Da)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# One final thing - add information of which ones are included in the TS library, and which ones are included in the GFP/RFP data
if (working_from == "charite") {
ts_sample_layout <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/sample_layout.csv"))
} else {
ts_sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/sample_layout.csv"))
}
if (working_from == "charite") {
ts_fluorescence_raw_1 <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/Fluorescence/raw_1.csv"))
} else {
ts_fluorescence_raw_1 <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/Fluorescence/raw_1.csv"))
}
synthetases <- synthetases %>%
dplyr::mutate(in_ts_library = case_when(Gene.secondaryIdentifier %in% ts_sample_layout$Sys.Name ~ "Yes",
TRUE ~ "No"),
in_fluorescence_data = case_when(Gene.symbol %in% ts_fluorescence_raw_1$Gene ~ "Yes",
TRUE ~ "No"))
# Get a subset of this for a screenshot for a slide
temp <- synthetases %>%
dplyr::select(Gene.name, Gene.symbol, Gene.secondaryIdentifier, mitochondrial, Amino_acid_3_letter, in_ts_library, in_fluorescence_data)
# Save this dataset
fwrite(synthetases, paste(base_dir, "Data/trna_synthetases.csv", sep=""))
de_synthetases <- list()
for (i in 1:length(de_proteins_list)) {
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
grab_de_synthetases_dfs <- function(da, de_synthetases, yeastmine) {
de_synthetases_dfs <- list()
for (i in 1:length(da)) {
strain_name <- names(da)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
temp <- da[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
dplyr::rename(Synthetase_systematic = Synthetase)
return(de_synthetases_df)
}
da <- read_json(path=paste(base_dir, "Data/Other/enrichment_analysis/da_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), simplifyVector = T)
de_synthetases_df <- grab_de_synthetases_dfs(da, de_synthetases, yeastmine)
add_2_columns <- function(de_synthetases_df) {
# Amino acid carried by the KOd tRNA
temp <- master_dataset %>%
dplyr::select(Strain.Name, Isotype_from_anticodon_1_letter, anticodon, codon, chromosome, Family_size)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Strain.Name") %>%
dplyr::rename(Amino_acid_1_letter = Isotype_from_anticodon_1_letter)
temp <- amino_acids %>%
dplyr::select(Amino_acid_1_letter, amino_acid_charge, amino_acid_type) %>%
dplyr::rename(AA_charge_tRNA = amino_acid_charge,
AA_type_tRNA = amino_acid_type)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Amino_acid_1_letter") %>%
dplyr::rename(AA_carried_by_tRNA = Amino_acid_1_letter)
# Amino acid loaded by the synthetase
temp <- amino_acids %>%
dplyr::select(Amino_acid_name, Amino_acid_1_letter, Amino_acid_3_letter, amino_acid_charge, amino_acid_type) %>%
dplyr::rename(AA_loaded_by_synthetase = Amino_acid_1_letter,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid_3_letter") %>%
dplyr::select(Gene.secondaryIdentifier, AA_charge_synth, AA_type_synth) %>%
dplyr::rename(Synthetase = Gene.secondaryIdentifier)
temp_3 <- temp_2 %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_charge_synth, collapse = ",")) %>%
dplyr::rename(AA_charge_synth = text,
Synthetase_systematic = Synthetase)
temp_4 <- temp_2 %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_type_synth, collapse = ",")) %>%
dplyr::rename(AA_type_synth = text,
Synthetase_systematic = Synthetase)
de_synthetases_df <- left_join(de_synthetases_df, temp_3, by = "Synthetase_systematic")
de_synthetases_df <- left_join(de_synthetases_df, temp_4, by = "Synthetase_systematic")
temp <- left_join(chu_synths_new, temp, by = "Amino_acid_3_letter") %>%
dplyr::select(Gene.secondaryIdentifier, AA_loaded_by_synthetase) %>%
dplyr::rename(Synthetase = Gene.secondaryIdentifier) %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_loaded_by_synthetase, collapse = ",")) %>%
dplyr::rename(AA_loaded_by_synthetase = text,
Synthetase_systematic = Synthetase)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Synthetase_systematic")
return(de_synthetases_df)
}
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
de_synthetases_df <- add_2_columns(de_synthetases_df)
# Also add a column which counts how many DE synthetases there are in each strain, and also another one with in how many strains each synthetase is DE
de_synthetases_df <- de_synthetases_df %>%
group_by(Strain.Name) %>%
mutate(DE_synths_per_strain = n()) %>%
ungroup() %>%
group_by(Synthetase_systematic) %>%
mutate(strains_per_synth = n())
# Remove unnecessary variables
rm(chu_synths, chu_synths_new, de_proteins_list, new_row, trna_ko, yeastmine,
std_name, std_names, i, j, check, detected_proteins, de_synthetases,
grab_de_synthetases_dfs, da, amino_acids, add_2_columns, synths_detected)
if (working_from == "charite") {
ts_library <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar_matched.tsv"))
} else if (working_from == "home") {
ts_library <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar_matched.tsv"))
}
ts_library_synths <- ts_library[ts_library$Systematic_name %in% synthetases$Gene.secondaryIdentifier,]
synths_in_ts_library_info <- synthetases[synthetases$Gene.secondaryIdentifier %in% ts_library$Systematic_name,]
View(de_synthetases_df)
# Processed KO proteomics dataframe
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
# List of dataframes with the proteins that were DE in each KO strain
de_proteins_list <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""))
## Remove WT dataframe
de_proteins_list <- de_proteins_list[names(de_proteins_list) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
dplyr::rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
# Load YeastMine dataset
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Subset this into a new dataframe with only info of tRNA synthases/synthetases (remove "kinase" because there is one that says "tRNA synthase-associated kinase")
synthetases <- yeastmine[(grepl("trna synthase", yeastmine$Gene.name, ignore.case = T)|grepl("trna synthetase", yeastmine$Gene.name, ignore.case = T)) &
!grepl("kinase", yeastmine$Gene.name, ignore.case = T),]
# Add a column with information on:
#   - Whether each synthetase is mitochondrial or not
#   - Whether it is a synthase or a synthetase
#   - Whether it is the actual enzyme or a cofactor
synthetases <- synthetases %>%
mutate(mitochondrial = case_when(grepl("mitochondrial", Gene.name, ignore.case = T) ~ "Yes",
TRUE ~ "No"),
type = case_when(grepl("synthase", Gene.name, ignore.case = T) ~ "synthase",
grepl("synthetase", Gene.name, ignore.case = T) ~ "synthetase"),
cofactor_or_enzyme = case_when(grepl("cofactor", Gene.name, ignore.case = T) ~ "cofactor",
TRUE ~ "enzyme"))
# Merge this with the k_cat and other synthetase info from van der Haar et al., 2008
check <- left_join(synthetases, chu_synths_new, by = "Gene.secondaryIdentifier") %>%
dplyr::select(-Gene.briefDescription)
# Try to get a column with the amino acid that is loaded by each synthetase based on chu_synths_new
temp <- chu_synths_new %>%
dplyr::select(Amino_acid_3_letter, Gene.secondaryIdentifier)
synthetases <- left_join(synthetases, temp, by = "Gene.secondaryIdentifier")
# Some of them need to be added manually because they are not included in chu_synths_new (got them from SGD myself)
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "GRS2"] <- "Gly"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "ISM1"] <- "Ile"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSR1"] <- "Arg"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MST1"] <- "Thr"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSW1"] <- "Trp"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSM1"] <- "Met"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSK1"] <- "Lys"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSE1"] <- "Glu"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSY1"] <- "Tyr"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSD1"] <- "Asp"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSF1"] <- "Phe"
synthetases <- synthetases %>%
dplyr::select(-Gene.briefDescription)
# How many tRNA synthases
sum(grepl("trna synthase", synthetases$Gene.name, ignore.case = T))
# How many tRNA synthetases
sum(grepl("trna synthetase", synthetases$Gene.name, ignore.case = T))
# How many are mitochondrial?
sum(grepl("mitochondrial", synthetases$Gene.name, ignore.case = T))
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# See how many tRNA synthetases are in there: 18, 67% of them
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Prepare
WTs <- trna_ko[, grepl("WT", colnames(trna_ko))]
KOs <- trna_ko[, !grepl("WT", colnames(trna_ko))]
rownames(WTs) <- match_systematic_and_standard_protein_names(as.character(rownames(WTs)),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Actually check and save it to a new column in the dataframe
measured_proteomics <- c()
quantified_in_how_many_WTs <- c()
quantified_in_how_many_KO_samples <- c()
for (i in 1:nrow(synthetases)) {
synth <- synthetases$Gene.secondaryIdentifier[i]
# If the synthetase is detected at all, present in the dataset
if (synth %in% rownames(WTs)) {
## Get the average expression of this synthetase across WTs
synth_quant_across_WTs <- as.numeric(WTs[rownames(WTs) == synth,])
measured_proteomics <- c(measured_proteomics, mean(synth_quant_across_WTs, na.rm = T))
hist(as.numeric(WTs[rownames(WTs) == synth,]))
## In how many WT samples is this synthetase actually detected? (value != 0)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, sum(synth_quant_across_WTs != 0))
## In how many samples in total is this synthetase actually detected? (value != 0)
synth_quant_across_KO_samples <- as.numeric(KOs[rownames(KOs) == synth,])
quantified_in_how_many_KO_samples <- c(quantified_in_how_many_KO_samples, sum(synth_quant_across_all_samples != 0))
}
# If it is not
else {
measured_proteomics <- c(measured_proteomics, NA)
quantified_in_how_many_WTs <- c(quantified_in_how_many_WTs, NA)
quantified_in_how_many_KO_samples <- c(quantified_in_how_many_KO_samples, NA)
}
}
synthetases$measured_proteomics_WT <- measured_proteomics
synthetases$quantified_in_how_many_WTs <- quantified_in_how_many_WTs
synthetases$quantified_in_how_many_KO_samples <- quantified_in_how_many_KO_samples
# Add columns with all other amino acid information
temp <- fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")) %>%
dplyr::select(-molecular_weight_Da)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# One final thing - add information of which ones are included in the TS library, and which ones are included in the GFP/RFP data
if (working_from == "charite") {
ts_sample_layout <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/sample_layout.csv"))
} else {
ts_sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/sample_layout.csv"))
}
if (working_from == "charite") {
ts_fluorescence_raw_1 <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/Fluorescence/raw_1.csv"))
} else {
ts_fluorescence_raw_1 <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/Fluorescence/raw_1.csv"))
}
synthetases <- synthetases %>%
dplyr::mutate(in_ts_library = case_when(Gene.secondaryIdentifier %in% ts_sample_layout$Sys.Name ~ "Yes",
TRUE ~ "No"),
in_fluorescence_data = case_when(Gene.symbol %in% ts_fluorescence_raw_1$Gene ~ "Yes",
TRUE ~ "No"))
# Get a subset of this for a screenshot for a slide
temp <- synthetases %>%
dplyr::select(Gene.name, Gene.symbol, Gene.secondaryIdentifier, mitochondrial, Amino_acid_3_letter, in_ts_library, in_fluorescence_data)
# Save this dataset
fwrite(synthetases, paste(base_dir, "Data/trna_synthetases.csv", sep=""))
de_synthetases <- list()
for (i in 1:length(de_proteins_list)) {
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
grab_de_synthetases_dfs <- function(da, de_synthetases, yeastmine) {
de_synthetases_dfs <- list()
for (i in 1:length(da)) {
strain_name <- names(da)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
temp <- da[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
dplyr::rename(Synthetase_systematic = Synthetase)
return(de_synthetases_df)
}
da <- read_json(path=paste(base_dir, "Data/Other/enrichment_analysis/da_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), simplifyVector = T)
de_synthetases_df <- grab_de_synthetases_dfs(da, de_synthetases, yeastmine)
View(de_synthetases_df)
# Add the information from the synthetases dataframe of in how many total samples and in how many WT samples each synthetase is detected
temp <- synthetases %>%
dplyr::select(Gene.secondaryIdentifier, measured_proteomics_WT, quantified_in_how_many_WTs, quantified_in_how_many_KO_samples) %>%
dplyr::rename(Synthetase_systematic = Gene.secondaryIdentifier)
warnings()
de_synthetases_df<- de_synthetases_df %>%
left_join(temp, by = "Synthetase_systematic")
length(unique(synthetases$Gene.secondaryIdentifier))
length(unique(de_synthetases_df$Synthetase_systematic))
sum(unique(de_synthetases_df$Synthetase_systematic) %in% unique(synthetases$Gene.secondaryIdentifier))
sum(unique(synthetases$Gene.secondaryIdentifier) %in% unique(de_synthetases_df$Synthetase_systematic))
View(trna_ko)
sum(rownames(trna_ko) == "YHR019C")
