library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
library(limpa)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included) - THIS I AM NOT USING ANYMORE, AM I?
threshold_major <- 2
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Proteomics data
proteomics_raw <- read.delim2(paste(base_dir, 'tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', sep=""), header = T)
# Sample layout
sample_layout <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/sample_layout_alvaro.tsv", sep="")))
# The master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# The ODs
od <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# UniProt dataset
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Import the functions I have created in another file
source(paste(base_dir, "tRNA_KOs/Code/R/Mine/0.general_use_functions.R", sep=""))
# limpa output
dpcfit <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/dpcfit.rds", sep=""))
y.protein <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/y.protein.rds", sep=""))
## Set this so I don't have to change its name in the code below
trna_ko <- y.protein$E
temp_uniprot <- uniprot_db %>%
dplyr::select(Entry, `Gene Names (ordered locus)`) %>%
dplyr::rename(Gene.secondaryIdentifier = `Gene Names (ordered locus)`)
temp_rownames <- data.frame(rownames(y.protein$E))
colnames(temp_rownames) <- "Entry"
temp_rownames <- temp_rownames %>%
left_join(temp_uniprot, by = "Entry")
remove_second_systematic_name <- function(name) {
if (grepl(";", name)) {
new_name <- substr(name, 0, str_locate(name, ";")[1]-1)
}
else {
new_name <- name
}
return(new_name)
}
temp_rownames$Gene.secondaryIdentifier <- sapply(temp_rownames$Gene.secondaryIdentifier, remove_second_systematic_name)
View(temp_rownames)
rownames(y.protein) <- temp_rownames$Gene.secondaryIdentifier
rownames(y.protein$E) <- temp_rownames$Gene.secondaryIdentifier
View(y.protein[["E"]])
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
library(limpa)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included) - THIS I AM NOT USING ANYMORE, AM I?
threshold_major <- 2
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Proteomics data
proteomics_raw <- read.delim2(paste(base_dir, 'tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', sep=""), header = T)
# Sample layout
sample_layout <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/sample_layout_alvaro.tsv", sep="")))
# The master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# The ODs
od <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# UniProt dataset
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Import the functions I have created in another file
source(paste(base_dir, "tRNA_KOs/Code/R/Mine/0.general_use_functions.R", sep=""))
# limpa output
dpcfit <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/dpcfit.rds", sep=""))
y.protein <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/y.protein.rds", sep=""))
## Set this so I don't have to change its name in the code below
trna_ko <- y.protein$E
# Prepare to perform the DEA
## Change the protein names from the UniProt ones (produced by DIA-NN) to systematic Sc ones
## Some systematic names contain 2 of them - I have to deal with that - I'M TAKING THE FIRST ONE, HOPE THAT'S NOT TOO BAD
temp_uniprot <- uniprot_db %>%
dplyr::select(Entry, `Gene Names (ordered locus)`) %>%
dplyr::rename(Gene.secondaryIdentifier = `Gene Names (ordered locus)`)
temp_rownames <- data.frame(rownames(y.protein$E))
colnames(temp_rownames) <- "Entry"
temp_rownames <- temp_rownames %>%
left_join(temp_uniprot, by = "Entry")
remove_second_systematic_name <- function(name) {
if (grepl(";", name)) {
new_name <- substr(name, 0, str_locate(name, ";")[1]-1)
}
else {
new_name <- name
}
return(new_name)
}
temp_rownames$Gene.secondaryIdentifier <- sapply(temp_rownames$Gene.secondaryIdentifier, remove_second_systematic_name)
rownames(y.protein$E) <- temp_rownames$Gene.secondaryIdentifier
## Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
## Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
fit <- dpcDE(y.protein, mm)
# Limpa QC plots
#plotDPC(dpcfit)
#plotMDSUsingSEs(y.protein)
## Average expression of each protein across all samples - need to get this working for limpa!!
#hist(rowMeans(y.protein))
#hist(apply(y.protein, 1, var), breaks = 60)
#mean(apply(y.protein, 1, var))
#median(apply(y.protein, 1, var))
# This is what they provide, I wonder if they use the kind of design matrix that Alexis used
# I did not, so I am going to introduce contrasts here? I hope that makes sense?
## Create all contrasts - need to susbtitute parentheses in strain names by dots so that it runs...
treatments <- colnames(fit$coefficients)
treatments <- sapply(treatments, function(x) str_replace(x, "\\(", "."))
treatments <- sapply(treatments, function(x) str_replace(x, "\\)", "."))
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-WT")
## Need to change parentheses to dots in the fit object as well so they match...
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\(", "."))
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\)", "."))
## Introduce the contrasts and run eBayes for them, 10 at a time
da <- list()
batch_size <- 10
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
new_contrast_names <- c()
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
new_name <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
if (grepl(".", new_name)) {
substr(new_name, 3, 3) <- "("
substr(new_name, 7, 7) <- ")"
}
da[[new_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
da[[new_name]]$Strain.Name <- rep(new_name, nrow(da[[new_name]]))
}
}
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
temp <- na.omit(temp)
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[(temp$adj.P.Val < alpha) &
(temp$logFC > lfc_threshold | temp$logFC < -lfc_threshold)]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep="")
write_json(de_proteins_list, path=output_file)
write_json(da, path=paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/da_NEW_TRIAL_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), pretty = T)
# Format data
da <- bind_rows(da) %>%
mutate(protein = rep(rownames(da[[1]]), times = length(da))) %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
temp <- sample_layout %>%
dplyr::distinct(Strain.Name, .keep_all = T)
da <- left_join(da, temp, by = "Strain.Name") %>%
dplyr::relocate(Strain.Name, .before = logFC) %>%
dplyr::relocate(protein, .after = Strain.Name) %>%
filter(Strain.Name != "WT")
da <- da %>%
dplyr::select(protein, Strain.Name, logFC, P.Value, adj.P.Val) %>%                              # From here on in this function it's added by me
mutate(diffexpressed_adjusted = case_when((logFC > lfc_threshold) & (adj.P.Val < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (adj.P.Val < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"),
diffexpressed_non_adjusted = case_when((logFC > lfc_threshold) & (P.Value < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (P.Value < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"))
da <- da %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
# Add a column to da with the number of replicates per KO - by me
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(Amino_acid_1_letter = str_sub(Strain.Name, 2, 2),
chromosome_letter = substr(Strain.Name, 8, 8),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))"),
up_down_regulated_ratio_adjusted = Up_regulated_adjusted/Down_regulated_adjusted,
up_down_regulated_ratio_non_adjusted = Up_regulated_non_adjusted/Down_regulated_non_adjusted) %>%
arrange(Amino_acid_1_letter) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Add all amino acid names
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/GtRNAdb/amino_acids.csv", sep="")))
responsiveness <- left_join(responsiveness, amino_acids, by = "Amino_acid_1_letter")
# Save responsiveness dataset
fwrite(responsiveness, paste(base_dir, "tRNA_KOs/Data/produced_during_analysis/responsiveness_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".csv", sep=""))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(amino_acids, DE, de_proteins_list, fit, fit2, KOs_replicates, mm, temp, trna_levels, contrast.matrix, design, fit3,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, unique_KOs, trna_ko, dpcfit)
# Calculate CV
proteomics <- as.data.frame(y.protein$E)
proteomics$protein <- rownames(proteomics)
proteomics_data_log2_long <- pivot_longer(proteomics, cols = !protein, names_to = "final_proteomics_colnames")
proteomics_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name)
proteomics_data_log2_long <- left_join(proteomics_data_log2_long, proteomics_layout, by = "final_proteomics_colnames") %>%
group_by(Strain.Name) %>%
dplyr::mutate(CV_strain = robust_cv(value)) %>%                    # CV for samples of the same family (biological replicates), across all proteins
ungroup() %>%
group_by(protein) %>%
dplyr::mutate(CV_protein = robust_cv(value)) %>%                   # CV for a protein, across all samples
ungroup()
# Plot
plot_cv_per_protein <- proteomics_data_log2_long %>%                       # dataset for plotting CV per protein
dplyr::select(protein, CV_protein) %>%
dplyr::distinct(protein, .keep_all = T)
plot_cv_per_strain <- proteomics_data_log2_long %>%                        # dataset for plotting CV per sample
dplyr::select(Strain.Name, CV_strain) %>%
dplyr::distinct(Strain.Name, .keep_all = T)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
proteins_with_high_CV <- plot_cv_per_protein$protein[plot_cv_per_protein$CV_protein > 0.4]
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth=.1, color="black"),    # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins") +
geom_text_repel(data = subset(plot_cv_per_strain, CV_strain > 0.35 | CV_strain < 0.2),
aes(x = Strain.Name, y = CV_strain, label = Strain.Name),
size = 4)
strains_with_high_CV <- plot_cv_per_strain$Strain.Name[plot_cv_per_strain$CV_strain > 0.35]
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated #samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics[, colnames(proteomics) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_no_repeated_columns <- proteomics[,!(colnames(proteomics) %in% repeated_samples)]
proteomics_no_repeated_columns <- cbind(proteomics_no_repeated_columns, out_temp)
# Create dataset for ploting
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name, Anticodon, Amino_acid_1_letter)
high_cv_proteins_proteomics <- proteomics_no_repeated_columns %>%
dplyr::filter(protein %in% proteins_with_high_CV) %>%
pivot_longer(cols = !protein, names_to = "final_proteomics_colnames") %>%
left_join(temp_layout, by = "final_proteomics_colnames") %>%
dplyr::mutate(Anticodon = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Anticodon),
Amino_acid_1_letter = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Amino_acid_1_letter))
# Plot
proteins <- unique(high_cv_proteins_proteomics$protein)
## Iterate over the proteins and make the same plots for all of them
for (i in 1:length(proteins)) {
protein_selected <- proteins[i]
# Plot abundance of the protein per amino acid carried
plot <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected), aes(x = Amino_acid_1_letter, y = value)) +
geom_boxplot(fill = "grey") +
theme_light() +
xlab("Amino acid") +
ylab("log2(protein abundance)") +
labs(title = glue("Abundance of {protein_selected} by amino acid carried by the KOd tRNA"))
print(plot)
myLetters <- letters[1:26]                            # Need this to be able to re-order anticodons by amino acid
myLetters <- c(myLetters, "wt")                       # Need to add this so it doesn't break down because "WT" is not a letter
# Plot abundance of the protein per anticodon (tRNA family)
plot_2 <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected),
aes(x = fct_reorder(Anticodon, match(tolower(Amino_acid_1_letter), myLetters)), y = value, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab("Anticodon") +
ylab("log2(protein abundance)") +
labs(title = glue("Abundance of {protein_selected} by anticodon in the KOd tRNA"),
fill = "Amino acid")
print(plot_2)
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
library(limpa)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included) - THIS I AM NOT USING ANYMORE, AM I?
threshold_major <- 2
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Proteomics data
proteomics_raw <- read.delim2(paste(base_dir, 'tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', sep=""), header = T)
# Sample layout
sample_layout <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/sample_layout_alvaro.tsv", sep="")))
# The master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# The ODs
od <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# UniProt dataset
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Import the functions I have created in another file
source(paste(base_dir, "tRNA_KOs/Code/R/Mine/0.general_use_functions.R", sep=""))
# limpa output
dpcfit <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/dpcfit.rds", sep=""))
y.protein <- readRDS(paste(base_dir, "tRNA_KOs/Data/limpa_analysis/y.protein.rds", sep=""))
## Set this so I don't have to change its name in the code below
trna_ko <- y.protein$E
View(master_dataset)
