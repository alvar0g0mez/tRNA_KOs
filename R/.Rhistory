library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(diann)
library(platetools)
library(viridis)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our raw proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our raw proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# The stats file
stats_file <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/report.stats.tsv.gz"))
# The corrected, precursor-level data
report <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_reprep_driftcorrected_batchcorrected_onWTs.tsv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# The stats file
stats_file <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/report.stats.tsv.gz"))
# The corrected, precursor-level data
report <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_reprep_driftcorrected_batchcorrected_onWTs.tsv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# DONE ONCE, NOT NECESSARY TO RUN AGAIN SINCE IT TAKES A LONG TIME, JUST LOAD THE RESULTS
# Get report into long format
#report <- report %>%
#  pivot_longer(cols = !c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes),
#               names_to = "File.Name",
#               values_to = "Precursor.Quantity")
#
## Turn negative values to NAs
#report <- report %>%
#  mutate(Precursor.Quantity = case_when(Precursor.Quantity < 0 ~ NA,
#                                        TRUE ~ Precursor.Quantity))
# Run MaxLFQ on this data
#proteomics_processed <- diann_maxlfq(report,
#                                     sample.header = "File.Name",                        # Column with the sample IDs
#                                     group.header = "Genes",                             # Column with the protein IDs
#                                     id.header = "Precursor.Id",                         # Column with the precursor IDs
#                                     quantity.header = "Precursor.Quantity")             # Column with the precursor quantities
#
#proteomics_processed <- data.frame(proteomics_processed)
#fwrite(proteomics_processed, paste(base_dir, "Data/Other/proteomics_data/protein_level_processed_not_imputed.tsv", sep=""))
# Load the resulting file from MaxLFQ
proteomics_processed <- as.data.frame(fread(paste(base_dir, "Data/Other/proteomics_data/protein_level_processed_not_imputed.tsv", sep="")))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Remove annoying unnecessary (?) column (UniProt IDs)
if (dataset == "outlier_removed")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-sample) %>%
rename(genes = X) %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%                         # Remove rows for which "genes" column is empty or has "Genes" as value
column_to_rownames(var = 'genes')}                                                # Convert gene name column to rownames
if (dataset == "batchcorrected_onWTs")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-Protein.Group) %>%
rename(genes = Genes) %>%
column_to_rownames(var = 'genes')}
# Come up with new colnames
new_names <- c()
current_names <- colnames(proteomics_raw)
new_names <- c(new_names, as.character(sample_layout$final_proteomics_colnames[match(current_names, sample_layout$raw_proteomics_colnames)]))
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[, colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
dplyr::select(!contains('QC'))                                 # Remove QCs columns
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Remove the sub-batch that went wrong
if (dataset == "outlier_removed") {
samples_in_wrong_batch <- sample_layout$final_proteomics_colnames[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
}
# ADD A STEP WHERE I TURN THE ROWNAMES TO ALL BE SYSTEMATIC GENE NAMES RATHER THAN STANDARD AND SYSTEMATIC MIXED?
# Save this last dataset for later usage elsewhere
if (dataset == "outlier_removed") {
fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_outlier_removed.tsv", sep=""), row.names = T)
}
if (dataset == "batchcorrected_onWTs") {
fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep=""), row.names = T)
}
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, out, i, new_names, samples_in_wrong_batch, current_names)
# I take the opportunity here to improve my OD data, figuring out which where the empty wells
out <- data.frame(matrix(nrow = 0, ncol = ncol(od)))
View(sample_layout)
i = 1
temp_sample_layout <- sample_layout %>%
filter(Replicate == i)
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96))
out <- data.frame(matrix(nrow = 0, ncol = ncol(od)))
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96))
temp_od <- od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "Yes",
TRUE ~ "No"))
out <- rbind(out, temp_od)
}
replicates <- c(1, 2, 3)
out <- data.frame(matrix(nrow = 0, ncol = ncol(od)))
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96))
temp_od <- od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "Yes",
TRUE ~ "No"))
out <- rbind(out, temp_od)
}
View(out)
out <- data.frame(matrix(nrow = 0, ncol = ncol(od)))
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "No",
TRUE ~ "Yes"))
out <- rbind(out, temp_od)
}
View(out)
View(temp_od)
View(temp_sample_layout)
View(sample_layout)
# 384-well plates
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.384,
plate = 384) +
ggtitle(glue("384-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_384_well_plate_", i, ".png", sep=""))
}
# 96-well plates
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
# 384-well plates
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.384,
plate = 384) +
ggtitle(glue("384-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_384_well_plate_", i, ".png", sep=""))
}
# 96-well plates
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
# 384-well plates
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Analysis.Plate.96,
well = temp$Position.Within.Plate.384,
plate = 384) +
ggtitle(glue("384-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_384_well_plate_", i, ".png", sep=""))
}
# 96-well plates
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(Position.Within.Plate.384 = case_when(nchar(as.character(Analysis.Column.384)) == 2 ~ paste(Analysis.Row.384, Analysis.Column.384, sep=""),
nchar(as.character(Analysis.Column.384)) == 1 ~ paste(Analysis.Row.384, 0, Analysis.Column.384, sep="")),
Position.Within.Plate.96 = case_when(nchar(as.character(Analysis.Column.96)) == 2 ~ paste(Analysis.Row.96, Analysis.Column.96, sep=""),
nchar(as.character(Analysis.Column.96)) == 1 ~ paste(Analysis.Row.96, 0, Analysis.Column.96, sep="")))
# 384-well plates
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Analysis.Plate.96,
well = temp$Position.Within.Plate.384,
plate = 384) +
ggtitle(glue("384-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_384_well_plate_", i, ".png", sep=""))
}
# 96-well plates
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Analysis.Plate.96,
well = temp$Position.Within.Plate.384,
plate = 384) +
ggtitle(glue("384-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_384_well_plate_", i, ".png", sep=""))
}
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
for (i in replicates) {
temp <- sample_layout %>%
filter(Analysis.Plate.96 == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
for (i in replicates) {
temp <- sample_layout %>%
filter(Analysis.Plate.96 == i & Analysis.Plate.384 == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate.96,
plate = 96) +
ggtitle(glue("96-well plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_96_well_plate_", i, ".png", sep=""))
}
gc()
library(dplyr)
library(tidyr)
library(xlsx)
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
# Load the sample layout
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
# Load the sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
}
# Load data
processed_od <- read.xlsx(paste(base_dir, "Data/OD_processed.xlsx", sep=""))
# Load data
processed_od <- read.xlsx(paste(base_dir, "Data/OD_processed.xlsx", sep=""), sheetIndex = 1)
out <- data.frame(matrix(nrow = 0, ncol = ncol(od)))
out <- data.frame(matrix(nrow = 0, ncol = ncol(processed_od)))
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- processed_od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "No",
TRUE ~ "Yes"))
out <- rbind(out, temp_od)
}
replicates <- c(1,2,3)
out <- data.frame(matrix(nrow = 0, ncol = ncol(processed_od)))
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- processed_od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "No",
TRUE ~ "Yes"))
out <- rbind(out, temp_od)
}
View(out)
View(processed_od)
View(sample_layout)
i = 1
temp_sample_layout <- sample_layout %>%
filter(Replicate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- processed_od %>%
filter(Plate_96 == i)
View(temp_sample_layout)
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i & Analysis.Well.Plate == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- processed_od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "No",
TRUE ~ "Yes"))
out <- rbind(out, temp_od)
}
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i & Analysis.Plate.96 == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- processed_od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "No",
TRUE ~ "Yes"))
out <- rbind(out, temp_od)
}
replicates <- c(1,2,3)
out <- data.frame(matrix(nrow = 0, ncol = ncol(processed_od)))
for (i in replicates) {
temp_sample_layout <- sample_layout %>%
filter(Replicate == i & Analysis.Plate.96 == i) %>%
mutate(Position.Temp = paste(Analysis.Row.96, Analysis.Column.96, sep=""))
temp_od <- processed_od %>%
filter(Plate_96 == i)
temp_od <- temp_od %>%
mutate(Empty_well = case_when(Position %in% temp_sample_layout$Position.Temp ~ "No",
TRUE ~ "Yes"))
out <- rbind(out, temp_od)
}
View(out)
# Save the final version with the new column
fwrite(out, paste(base_dir, "Data/OD_final.csv", sep=""))
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Color by empty wells
ggplot(data = od, aes(x = OD_processed, fill = Empty_well)) +
geom_histogram(binwidth = 0.1, col = "black") +
theme_light() +
labs(title = "Processed ODs for tRNA KO strains",
subtitle = "For the following 96-well plates: 2.1., 2.2., 2.3.") +
ylab("Frequency") +
xlab("OD")
# Color by empty wells
ggplot(data = od, aes(x = OD_processed, fill = Empty_well)) +
geom_histogram(binwidth = 0.01, col = "black") +
theme_light() +
labs(title = "Processed ODs for tRNA KO strains",
subtitle = "For the following 96-well plates: 2.1., 2.2., 2.3.") +
ylab("Frequency") +
xlab("OD")
# Color by empty wells
ggplot(data = od, aes(x = OD_processed, fill = Empty_well)) +
geom_histogram(binwidth = 0.05, col = "black") +
theme_light() +
labs(title = "Processed ODs for tRNA KO strains",
subtitle = "For the following 96-well plates: 2.1., 2.2., 2.3.") +
ylab("Frequency") +
xlab("OD")
# Color by empty wells
ggplot(data = od, aes(x = OD_processed, fill = Empty_well)) +
geom_histogram(binwidth = 0.04, col = "black") +
theme_light() +
labs(title = "Processed ODs for tRNA KO strains",
subtitle = "For the following 96-well plates: 2.1., 2.2., 2.3.") +
ylab("Frequency") +
xlab("OD")
# Color by empty wells
ggplot(data = od, aes(x = OD_processed, fill = Empty_well)) +
geom_histogram(binwidth = 0.03, col = "black") +
theme_light() +
labs(title = "Processed ODs for tRNA KO strains",
subtitle = "For the following 96-well plates: 2.1., 2.2., 2.3.") +
ylab("Frequency") +
xlab("OD")
# Color by empty wells
ggplot(data = od, aes(x = OD_processed, fill = Empty_well)) +
geom_histogram(binwidth = 0.03, col = "black") +
theme_light() +
labs(title = "Processed ODs for tRNA KO strains",
subtitle = "For the following 96-well plates: 2.1., 2.2., 2.3.",
fill = "Empty well?") +
ylab("Frequency") +
xlab("OD")
