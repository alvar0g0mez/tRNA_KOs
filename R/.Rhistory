trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Fit linear model
fit <- lmFit(trna_ko_log, mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', number = Inf, sort.by = 'none')
}
# At the alpha specified at the top of the document
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_001 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < alpha]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_001[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.RData", sep="")
saveRDS(de_proteins_list_001, file=output_file)
# At alpha= 0.05
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_005 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < 0.05]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_005[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.RData", sep="")
saveRDS(de_proteins_list_005, file=output_file)
saveRDS(da, file=paste(base_dir, "Data/Other/enrichment_analysis/da.RData", sep=""))
# Load their phenotypic data: growth rate and growth yield for all KOs
loc <- paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep = "")
phenotypic_data <- as.data.frame(fread(loc))
# Just number of DE proteins
UCU_major_minor <- phenotypic_data %>%
filter(UCU_family != "No") %>%
dplyr::select(gene_name, UCU_family) %>%
rename(Strain.Name = gene_name)
UCU_responsiveness <- responsiveness%>% filter(anticodon == "UCU")
UCU_family <- full_join(UCU_major_minor, UCU_responsiveness, by = "Strain.Name")
# Volcano plots
## Keep only KOs in UCU family
KOs_in_UCU_family <- UCU_family$Strain.Name
da_only_KOs_from_UCU_family <- da[da$Strain.Name %in% KOs_in_UCU_family,]
da$Strain.Name
View(da)
# Format data
da <- bind_rows(da) %>%
mutate(protein = rep(rownames(da[[1]]), times = length(da)),
Strain.Name = rep(names(da), each = nrow(da[[1]])), .before = 1) %>%
`rownames<-`(NULL) %>%
dplyr::select(protein, Strain.Name, logFC, adj.P.Val) %>%
filter(Strain.Name != 'WT') %>%                              # From here on in this function it's added by me
mutate(diffexpressed = case_when(logFC > lfc_threshold & adj.P.Val < alpha ~ "Up_regulated",
logFC < -lfc_threshold & adj.P.Val < alpha ~ "Down_regulated",
TRUE ~ "Not_significant"))
# Add a column to da with the number of replicates per KO - by me - THIS DOESN'T REALLY MAKE SENSE INSIDE THIS FUNCTION BUT WHEN DOING DE FOR ALL PLATES AT ONCE IT WAS, SO I'LL KEEP IT JUST IN CASE
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= log2(lfc_threshold) & adj.P.Val <= 0.01, na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(AA = str_sub(Strain.Name, 2, 2),
chromosome = str_extract(str_remove(str_sub(Strain.Name, 1, -4), '[:digit:]$'), '[:alpha:]$'),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))")) %>%
arrange(AA) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(DE, de_proteins_list_001, de_proteins_list_005, fit, fit2, KOs_replicates, mm, sample_layout, temp, trna_ko, trna_ko_log,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, trna_levels, unique_KOs)
# Load their phenotypic data: growth rate and growth yield for all KOs
loc <- paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep = "")
phenotypic_data <- as.data.frame(fread(loc))
# Just number of DE proteins
UCU_major_minor <- phenotypic_data %>%
filter(UCU_family != "No") %>%
dplyr::select(gene_name, UCU_family) %>%
rename(Strain.Name = gene_name)
UCU_responsiveness <- responsiveness%>% filter(anticodon == "UCU")
UCU_family <- full_join(UCU_major_minor, UCU_responsiveness, by = "Strain.Name")
# Volcano plots
## Keep only KOs in UCU family
KOs_in_UCU_family <- UCU_family$Strain.Name
da_only_KOs_from_UCU_family <- da[da$Strain.Name %in% KOs_in_UCU_family,]
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(KOs_in_UCU_family)) {
trna <- KOs_in_UCU_family[i]
plot_title <- paste(trna, UCU_family$UCU_family[UCU_family$Strain.Name == trna], sep = "_")
temp <- da_only_KOs_from_UCU_family %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = plot_title) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_location <- paste(base_dir, "Output/Plots/Volcano_plots/DE_together/volcano_plots_per_KO_UCU_family_together.pdf", sep="")
ggsave(
filename = output_location,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_in_UCU_family", "temp", "da_only_KOs_from_UCU_family", "trna", "plot_title", "UCU_major_minor", "UCU_responsiveness", "i"))
ggplot(data = responsiveness, aes(x = as.factor(Replicate_num), y = nDEP, col = as.factor(Replicate_num))) +
geom_boxplot() +
geom_jitter(position=position_jitter(0.2)) +
xlab("Number of replicates")
replicate_num_vs_nDEP_cor <- cor(responsiveness$nDEP, responsiveness$Replicate_num)
replicate_num_vs_nDEP_cor
# Remove unnecessary objects
rm(replicate_num_vs_nDEP_cor)
responsiveness <- responsiveness %>%
group_by(anticodon) %>%
mutate(n= n())
ggplot(data = responsiveness, aes(x = anticodon, y = nDEP, fill = n)) +
geom_boxplot()
# Correlation between nDEP and tRNA family size
resp_summarized_by_family <- aggregate(responsiveness$nDEP, list(responsiveness$anticodon), mean)
colnames(resp_summarized_by_family) <- c("anticodon", "nDEP")
resp_summarized_by_family <- merge(resp_summarized_by_family, responsiveness[, c("anticodon", "n")], by = "anticodon", all.x = T)
resp_summarized_by_family <- resp_summarized_by_family %>%
distinct(anticodon, .keep_all = T)
cor(resp_summarized_by_family$nDEP, resp_summarized_by_family$n)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_in_UCU_family", "temp", "da_only_KOs_from_UCU_family", "trna", "plot_title", "UCU_major_minor", "UCU_responsiveness", "i", "UCU_family", "phenotypic_data", "output_location"))
ggplot(data = responsiveness, aes(x = as.factor(Replicate_num), y = nDEP, col = as.factor(Replicate_num))) +
geom_boxplot() +
geom_jitter(position=position_jitter(0.2)) +
xlab("Number of replicates")
replicate_num_vs_nDEP_cor <- cor(responsiveness$nDEP, responsiveness$Replicate_num)
replicate_num_vs_nDEP_cor
# Remove unnecessary objects
rm(replicate_num_vs_nDEP_cor)
# Remove unnecessary variables
rm(resp_summarized_by_family)
# Histogram of avg_nDEP for each KO strain
ggplot(data = resp, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I define the threshold to make out major and minor tRNA genes - for now I have it at 2
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness<- responsiveness%>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
responsiveness<- responsiveness%>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, resp, by = "Strain.Name")
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I define the threshold to make out major and minor tRNA genes - for now I have it at 2
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness<- responsiveness%>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
responsiveness<- responsiveness%>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, resp, by = "Strain.Name")
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I define the threshold to make out major and minor tRNA genes - for now I have it at 2
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness<- responsiveness%>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
responsiveness<- responsiveness%>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, responsiveness, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% responsiveness$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
dplyr::select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Produce a single histogram like the one at the beginning of this chunk for each set of tRNA isoacceptors - and save them to a PDF
## Create empty list of plots
plot_list <- list()
## Generate the plots and add them to the list
aas <- levels(as.factor(resp$AA))
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I define the threshold to make out major and minor tRNA genes - for now I have it at 2
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness<- responsiveness%>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
responsiveness<- responsiveness%>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, responsiveness, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% responsiveness$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
dplyr::select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Produce a single histogram like the one at the beginning of this chunk for each set of tRNA isoacceptors - and save them to a PDF
## Create empty list of plots
plot_list <- list()
## Generate the plots and add them to the list
aas <- levels(as.factor(responsiveness$AA))
for (i in 1:length(aas)) {
aa <- aas[i]
temp <- responsiveness%>%
filter(AA == aa)
plot_list[[aa]] <- ggplot(data = temp, aes(x = nDEP, col = anticodon, fill = anticodon)) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs loading {aa}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/nDEP_hists_per_isoacceptors_color_by_codon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unnecessary variables
rm(family_sizes, family_sizes_long, my_grobs, plot_list, temp, aa, aas, loc, output_file, i)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(data.table)
library(dplyr)
library(fgsea)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.RData", sep=""))
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05
de_proteins_list_005 <- readRDS(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.RData", sep=""))
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
View(phenotypic_data)
hist(phenotypic_data$DTT)
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_hist(binwidth = 1) +
theme_light()
library(ggplot)
library(ggplot2)
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_hist(binwidth = 1) +
theme_light()
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_histogram(binwidth = 1) +
theme_light()
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT)+sd(phenotypic_data$DTT), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT)-sd(phenotypic_data$DTT), col = "red")
mean(phenotypic_data$DTT)+sd(phenotypic_data$DTT)
# Plot GR and GY in DTT
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)+sd(phenotypic_data$DTT, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)-sd(phenotypic_data$DTT, na.rm = T), col = "red")
ggplot(data = phenotypic_data, aes(x = DTT_GY)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)+sd(phenotypic_data$DTT_GY, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)-sd(phenotypic_data$DTT_GY, na.rm = T), col = "red")
ggplot(data = phenotypic_data, aes(x = DTT)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)+sd(phenotypic_data$DTT, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT, na.rm = T)-sd(phenotypic_data$DTT, na.rm = T), col = "red")
ggplot(data = phenotypic_data, aes(x = DTT_GY)) +
geom_histogram(binwidth = 1) +
theme_light() +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)+sd(phenotypic_data$DTT_GY, na.rm = T), col = "red") +
geom_vline(xintercept = mean(phenotypic_data$DTT_GY, na.rm = T)-sd(phenotypic_data$DTT_GY, na.rm = T), col = "red")
# Need to look into the original article to figure out which one to use - going with both for now
strains_better_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT > 0 & phenotypic_data$DTT_GY > 0]
strain_worse_or_equal_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT <= 0 & phenotypic_data$DTT_GY <= 0]
de_proteins_list_entrez_ID_001 <- list()
for (i in 1:length(de_proteins_list_001)) {
temp <- data.frame("Protein_stable_ID" = de_proteins_list_001[[i]])
temp <- left_join(temp, entrez_db, by = "Protein_stable_ID")
temp <- temp$`NCBI_gene_(formerly_Entrezgene)_ID`
de_proteins_list_entrez_ID_001[[i]] <- temp
}
names(de_proteins_list_entrez_ID_001) <- names(de_proteins_list_001)
de_prots_per_strain <- c()
for (i in 1:length(de_proteins_list_001)) {
temp <- de_proteins_list_001[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_001 <- data.frame(Strain.Name = names(de_proteins_list_001),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_001[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_001_bp <- list()
for (i in 2:length(de_proteins_list_entrez_ID_001)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_001[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "BP",
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_001_bp[[names(de_proteins_list_entrez_ID_001)[i]]] <- go_results
}
}
}
# Check how much correlation there is between strains having many DEPs and strains showing some GO enrichment results
has_go_results <- c()
number_of_go_terms <- c()
for (i in 1:nrow(de_prots_per_strain_001)) {
strain <- de_prots_per_strain_001$Strain.Name[i]
if (strain %in% names(go_results_list_001_bp)) {
has_go_results <- c(has_go_results, "Yes")
number_of_go_terms <- c(number_of_go_terms, nrow(go_results_list_001_bp[[strain]]))
}
else {
has_go_results <- c(has_go_results, "No")
number_of_go_terms <- c(number_of_go_terms, 0)
}
}
de_prots_per_strain_001$GO_results_bp <- has_go_results
de_prots_per_strain_001$num_of_go_terms_bp <- number_of_go_terms
View(go_results_list_001_bp)
strains_worse_or_equal_in_DTT <- phenotypic_data$gene_name[phenotypic_data$DTT <= 0 & phenotypic_data$DTT_GY <= 0]
go_list_better_dtt <- list()
go_list_worse_dtt <- list()
for (i in 1:length(go_results_list_001_bp)) {
strain_name <- names(go_results_list_001_bp)[i]
if (strain_name %in% strains_better_in_DTT) {
go_list_better_dtt[[strain_name]] <- go_results_list_001_bp[[i]]
}
else if (strain_name %in% strains_worse_or_equal_in_DTT) {
go_list_worse_dtt[[strain_name]] <- go_results_list_001_bp[[i]]
}
}
View(go_list_better_dtt)
gc()
