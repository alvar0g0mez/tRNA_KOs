trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
## Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
fit <- dpcDE(y.protein, mm)
# Limpa QC plots
#plotDPC(dpcfit)
#plotMDSUsingSEs(y.protein)
## Average expression of each protein across all samples - need to get this working for limpa!!
#hist(rowMeans(y.protein))
#hist(apply(y.protein, 1, var), breaks = 60)
#mean(apply(y.protein, 1, var))
#median(apply(y.protein, 1, var))
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
p.vals <- c()
logFCs <- c()
for (i in 1:nrow(df_wts)) {
wts <- as.numeric(df_wts[i,])
strain <- as.numeric(df_strain[i,])
p.vals <- c(p.vals, wilcox.test(wts, strain)$p.value)
logFCs <- c(logFCs, log2(mean(strain)/mean(wts)))
}
p.adjusted <- p.adjust(p.vals, method = "BH")
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"))
plot_df <- plot_df %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (2949/rank)*p.vals,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"))
# Get the manually corrected p-values
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Raw p-values")
# This is what they provide, I wonder if they use the kind of design matrix that Alexis used
# I did not, so I am going to introduce contrasts here? I hope that makes sense?
## Create all contrasts - need to susbtitute parentheses in strain names by dots so that it runs...
treatments <- colnames(fit$coefficients)
treatments <- sapply(treatments, function(x) str_replace(x, "\\(", "."))
treatments <- sapply(treatments, function(x) str_replace(x, "\\)", "."))
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-WT")
## Need to change parentheses to dots in the fit object as well so they match...
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\(", "."))
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\)", "."))
## Introduce the contrasts and run eBayes for them, 10 at a time
da <- list()
batch_size <- 10
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
new_contrast_names <- c()
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
new_name <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
if (grepl(".", new_name)) {
substr(new_name, 3, 3) <- "("
substr(new_name, 7, 7) <- ")"
}
da[[new_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
da[[new_name]]$Strain.Name <- rep(new_name, nrow(da[[new_name]]))
}
}
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(names(da))
plot_list <- list()
for (i in 1:length(strains)) {
strain <- strains[i]
temp <- da[[strain]]
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "tRNA_KOs/Output/Plots/p_value_histograms/pval_hists_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
temp <- na.omit(temp)
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[(temp$adj.P.Val < alpha) &
(temp$logFC > lfc_threshold | temp$logFC < -lfc_threshold)]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep="")
write_json(de_proteins_list, path=output_file)
write_json(da, path=paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/da_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), pretty = T)
# Format data
da <- bind_rows(da) %>%
dplyr::mutate(protein = rep(rownames(da[[1]]), times = length(da))) %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
temp <- sample_layout %>%
dplyr::distinct(Strain.Name, .keep_all = T)
da <- left_join(da, temp, by = "Strain.Name") %>%
dplyr::relocate(Strain.Name, .before = logFC) %>%
dplyr::relocate(protein, .after = Strain.Name) %>%
filter(Strain.Name != "WT")
da <- da %>%
dplyr::select(protein, Strain.Name, logFC, P.Value, adj.P.Val) %>%                              # From here on in this function it's added by me
dplyr::mutate(diffexpressed_adjusted = case_when((logFC > lfc_threshold) & (adj.P.Val < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (adj.P.Val < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"),
diffexpressed_non_adjusted = case_when((logFC > lfc_threshold) & (P.Value < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (P.Value < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"))
da <- da %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
# Now I have da as a dataframe, with the addition that it contains information on which proteins are up- or down-regulated
write_json(da, path=paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/da_df_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), pretty = T)
# Add a column to da with the number of replicates per KO - by me
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(Amino_acid_1_letter = str_sub(Strain.Name, 2, 2),
chromosome_letter = substr(Strain.Name, 8, 8),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))"),
up_down_regulated_ratio_adjusted = Up_regulated_adjusted/Down_regulated_adjusted,
up_down_regulated_ratio_non_adjusted = Up_regulated_non_adjusted/Down_regulated_non_adjusted) %>%
arrange(Amino_acid_1_letter) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Add all amino acid names
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/GtRNAdb/amino_acids.csv", sep="")))
responsiveness <- left_join(responsiveness, amino_acids, by = "Amino_acid_1_letter")
# Save responsiveness dataset
fwrite(responsiveness, paste(base_dir, "tRNA_KOs/Data/produced_during_analysis/responsiveness_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".csv", sep=""))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(amino_acids, DE, de_proteins_list, fit, fit2, KOs_replicates, mm, temp, trna_levels, contrast.matrix, design, fit3,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, unique_KOs, trna_ko, dpcfit)
# Calculate CV
proteomics <- as.data.frame(y.protein$E)
proteomics$protein <- rownames(proteomics)
proteomics_data_log2_long <- pivot_longer(proteomics, cols = !protein, names_to = "final_proteomics_colnames")
proteomics_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name)
proteomics_data_log2_long <- left_join(proteomics_data_log2_long, proteomics_layout, by = "final_proteomics_colnames") %>%
dplyr::mutate(value = case_when(value < 0 ~ 0,              # Make all negative values 0!!! To avoid issues with crazy CV values. Only 319 - values out of 2,353,302
TRUE ~ value)) %>%
group_by(Strain.Name, protein) %>%
dplyr::mutate(CV_strain = robust_cv(value)) %>%             # CV for each protein, across the samples of the same family (biological replicates), across all proteins
ungroup() %>%
group_by(protein) %>%
dplyr::mutate(CV_protein = robust_cv(value)) %>%            # CV for a protein, across all samples
ungroup()
# Prepare data for plots
plot_cv_per_protein <- proteomics_data_log2_long %>%                       # dataset for plotting CV per protein
dplyr::select(protein, CV_protein) %>%
dplyr::distinct(protein, .keep_all = T)
plot_cv_per_strain <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, CV_strain)
# Plot CV per protein across all samples
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
proteins_with_high_CV <- plot_cv_per_protein$protein[plot_cv_per_protein$CV_protein > 0.4]
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain") +
xlab("Strain") +
ylab("Coefficient of variation")
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated #samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics[, colnames(proteomics) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_no_repeated_columns <- proteomics[,!(colnames(proteomics) %in% repeated_samples)]
proteomics_no_repeated_columns <- cbind(proteomics_no_repeated_columns, out_temp)
# Create dataset for ploting
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name, Anticodon, Amino_acid_1_letter)
high_cv_proteins_proteomics <- proteomics_no_repeated_columns %>%
dplyr::filter(protein %in% proteins_with_high_CV) %>%
pivot_longer(cols = !protein, names_to = "final_proteomics_colnames") %>%
left_join(temp_layout, by = "final_proteomics_colnames") %>%
dplyr::mutate(Anticodon = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Anticodon),
Amino_acid_1_letter = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Amino_acid_1_letter))
# Plot
proteins <- unique(high_cv_proteins_proteomics$protein)
## Iterate over the proteins and make the same plots for all of them
for (i in 1:length(proteins)) {
protein_selected <- proteins[i]
# Plot abundance of the protein per amino acid carried
plot <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected), aes(x = Amino_acid_1_letter, y = value)) +
geom_boxplot(fill = "grey") +
theme_light() +
xlab("Amino acid") +
ylab("log2(protein abundance)") +
labs(title = glue("Abundance of {protein_selected} by amino acid carried by the KOd tRNA"))
print(plot)
myLetters <- letters[1:26]                            # Need this to be able to re-order anticodons by amino acid
myLetters <- c(myLetters, "wt")                       # Need to add this so it doesn't break down because "WT" is not a letter
# Plot abundance of the protein per anticodon (tRNA family)
plot_2 <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected),
aes(x = fct_reorder(Anticodon, match(tolower(Amino_acid_1_letter), myLetters)), y = value, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab("Anticodon") +
ylab("log2(protein abundance)") +
labs(title = glue("Abundance of {protein_selected} by anticodon in the KOd tRNA"),
fill = "Amino acid")
print(plot_2)
}
# Get the average CV per strain (across the proteins) and add that information to the responsiveness dataset
mean_cv_per_strain <- plot_cv_per_strain %>%
group_by(Strain.Name) %>%
summarise_at(vars(CV_strain), list(mean_cv_per_strain = mean))
responsiveness <- left_join(responsiveness, mean_cv_per_strain, by = "Strain.Name")
# Plot
ggplot(data = responsiveness, aes(x = mean_cv_per_strain, y = nDEP)) +
geom_point() +
theme_light() +
xlab("Average CV per strain") +
geom_text_repel(data = subset(responsiveness, mean_cv_per_strain > 0.08 | nDEP > 500), aes(x = mean_cv_per_strain, y = nDEP, label = Strain.Name))
# Let's also calculate the correlation, just to be sure
cor(responsiveness$mean_cv_per_strain, responsiveness$nDEP, use = "pairwise.complete.obs")
# Correlation comes out positive but probably driven by the couple strains with over 500 DE proteins - let's see what happens if I remove those
temp <- responsiveness %>%
filter(nDEP < 500)
cor(temp$mean_cv_per_strain, temp$nDEP, use = "pairwise.complete.obs")
# Still positive correlation after that, so yeah, I think it's safe to say that high within-strain variability is not driving the lack of nDEPs
# On this note, let's also get the MAD heatmap Julia suggested, see what I can find there - kind of a visual representation of how variable each protein is in each strain
proteomics_data_log2_long <- proteomics_data_log2_long %>%
group_by(Strain.Name, protein) %>%
dplyr::mutate(mad_per_strain_per_protein = mad(value)) %>%
ungroup()
mad(c(6.993423, 7.154754, 7.484509))
df_for_heatmap <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, mad_per_strain_per_protein) %>%
dplyr::distinct(protein, Strain.Name, mad_per_strain_per_protein)
df_for_heatmap <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, mad_per_strain_per_protein) %>%
dplyr::distinct(protein, Strain.Name, mad_per_strain_per_protein)
View(df_for_heatmap)
2949*197
2949*198
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_viridis_d(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_viridis_d(limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_viridis_d(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Strain.Name, protein, label = mad_per_strain_per_protein), size = 3) +
scale_fill_viridis_d(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
geom_text(aes(Strain.Name, protein, label = mad_per_strain_per_protein), size = 3) +
scale_fill_viridis_c(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
xlab("Strain") +
ylab("Protein")
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=mad_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="MAD per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
labs(title = "Heatmap of the MAD across the 3 replicates of a strain, for each protein") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
proteomics_data_log2_long <- proteomics_data_log2_long %>%
group_by(Strain.Name, protein) %>%
dplyr::mutate(CV_per_strain_per_protein = robust_cv(value)) %>%
ungroup()
df_for_heatmap <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, CV_per_strain_per_protein) %>%
dplyr::distinct(protein, Strain.Name, CV_per_strain_per_protein)
ggplot(data = df_for_heatmap, aes(x=Strain.Name, y=protein, fill=CV_per_strain_per_protein)) +
geom_tile() +
scale_fill_viridis_c(name="CV per protein\nper strain") +
xlab("Strain") +
ylab("Protein") +
labs(title = "Heatmap of the CV across the 3 replicates of a strain, for each protein") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain",
subtitle = "At protein level") +
xlab("Strain") +
ylab("Coefficient of variation")
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain",
subtitle = "At protein level - quantified from log2 precursor data") +
xlab("Strain") +
ylab("Coefficient of variation")
# Boxplots for the distribution of CVs of all proteins in each strain
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
geom_hline(yintercept = median(plot_cv_per_strain$CV_strain, na.rm = T), col = "orange") +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="grey"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
labs(title = "Boxplots for the CV within each strain",
subtitle = "At protein level - quantified from log2 precursor data") +
xlab("Strain") +
ylab("Coefficient of variation")
################################################################################
# Calculate robust CV (coefficient of variation)
################################################################################
robust_cv <- function(x, na.rm = TRUE) {
# Get rid of NAs in the input if specified
if (na.rm) x <- x[!is.na(x)]
# Return NA if there's only one value in the input
if (length(x) == 1) {
return(NA)
}
# Otherwise, calculate the CV and return it
else {
median_x <- median(x)
mad_x <- mad(x)
return(mad_x/median_x)
}
}
