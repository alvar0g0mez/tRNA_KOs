synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "ISM1"] <- "Ile"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSR1"] <- "Arg"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MST1"] <- "Thr"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSW1"] <- "Trp"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSM1"] <- "Met"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSK1"] <- "Lys"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSE1"] <- "Glu"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSY1"] <- "Tyr"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSD1"] <- "Asp"
synthetases$Amino_acid_3_letter[synthetases$Gene.symbol == "MSF1"] <- "Phe"
synthetases <- synthetases %>%
dplyr::select(-Gene.briefDescription)
# How many tRNA synthases
sum(grepl("trna synthase", synthetases$Gene.name, ignore.case = T))
# How many tRNA synthetases
sum(grepl("trna synthetase", synthetases$Gene.name, ignore.case = T))
# How many are mitochondrial?
sum(grepl("mitochondrial", synthetases$Gene.name, ignore.case = T))
# Get all the proteins we detect into systematic notation
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# See how many tRNA synthetases are in there: 18, 67% of them
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones: only 1 is mitochondrial, all others are cytosolic - so I think we are mainly interested in cytosolic, we detect 17 of the 18 there are, the one we don't detect is YPL040C
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Prepare
WTs <- trna_ko[, grepl("WT", colnames(trna_ko))]
rownames(WTs) <- match_systematic_and_standard_protein_names(as.character(rownames(WTs)),
yeastmine = yeastmine,
input = "standard",
simplify = T)
# Actually check and save it to a new column in the dataframe
measured_proteomics <- c()
for (i in 1:nrow(synthetases)) {
synth <- synthetases$Gene.secondaryIdentifier[i]
if (synth %in% rownames(WTs)) {
measured_proteomics <- c(measured_proteomics, mean(as.numeric(WTs[rownames(WTs) == synth,]), na.rm = T))
hist(as.numeric(WTs[rownames(WTs) == synth,]))
}
else {
measured_proteomics <- c(measured_proteomics, NA)
}
}
synthetases$measured_proteomics_WT <- measured_proteomics
# Add columns with all other amino acid information
temp <- fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")) %>%
dplyr::select(-molecular_weight_Da)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# One final thing - add information of which ones are included in the TS library, and which ones are included in the GFP/RFP data
if (working_from == "charite") {
ts_sample_layout <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/sample_layout.csv"))
} else {
ts_sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/sample_layout.csv"))
}
if (working_from == "charite") {
ts_fluorescence_raw_1 <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Boone_lab/Fluorescence/raw_1.csv"))
} else {
ts_fluorescence_raw_1 <- as.data.frame(fread("/home/alvaro/MyStuff/TSSc/Data/Boone_lab/Fluorescence/raw_1.csv"))
}
synthetases <- synthetases %>%
dplyr::mutate(in_ts_library = case_when(Gene.secondaryIdentifier %in% ts_sample_layout$Sys.Name ~ "Yes",
TRUE ~ "No"),
in_fluorescence_data = case_when(Gene.symbol %in% ts_fluorescence_raw_1$Gene ~ "Yes",
TRUE ~ "No"))
# Get a subset of this for a screenshot for a slide
temp <- synthetases %>%
dplyr::select(Gene.name, Gene.symbol, Gene.secondaryIdentifier, mitochondrial, Amino_acid_3_letter, in_ts_library, in_fluorescence_data)
# Save this dataset
fwrite(synthetases, paste(base_dir, "Data/trna_synthetases.csv", sep=""))
View(de_proteins_list)
de_synthetases <- list()
for (i in 1:length(de_proteins_list)) {
de_proteins <- de_proteins_list[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list)[i]]] <- temp
}
}
View(de_synthetases)
grab_de_synthetases_dfs <- function(da, de_synthetases, yeastmine) {
de_synthetases_dfs <- list()
for (i in 1:length(da)) {
strain_name <- names(da)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
temp <- da[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
dplyr::rename(Synthetase_systematic = Synthetase)
return(de_synthetases_df)
}
da <- read_json(path=paste(base_dir, "Data/Other/enrichment_analysis/da_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), simplifyVector = T)
de_synthetases_df <- grab_de_synthetases_dfs(da, de_synthetases, yeastmine)
View(de_synthetases)
View(da)
de_synthetases_dfs <- list()
for (i in 1:length(da)) {
strain_name <- names(da)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
temp <- da[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
strain_name
strains_with_de_synths
View(de_proteins_list)
gc()
knitr::opts_chunk$set(echo = TRUE)
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 0
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included) - THIS I AM NOT USING ANYMORE, AM I?
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs -
dataset <- "batchcorrected_onWTs"
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
x  <- "8fdscv.fwf"
grepl(".", x)
x
substr(x, 3, 3) <- "("
x <- substr(x, 3, 3) <- "("
x
x  <- "8fdscv.fwf"
substr(x, 3, 3) <- "("
x
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 0
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included) - THIS I AM NOT USING ANYMORE, AM I?
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs -
dataset <- "batchcorrected_onWTs"
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# Merge with master dataframe
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Remove annoying unnecessary (?) column (UniProt IDs)
if (dataset == "outlier_removed")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-sample) %>%
rename(genes = X) %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%                         # Remove rows for which "genes" column is empty or has "Genes" as value
column_to_rownames(var = 'genes')}                                                # Convert gene name column to rownames
if (dataset == "batchcorrected_onWTs")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-Protein.Group) %>%
dplyr::rename(genes = Genes) %>%
column_to_rownames(var = 'genes')}
# Come up with new colnames
new_names <- c()
current_names <- colnames(proteomics_raw)
new_names <- c(new_names, as.character(sample_layout$final_proteomics_colnames[match(current_names, sample_layout$raw_proteomics_colnames)]))
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[, colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
dplyr::select(!contains('QC'))                                 # Remove QCs columns
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Remove the sub-batch that went wrong
if (dataset == "outlier_removed") {
samples_in_wrong_batch <- sample_layout$final_proteomics_colnames[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
}
# Turn the rownames to all be systematic gene names rather than standard and systematic mixed
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
old_rownames <- rownames(trna_ko)
new_rownames <- match_systematic_and_standard_protein_names(data = old_rownames,
yeastmine = yeastmine,
input = "standard",
simplify = T)
rownames(trna_ko) <- new_rownames
# Save this last dataset for later usage elsewhere
#if (dataset == "outlier_removed") {
#  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_outlier_removed.tsv", sep=""), row.names = T)
#}
#if (dataset == "batchcorrected_onWTs") {
#  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep=""), row.names = T)
#}
fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep=""), row.names = T)
# Remove unnecessary objects
#rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, out, i, new_names, samples_in_wrong_batch, current_names, old_rownames, new_rownames, yeastmine)
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name.Dots[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Quality control
## Average expression of each protein across all samples
hist(rowMeans(trna_ko_log))
hist(apply(trna_ko_log, 1, var), breaks = 60)
mean(apply(trna_ko_log, 1, var))
median(apply(trna_ko_log, 1, var))
# Expression is pretty much normally distributed, we'll get rid of those proteins in the bottom end
# Variability across samples is extremely low though, so the vast majority of genes are detected pretty much the same across all samples - I'll get rid only of those with extremely low variances? Otherwise I could get rid of all of them below 0.15, which is going to be the majority, but if they were not going to be DE anyway...
## Remove lowly expressed proteins
keep <- rowMeans(trna_ko_log) > mean_log2_across_all_samples_threshold  # e.g., threshold = 5 for log2 CPMs
trna_ko_log_filtered <- trna_ko_log[keep, ]
## Remove proteins which are extremely non-variable across all samples
#keep_var <- apply(trna_ko_log_filtered, 1, var) > var_across_log2_all_samples_threshold
#trna_ko_log_filtered <- trna_ko_log_filtered[keep_var, ]
# Fit linear model
fit <- lmFit(trna_ko_log_filtered, mm)
# Contrasts and eBayes need to be done by batches, otherwise eBayes gets overwhelmed with so many comparisons and such few replicates
# Create all contrasts
treatments <- colnames(fit$coefficients)
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-WT")
# Introduce the contrasts and run eBayes for them, 10 at a time
da <- list()
batch_size <- 3
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_list, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
da[[contrast_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
new_names <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
for (j in 1:length(new_names)) {
name <- new_names[j]
if (grepl(".", name)) {
substr(name, 3, 3) <- "("
substr(name, 7, 7) <- ")"
new_names[i] <- name
}
}
da[[contrast_name]]$Strain.Name <- new_names
}
}
