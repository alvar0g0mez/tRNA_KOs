Nt_at_53_1 = Nt_at_53,
Nt_at_54_1 = Nt_at_54,
Nt_at_55_1 = Nt_at_55,
Nt_at_56_1 = Nt_at_56,
Nt_at_57_1 = Nt_at_57,
Nt_at_58_1 = Nt_at_58,
Nt_at_59_1 = Nt_at_59,
Nt_at_60_1 = Nt_at_60,
Nt_at_61_1 = Nt_at_61,
Nt_at_62_1 = Nt_at_62,
Nt_at_63_1 = Nt_at_63,
Nt_at_64_1 = Nt_at_64,
Nt_at_65_1 = Nt_at_65,
Nt_at_66_1 = Nt_at_66,
Nt_at_67_1 = Nt_at_67,
Nt_at_68_1 = Nt_at_68,
Nt_at_69_1 = Nt_at_69,
Nt_at_70_1 = Nt_at_70,
Strain.Name = strains_2)
# Match to strain_2
temp <- responsiveness %>%
dplyr::select(Strain.Name, anticodon, Amino_acid_1_letter, chromosome_letter, amino_acid_type, amino_acid_charge)
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
dplyr::rename(anticodon_2 = anticodon,
Amino_acid_2 = Amino_acid_1_letter,
aa_type_2 = amino_acid_type,
aa_charge_2 = amino_acid_charge,
chr_2 = chromosome_letter)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
dplyr::rename(strains_2 = Strain.Name,
Nt_at_1_2 = Nt_at_1,
Nt_at_2_2 = Nt_at_2,
Nt_at_3_2 = Nt_at_3,
Nt_at_4_2 = Nt_at_4,
Nt_at_5_2 = Nt_at_5,
Nt_at_6_2 = Nt_at_6,
Nt_at_7_2 = Nt_at_7,
Nt_at_8_2 = Nt_at_8,
Nt_at_9_2 = Nt_at_9,
Nt_at_10_2 = Nt_at_10,
Nt_at_11_2 = Nt_at_11,
Nt_at_12_2 = Nt_at_12,
Nt_at_13_2 = Nt_at_13,
Nt_at_14_2 = Nt_at_14,
Nt_at_15_2 = Nt_at_15,
Nt_at_16_2 = Nt_at_16,
Nt_at_17_2 = Nt_at_17,
Nt_at_18_2 = Nt_at_18,
Nt_at_19_2 = Nt_at_19,
Nt_at_20_2 = Nt_at_20,
Nt_at_21_2 = Nt_at_21,
Nt_at_22_2 = Nt_at_22,
Nt_at_23_2 = Nt_at_23,
Nt_at_24_2 = Nt_at_24,
Nt_at_25_2 = Nt_at_25,
Nt_at_26_2 = Nt_at_26,
Nt_at_27_2 = Nt_at_27,
Nt_at_28_2 = Nt_at_28,
Nt_at_29_2 = Nt_at_29,
Nt_at_30_2 = Nt_at_30,
Nt_at_31_2 = Nt_at_31,
Nt_at_32_2 = Nt_at_32,
Nt_at_33_2 = Nt_at_33,
Nt_at_34_2 = Nt_at_34,
Nt_at_35_2 = Nt_at_35,
Nt_at_36_2 = Nt_at_36,
Nt_at_37_2 = Nt_at_37,
Nt_at_38_2 = Nt_at_38,
Nt_at_39_2 = Nt_at_39,
Nt_at_40_2 = Nt_at_40,
Nt_at_41_2 = Nt_at_41,
Nt_at_42_2 = Nt_at_42,
Nt_at_43_2 = Nt_at_43,
Nt_at_44_2 = Nt_at_44,
Nt_at_45_2 = Nt_at_45,
Nt_at_46_2 = Nt_at_46,
Nt_at_47_2 = Nt_at_47,
Nt_at_48_2 = Nt_at_48,
Nt_at_49_2 = Nt_at_49,
Nt_at_50_2 = Nt_at_50,
Nt_at_51_2 = Nt_at_51,
Nt_at_52_2 = Nt_at_52,
Nt_at_53_2 = Nt_at_53,
Nt_at_54_2 = Nt_at_54,
Nt_at_55_2 = Nt_at_55,
Nt_at_56_2 = Nt_at_56,
Nt_at_57_2 = Nt_at_57,
Nt_at_58_2 = Nt_at_58,
Nt_at_59_2 = Nt_at_59,
Nt_at_60_2 = Nt_at_60,
Nt_at_61_2 = Nt_at_61,
Nt_at_62_2 = Nt_at_62,
Nt_at_63_2 = Nt_at_63,
Nt_at_64_2 = Nt_at_64,
Nt_at_65_2 = Nt_at_65,
Nt_at_66_2 = Nt_at_66,
Nt_at_67_2 = Nt_at_67,
Nt_at_68_2 = Nt_at_68,
Nt_at_69_2 = Nt_at_69,
Nt_at_70_2 = Nt_at_70)
# Come up with columns that require matching between these 2 sets of them
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(same_family = anticodon_1 == anticodon_2,
same_amino_acid = Amino_acid_1 == Amino_acid_2,
same_chromosome = chr_1 == chr_2,
same_family_and_chr = same_family&same_chromosome,
same_amino_acid_and_chr = same_amino_acid&same_chromosome,
same_aa_type = aa_type_1 == aa_type_2,
same_aa_charge = aa_charge_1 == aa_charge_2,
Nt_at_1 = Nt_at_1_1 == Nt_at_1_2,
Nt_at_2 = Nt_at_2_1 == Nt_at_2_2,
Nt_at_3 = Nt_at_3_1 == Nt_at_3_2,
Nt_at_4 = Nt_at_4_1 == Nt_at_4_2,
Nt_at_5 = Nt_at_5_1 == Nt_at_5_2,
Nt_at_6 = Nt_at_6_1 == Nt_at_6_2,
Nt_at_7 = Nt_at_7_1 == Nt_at_7_2,
Nt_at_8 = Nt_at_8_1 == Nt_at_8_2,
Nt_at_9 = Nt_at_9_1 == Nt_at_9_2,
Nt_at_10 = Nt_at_10_1 == Nt_at_10_2,
Nt_at_11 = Nt_at_11_1 == Nt_at_11_2,
Nt_at_12 = Nt_at_12_1 == Nt_at_12_2,
Nt_at_13 = Nt_at_13_1 == Nt_at_13_2,
Nt_at_14 = Nt_at_14_1 == Nt_at_14_2,
Nt_at_15 = Nt_at_15_1 == Nt_at_15_2,
Nt_at_16 = Nt_at_16_1 == Nt_at_16_2,
Nt_at_17 = Nt_at_17_1 == Nt_at_17_2,
Nt_at_18 = Nt_at_18_1 == Nt_at_18_2,
Nt_at_19 = Nt_at_19_1 == Nt_at_19_2,
Nt_at_20 = Nt_at_20_1 == Nt_at_30_2,
Nt_at_21 = Nt_at_21_1 == Nt_at_21_2,
Nt_at_22 = Nt_at_22_1 == Nt_at_22_2,
Nt_at_23 = Nt_at_23_1 == Nt_at_23_2,
Nt_at_24 = Nt_at_24_1 == Nt_at_24_2,
Nt_at_25 = Nt_at_25_1 == Nt_at_25_2,
Nt_at_26 = Nt_at_26_1 == Nt_at_26_2,
Nt_at_27 = Nt_at_27_1 == Nt_at_27_2,
Nt_at_28 = Nt_at_28_1 == Nt_at_28_2,
Nt_at_29 = Nt_at_29_1 == Nt_at_29_2,
Nt_at_30 = Nt_at_30_1 == Nt_at_30_2,
Nt_at_31 = Nt_at_31_1 == Nt_at_31_2,
Nt_at_32 = Nt_at_32_1 == Nt_at_32_2,
Nt_at_33 = Nt_at_33_1 == Nt_at_33_2,
Nt_at_34 = Nt_at_34_1 == Nt_at_34_2,
Nt_at_35 = Nt_at_35_1 == Nt_at_35_2,
Nt_at_36 = Nt_at_36_1 == Nt_at_36_2,
Nt_at_37 = Nt_at_37_1 == Nt_at_37_2,
Nt_at_38 = Nt_at_38_1 == Nt_at_38_2,
Nt_at_39 = Nt_at_39_1 == Nt_at_39_2,
Nt_at_40 = Nt_at_40_1 == Nt_at_40_2,
Nt_at_41 = Nt_at_41_1 == Nt_at_41_2,
Nt_at_42 = Nt_at_42_1 == Nt_at_42_2,
Nt_at_43 = Nt_at_43_1 == Nt_at_43_2,
Nt_at_44 = Nt_at_44_1 == Nt_at_44_2,
Nt_at_45 = Nt_at_45_1 == Nt_at_45_2,
Nt_at_46 = Nt_at_46_1 == Nt_at_46_2,
Nt_at_47 = Nt_at_47_1 == Nt_at_47_2,
Nt_at_48 = Nt_at_48_1 == Nt_at_48_2,
Nt_at_49 = Nt_at_49_1 == Nt_at_49_2,
Nt_at_50 = Nt_at_50_1 == Nt_at_50_2,
Nt_at_51 = Nt_at_51_1 == Nt_at_51_2,
Nt_at_52 = Nt_at_52_1 == Nt_at_52_2,
Nt_at_53 = Nt_at_53_1 == Nt_at_53_2,
Nt_at_54 = Nt_at_54_1 == Nt_at_54_2,
Nt_at_55 = Nt_at_55_1 == Nt_at_55_2,
Nt_at_56 = Nt_at_56_1 == Nt_at_56_2,
Nt_at_57 = Nt_at_57_1 == Nt_at_57_2,
Nt_at_58 = Nt_at_58_1 == Nt_at_58_2,
Nt_at_59 = Nt_at_59_1 == Nt_at_59_2,
Nt_at_60 = Nt_at_60_1 == Nt_at_60_2,
Nt_at_61 = Nt_at_61_1 == Nt_at_61_2,
Nt_at_62 = Nt_at_62_1 == Nt_at_62_2,
Nt_at_63 = Nt_at_63_1 == Nt_at_63_2,
Nt_at_64 = Nt_at_64_1 == Nt_at_64_2,
Nt_at_65 = Nt_at_65_1 == Nt_at_65_2,
Nt_at_66 = Nt_at_66_1 == Nt_at_66_2,
Nt_at_67 = Nt_at_67_1 == Nt_at_67_2,
Nt_at_68 = Nt_at_68_1 == Nt_at_68_2,
Nt_at_69 = Nt_at_69_1 == Nt_at_69_2,
Nt_at_70 = Nt_at_70_1 == Nt_at_70_2) %>%
dplyr::select(-c(Nt_at_1_1, Nt_at_1_2, Nt_at_2_1, Nt_at_2_2, Nt_at_3_1, Nt_at_3_2, Nt_at_4_1, Nt_at_4_2, Nt_at_5_1, Nt_at_5_2, Nt_at_6_1, Nt_at_6_2, Nt_at_7_1, Nt_at_7_2, Nt_at_8_1, Nt_at_8_2, Nt_at_9_1, Nt_at_9_2, Nt_at_10_1, Nt_at_10_2, Nt_at_11_1, Nt_at_11_2, Nt_at_12_1, Nt_at_12_2, Nt_at_13_1, Nt_at_13_2, Nt_at_14_1, Nt_at_14_2, Nt_at_15_1, Nt_at_15_2, Nt_at_16_1, Nt_at_16_2, Nt_at_17_1, Nt_at_17_2, Nt_at_18_1, Nt_at_18_2, Nt_at_19_1, Nt_at_19_2, Nt_at_20_1, Nt_at_20_2, Nt_at_21_1, Nt_at_21_2, Nt_at_22_1, Nt_at_22_2, Nt_at_23_1, Nt_at_23_2, Nt_at_24_1, Nt_at_24_2, Nt_at_25_1, Nt_at_25_2, Nt_at_26_1, Nt_at_26_2, Nt_at_27_1, Nt_at_27_2, Nt_at_28_1, Nt_at_28_2, Nt_at_29_1, Nt_at_29_2, Nt_at_30_1, Nt_at_30_2, Nt_at_31_1, Nt_at_31_2, Nt_at_32_1, Nt_at_32_2, Nt_at_33_1, Nt_at_33_2, Nt_at_34_1, Nt_at_34_2, Nt_at_35_1, Nt_at_35_2, Nt_at_36_1, Nt_at_36_2, Nt_at_37_1, Nt_at_37_2, Nt_at_38_1, Nt_at_38_2, Nt_at_39_1, Nt_at_39_2, Nt_at_40_1, Nt_at_40_2, Nt_at_41_1, Nt_at_41_2, Nt_at_42_1, Nt_at_42_2, Nt_at_43_1, Nt_at_43_2, Nt_at_44_1, Nt_at_44_2, Nt_at_45_1, Nt_at_45_2, Nt_at_46_1, Nt_at_46_2, Nt_at_47_1, Nt_at_47_2, Nt_at_48_1, Nt_at_48_2, Nt_at_49_1, Nt_at_49_2, Nt_at_50_1, Nt_at_50_2, Nt_at_51_1, Nt_at_51_2, Nt_at_52_1, Nt_at_52_2, Nt_at_53_1, Nt_at_53_2, Nt_at_54_1, Nt_at_54_2, Nt_at_55_1, Nt_at_55_2, Nt_at_56_1, Nt_at_56_2, Nt_at_57_1, Nt_at_57_2, Nt_at_58_1, Nt_at_58_2, Nt_at_59_1, Nt_at_59_2, Nt_at_60_1, Nt_at_60_2, Nt_at_61_1, Nt_at_61_2, Nt_at_62_1, Nt_at_62_2, Nt_at_63_1, Nt_at_63_2, Nt_at_64_1, Nt_at_64_2, Nt_at_65_1, Nt_at_65_2, Nt_at_66_1, Nt_at_66_2, Nt_at_67_1, Nt_at_67_2, Nt_at_68_1, Nt_at_68_2, Nt_at_69_1, Nt_at_69_2, Nt_at_70_1, Nt_at_70_2))
# Get columns based on strain_1 and strain_2, but which reorganize this: the one with more DEPs to one column, the one with less DEPs to the other
# Just so that I can check the overlap_size/amount of DEPs in the KO strain with less out of the pair. Not sure if too important but oh well
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(Strain_more_DEPs = max(protein_number_1, protein_number_2),
Strain_less_DEPs = min(protein_number_1, protein_number_2),
Ratio_more_to_less_DEPs = Strain_more_DEPs/Strain_less_DEPs)
# Add columns where I combine the strings for the anticodons and amino acids for the 2 strains (always using sort() before so that they are unique)
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(both_anticodons = paste(sort(c(anticodon_1, anticodon_2)), collapse = "-"),
both_amino_acids = paste(sort(c(Amino_acid_1, Amino_acid_2)), collapse = "-"),
both_aa_types = paste(sort(c(aa_type_1, aa_type_2)), collapse = "-"),
both_aa_charges = paste(sort(c(aa_charge_1, aa_charge_2)), collapse = "-"))
# Put columns with protein names as the last ones
DE_protein_overlaps <- DE_protein_overlaps %>%
relocate(protein_names_1, .after = last_col()) %>%
relocate(protein_names_2, .after = last_col()) %>%
relocate(overlap, .after = last_col())
if (alpha == 0.01) {
fwrite(DE_protein_overlaps, paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep=""))
}
if (alpha == 0.05) {
fwrite(DE_protein_overlaps, paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep=""))
}
# I identified families where there are at least 2 KOs with a decently large number of nDEPs by looking at the histograms I made earlier - maybe I could think of doing this by the column where I define them as "minor" or "major" instead?
families_of_interest <- c("CUU", "UUG", "CCA", "AGA", "CAU", "AGC")
# Load protein overlaps dataset created in previous section, with all possible intersections
if (alpha == 0.01) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep="")))
}
if (alpha == 0.05) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep="")))
}
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep = "")))
# This is what happens if I filter based on major - minor (defined by me)
DE_protein_overlaps_major_within_family <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2,
Gene_type_1 == "Major" & Gene_type_2 == "Major")
# Get a version of this which I can screenshot for a slide
temp <- DE_protein_overlaps_major_within_family %>%
dplyr::select(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, Jaccard_index)
# Grab the strains in here and put them into a vector so I can filter the EA results by them
paired_major_strains <- c(as.character(DE_protein_overlaps_major_within_family$strains_1),as.character(DE_protein_overlaps_major_within_family$strains_2))
View(temp)
knitr::opts_chunk$set(echo = TRUE)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(data.table)
library(dplyr)
library(fgsea)
library(ggplot2)
library(jsonlite)
library(stringr)
library(forcats)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01 - remove emtpy vectors
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
de_proteins_list_001 <- Filter(function(x) length(x) > 0, de_proteins_list_001)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05 - remove emtpy vectors
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
de_proteins_list_005 <- Filter(function(x) length(x) > 0, de_proteins_list_005)
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
de_proteins_list_entrez_ID_001 <- list()
for (i in 1:length(de_proteins_list_001)) {
temp <- data.frame("Protein_stable_ID" = de_proteins_list_001[[i]])
temp <- left_join(temp, entrez_db, by = "Protein_stable_ID")
temp <- temp$`NCBI_gene_(formerly_Entrezgene)_ID`
de_proteins_list_entrez_ID_001[[i]] <- temp
}
names(de_proteins_list_entrez_ID_001) <- names(de_proteins_list_001)
de_prots_per_strain <- c()
for (i in 1:length(de_proteins_list_001)) {
temp <- de_proteins_list_001[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_001 <- data.frame(Strain.Name = names(de_proteins_list_001),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_001[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_001 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_001)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_001[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_001[[names(de_proteins_list_entrez_ID_001)[i]]] <- go_results
}
}
}
# Check how much correlation there is between strains having many DEPs and strains showing some GO enrichment results
has_go_results <- c()
number_of_go_terms <- c()
for (i in 1:nrow(de_prots_per_strain_001)) {
strain <- de_prots_per_strain_001$Strain.Name[i]
if (strain %in% names(go_results_list_001)) {
has_go_results <- c(has_go_results, "Yes")
number_of_go_terms <- c(number_of_go_terms, nrow(go_results_list_001[[strain]]))
}
else {
has_go_results <- c(has_go_results, "No")
number_of_go_terms <- c(number_of_go_terms, 0)
}
}
de_prots_per_strain_001$GO_results_bp <- has_go_results
de_prots_per_strain_001$num_of_go_terms_bp <- number_of_go_terms
de_prots_per_strain_001 <- left_join(de_prots_per_strain_001, master_dataset, by = "Strain.Name")
write_json(go_results_list_001, path = paste(base_dir, "Data/Other/enrichment_analysis/go_results_list_001.json", sep=""), pretty = T)
# Load EA results
go_results_list_001 <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_results_list_001.json", sep=""), simplifyVector = T)
go_results_list_005 <- read_json(path = paste(base_dir, "Data/Other/enrichment_analysis/go_results_list_005.json", sep=""), simplifyVector = T)
# Keep only those we are interested in
go_results_list_001_filtered <- go_results_list_001[names(go_results_list_001) %in% paired_major_strains]
go_results_list_005_filtered <- go_results_list_005[names(go_results_list_005) %in% paired_major_strains]
View(go_results_list_005_filtered)
View(temp_2)
# Get a version of this which I can screenshot for a slide
temp <- DE_protein_overlaps_major_within_family %>%
dplyr::select(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, Jaccard_index)
View(temp)
temp <- temp %>%
(!(grepl("AGC", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("AGC", temp$strains_1)))
gca_b
gca_b <- go_results_list_005_filtered[["tC(GCA)B"]]$Description
gca_p2 <- go_results_list_005_filtered[["tC(GCA)P2"]]$Description
gca_b
gca_p2
gca_b
gca_p2
go_results_list_005_filtered[["tC(GCA)P2"]][["ONTOLOGY"]]
temp <- temp %>%
filter(!(grepl("GCA", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("GUC", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("GAA", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("CAA", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("CAU", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("UUG", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("ACG", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("AAC", temp$strains_1)))
temp <- temp %>%
filter(!(grepl("CCA", temp$strains_1)))
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01 - remove emtpy vectors
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
de_proteins_list_001 <- Filter(function(x) length(x) > 0, de_proteins_list_001)
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) %in% paired_major_strains]
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05 - remove emtpy vectors
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
de_proteins_list_005 <- Filter(function(x) length(x) > 0, de_proteins_list_005)
de_proteins_list_005 <- de_proteins_list_005[names(de_proteins_list_005) %in% paired_major_strains]
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
de_proteins_list_entrez_ID_005 <- list()
for (i in 1:length(de_proteins_list_005)) {
temp <- data.frame("Protein_stable_ID" = de_proteins_list_005[[i]])
temp <- left_join(temp, entrez_db, by = "Protein_stable_ID")
temp <- temp$`NCBI_gene_(formerly_Entrezgene)_ID`
de_proteins_list_entrez_ID_005[[i]] <- temp
}
names(de_proteins_list_entrez_ID_005) <- names(de_proteins_list_005)
de_prots_per_strain <- c()
for (i in 1:length(de_proteins_list_005)) {
temp <- de_proteins_list_005[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_005 <- data.frame(Strain.Name = names(de_proteins_list_005),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
View(de_proteins_list_entrez_ID_005)
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_005[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_005 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_005)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_005[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_005[[names(de_proteins_list_entrez_ID_005)[i]]] <- go_results
}
}
}
de_prots_per_strain_005 <- left_join(de_prots_per_strain_005, master_dataset, by = "Strain.Name")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_005[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_005 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_005)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_005[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
pvalueCutoff = 0.1,
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_005[[names(de_proteins_list_entrez_ID_005)[i]]] <- go_results
}
}
}
View(de_proteins_list_entrez_ID_005)
View(de_proteins_list_entrez_ID_005)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01 - remove emtpy vectors
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
de_proteins_list_001 <- Filter(function(x) length(x) > 0, de_proteins_list_001)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05 - remove emtpy vectors
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
de_proteins_list_005 <- Filter(function(x) length(x) > 0, de_proteins_list_005)
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
de_proteins_list_entrez_ID_005 <- list()
for (i in 1:length(de_proteins_list_005)) {
temp <- data.frame("Protein_stable_ID" = de_proteins_list_005[[i]])
temp <- left_join(temp, entrez_db, by = "Protein_stable_ID")
temp <- temp$`NCBI_gene_(formerly_Entrezgene)_ID`
de_proteins_list_entrez_ID_005[[i]] <- temp
}
names(de_proteins_list_entrez_ID_005) <- names(de_proteins_list_005)
de_prots_per_strain <- c()
for (i in 1:length(de_proteins_list_005)) {
temp <- de_proteins_list_005[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_005 <- data.frame(Strain.Name = names(de_proteins_list_005),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_005[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
de_proteins_list_entrez_ID_005 <- de_proteins_list_entrez_ID_005[names(de_proteins_list_entrez_ID_005) %in% paired_major_strains]
go_results_list_005 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_005)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_005[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
pvalueCutoff = 0.1,
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_005[[names(de_proteins_list_entrez_ID_005)[i]]] <- go_results
}
}
}
View(go_results_list_005)
go_results_list_005[["tC(GCA)P2"]][["Description"]]
go_results_list_005[["tC(GCA)P2"]][["ONTOLOGY"]]
go_results_list_005[["tA(AGC)M2"]][["Description"]]
go_results_list_005[["tA(AGC)M1"]][["Description"]]
go_results_list_005[["tA(AGC)M1"]][["ONTOLOGY"]]
go_results_list_005[["tF(GAA)H2"]][["Description"]]
go_results_list_005[["tF(GAA)P2"]][["Description"]]
go_results_list_005[["tF(GAA)P2"]][["ONTOLOGY"]]
go_results_list_005 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_005)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_005[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
pvalueCutoff = 0.1,
minGSSize = 3,
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_005[[names(de_proteins_list_entrez_ID_005)[i]]] <- go_results
}
}
}
View(go_results_list_005)
go_results_list_005[["tC(GCA)B"]][["Description"]]
go_results_list_005[["tC(GCA)P2"]][["Description"]]
go_results_list_005[["tD(GUC)J4"]][["Description"]]
go_results_list_005[["tD(GUC)J4"]][["ONTOLOGY"]]
go_results_list_005[["tY(GUA)J2"]][["Description"]]
go_results_list_005[["tY(GUA)M2"]][["Description"]]
