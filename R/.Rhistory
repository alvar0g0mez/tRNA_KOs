p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
p.adjusted.manually = (rank/2949)*0.05,
significant_manually = case_when(p.vals < p.adjusted.manually ~ "Yes",
TRUE ~ "No"))
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (rank/2949)*0.05,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"),
p.adjusted.manually = min(1, min(plot_df$BH_threshold[plot_df$rank >= rank])))
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= rank])))
}
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
p.vals <- c()
logFCs <- c()
for (i in 1:nrow(df_wts)) {
wts <- as.numeric(df_wts[i,])
strain <- as.numeric(df_strain[i,])
p.vals <- c(p.vals, wilcox.test(wts, strain)$p.value)
logFCs <- c(logFCs, log2(mean(strain)/mean(wts)))
}
p.adjusted <- p.adjust(p.vals, method = "BH")
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (2949/rank)*0.05,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"))
# Get the manually corrected p-values
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Raw p-values")
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
p.vals <- c()
logFCs <- c()
for (i in 1:nrow(df_wts)) {
wts <- as.numeric(df_wts[i,])
strain <- as.numeric(df_strain[i,])
p.vals <- c(p.vals, wilcox.test(wts, strain)$p.value)
logFCs <- c(logFCs, log2(mean(strain)/mean(wts)))
}
p.adjusted <- p.adjust(p.vals, method = "BH")
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (2949/rank)*p.vals,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"))
# Get the manually corrected p-values
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Raw p-values")
View(da)
strains <- unique(sample_layout$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
View(plot_list)
i = 1
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(sample_layout$Strain.Name)
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(da$Strain.Name)
plot_list <- list()
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
View(plot_list)
ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
i = 1
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
View(plot_list)
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
p <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
print(p)
}
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in 1:length(strains)) {
strain <- strains[i]
temp <- da %>%
dplyr::filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "tRNA_KOs/Output/Plots/p_value_histograms/pval_hists_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
View(sample_layout)
# Turn all dashes to underscores
sample_layout <- sample_layout %>%
dplyr::mutate(Sample.ID = str_replace_all(Sample.ID, "-", "_"),
Sample.ID.unique = str_replace_all(Sample.ID.unique, "-", "_"))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
dplyr::mutate(Position.Within.Plate.384 = case_when(nchar(as.character(Analysis.Column.384)) == 2 ~ paste(Analysis.Row.384, Analysis.Column.384, sep=""),
nchar(as.character(Analysis.Column.384)) == 1 ~ paste(Analysis.Row.384, 0, Analysis.Column.384, sep="")),
Position.Within.Plate.96 = case_when(nchar(as.character(Analysis.Column.96)) == 2 ~ paste(Analysis.Row.96, Analysis.Column.96, sep=""),
nchar(as.character(Analysis.Column.96)) == 1 ~ paste(Analysis.Row.96, 0, Analysis.Column.96, sep="")))
# Create a column that can match the colnames of the proteomics data as I get it from Boris
sample_layout <- sample_layout %>%
dplyr::mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
sample_layout <- sample_layout %>%
dplyr::mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
# Here I also deal with the  strains that are present twice! Label their replicates from 1 to 6 instead of 1 to 3 twice, which made it a bit hard to work with them
sample_layout <- sample_layout %>%
dplyr::mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
Strain.Name == "tV(AAC)J" & Strain.ID == 85 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tV(AAC)J" & Strain.ID == 87 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 96 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 97 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# Turn all dashes to underscores
sample_layout <- sample_layout %>%
dplyr::mutate(Sample.ID = str_replace_all(Sample.ID, "-", "_"),
Sample.ID.unique = str_replace_all(Sample.ID.unique, "-", "_"))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
dplyr::mutate(Position.Within.Plate.384 = case_when(nchar(as.character(Analysis.Column.384)) == 2 ~ paste(Analysis.Row.384, Analysis.Column.384, sep=""),
nchar(as.character(Analysis.Column.384)) == 1 ~ paste(Analysis.Row.384, 0, Analysis.Column.384, sep="")),
Position.Within.Plate.96 = case_when(nchar(as.character(Analysis.Column.96)) == 2 ~ paste(Analysis.Row.96, Analysis.Column.96, sep=""),
nchar(as.character(Analysis.Column.96)) == 1 ~ paste(Analysis.Row.96, 0, Analysis.Column.96, sep="")))
# Create a column that can match the colnames of the proteomics data as I get it from Boris
sample_layout <- sample_layout %>%
dplyr::mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
# Here I also deal with the  strains that are present twice! Label their replicates from 1 to 6 instead of 1 to 3 twice, which made it a bit hard to work with them
sample_layout <- sample_layout %>%
dplyr::mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
Strain.Name == "tV(AAC)J" & Strain.ID == 85 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tV(AAC)J" & Strain.ID == 87 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 96 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 97 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Add some columns - I used to do this in my main analysis file
## Fix the QC rows to say "QC" instead of "NA" in the columns that don't apply
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
## Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
dplyr::mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
dplyr::mutate(Injection_Order = str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
## Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
## Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
## Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
dplyr::mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Add a column with Strain.Name but using "." instead of "_", for makeContrasts()
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Name.Dots.Delete = str_replace_all(Strain.Name, "\\(", "."),
Strain.Name.Dots = str_replace_all(Strain.Name.Dots.Delete, "\\)", ".")) %>%
dplyr::select(-Strain.Name.Dots.Delete)
# Merge with master dataframe - I used to do this in the main tRNA script
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Save final version
if (working_from == "home") {
fwrite(sample_layout, "/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv")
} else {
fwrite(sample_layout, "S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv")
}
# Packages
library(dplyr)
library(data.table)
library(stringr)
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# Turn all dashes to underscores
sample_layout <- sample_layout %>%
dplyr::mutate(Sample.ID = str_replace_all(Sample.ID, "-", "_"),
Sample.ID.unique = str_replace_all(Sample.ID.unique, "-", "_"))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
dplyr::mutate(Position.Within.Plate.384 = case_when(nchar(as.character(Analysis.Column.384)) == 2 ~ paste(Analysis.Row.384, Analysis.Column.384, sep=""),
nchar(as.character(Analysis.Column.384)) == 1 ~ paste(Analysis.Row.384, 0, Analysis.Column.384, sep="")),
Position.Within.Plate.96 = case_when(nchar(as.character(Analysis.Column.96)) == 2 ~ paste(Analysis.Row.96, Analysis.Column.96, sep=""),
nchar(as.character(Analysis.Column.96)) == 1 ~ paste(Analysis.Row.96, 0, Analysis.Column.96, sep="")))
# Create a column that can match the colnames of the proteomics data as I get it from Boris
sample_layout <- sample_layout %>%
dplyr::mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
# Here I also deal with the  strains that are present twice! Label their replicates from 1 to 6 instead of 1 to 3 twice, which made it a bit hard to work with them
sample_layout <- sample_layout %>%
dplyr::mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
Strain.Name == "tV(AAC)J" & Strain.ID == 85 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tV(AAC)J" & Strain.ID == 87 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 96 ~ paste(Strain.Name, "_0", Replicate, sep=""),
Strain.Name == "tA(AGC)K1" & Strain.ID == 97 ~ paste(Strain.Name, "_0", Replicate+3, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Add some columns - I used to do this in my main analysis file
## Fix the QC rows to say "QC" instead of "NA" in the columns that don't apply
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
## Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
dplyr::mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
dplyr::mutate(Injection_Order = str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
## Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
## Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
dplyr::mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
## Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
dplyr::mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Add a column with Strain.Name but using "." instead of "_", for makeContrasts()
sample_layout <- sample_layout %>%
dplyr::mutate(Strain.Name.Dots.Delete = str_replace_all(Strain.Name, "\\(", "."),
Strain.Name.Dots = str_replace_all(Strain.Name.Dots.Delete, "\\)", ".")) %>%
dplyr::select(-Strain.Name.Dots.Delete)
# Merge with master dataframe - I used to do this in the main tRNA script
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Save final version
if (working_from == "home") {
fwrite(sample_layout, "/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv")
} else {
fwrite(sample_layout, "S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv")
}
