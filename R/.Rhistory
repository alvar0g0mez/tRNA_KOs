KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= log2(lfc_threshold) & adj.P.Val <= alpha, na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(Amino_acid_1_letter = str_sub(Strain.Name, 2, 2),
chromosome_letter = substr(Strain.Name, 8, 8),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))")) %>%
arrange(Amino_acid_1_letter) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Save responsiveness dataset
fwrite(responsiveness, paste(base_dir, "Data/responsiveness.csv", sep=""))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(DE, de_proteins_list_001, de_proteins_list_005, fit, fit2, KOs_replicates, mm, temp, trna_ko_log,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, trna_levels, unique_KOs, trna_ko)
# One plot per KO and save them to a PDF - for all KOs
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(levels(as.factor(da$Strain.Name)))) {
trna <- levels(as.factor(da$Strain.Name))[i]
temp <- da %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(0.01), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = trna) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Volcano_plots/volcano_plots_per_KO_all_KOs_together.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# One plot per KO and save them to a PDF - only for KOs with at least 1 DE protein
## Remove KOs with 0 DE proteins
KOs_with_DE_proteins <- responsiveness$Strain.Name[responsiveness$nDEP > 0]
da_only_KOs_with_DE_proteins <- da[da$Strain.Name %in% KOs_with_DE_proteins,]
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(KOs_with_DE_proteins)) {
trna <- KOs_with_DE_proteins[i]
temp <- da_only_KOs_with_DE_proteins %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-lfc_threshold, lfc_threshold), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = trna) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Volcano_plots/volcano_plots_per_KO_KOs_with_DE_proteins_together.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_with_DE_proteins", "temp", "da_only_KOs_with_DE_proteins", "trna", "i", "output_file"))
# Load their phenotypic data: growth rate and growth yield for all KOs
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep = "")))
# Just number of DE proteins
UCU_major_minor <- phenotypic_data %>%
filter(UCU_family != "No") %>%
dplyr::select(gene_name, UCU_family) %>%
dplyr::rename(Strain.Name = gene_name)
UCU_responsiveness <- responsiveness%>% filter(anticodon == "UCU")
UCU_family <- full_join(UCU_major_minor, UCU_responsiveness, by = "Strain.Name")
# Volcano plots
## Keep only KOs in UCU family
KOs_in_UCU_family <- UCU_family$Strain.Name
da_only_KOs_from_UCU_family <- da[da$Strain.Name %in% KOs_in_UCU_family,]
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(KOs_in_UCU_family)) {
trna <- KOs_in_UCU_family[i]
plot_title <- paste(trna, UCU_family$UCU_family[UCU_family$Strain.Name == trna], sep = "_")
temp <- da_only_KOs_from_UCU_family %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = plot_title) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_location <- paste(base_dir, "Output/Plots/Volcano_plots/volcano_plots_per_KO_UCU_family_together.pdf", sep="")
ggsave(
filename = output_location,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_in_UCU_family", "temp", "da_only_KOs_from_UCU_family", "trna", "plot_title", "UCU_major_minor", "UCU_responsiveness", "i", "UCU_family", "phenotypic_data", "output_location"))
ggplot(data = responsiveness, aes(x = as.factor(Replicate_num), y = nDEP, col = as.factor(Replicate_num))) +
geom_boxplot() +
geom_jitter(position=position_jitter(0.2)) +
theme_light() +
xlab("Number of replicates")
replicate_num_vs_nDEP_cor <- cor(responsiveness$nDEP, responsiveness$Replicate_num)
replicate_num_vs_nDEP_cor
# Remove unnecessary objects
rm(replicate_num_vs_nDEP_cor)
responsiveness <- responsiveness %>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
ggplot(data = responsiveness, aes(x = anticodon, y = nDEP, fill = Family_count)) +
geom_boxplot() +
theme_light() +
xlab("Anticodon") +
labs(fill = "Genes in\nfamily",
title = "Number of DE proteins per family",
subtitle = "Colored by number of tRNA genes in the family") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(data = responsiveness, aes(x = anticodon, y = nDEP, fill = Family_count)) +
geom_boxplot() +
theme_light() +
xlab("Anticodon") +
labs(fill = "Genes in\nfamily",
title = "Number of DE proteins per family",
subtitle = "Colored by number of tRNA genes in the family - nDEP < 350") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
coord_cartesian(ylim = c(0, 350))
# Correlation between nDEP and tRNA family size
resp_summarized_by_family <- aggregate(responsiveness$nDEP, list(responsiveness$anticodon), mean)
colnames(resp_summarized_by_family) <- c("anticodon", "nDEP")
resp_summarized_by_family <- merge(resp_summarized_by_family, responsiveness[, c("anticodon", "Family_count")], by = "anticodon", all.x = T)
resp_summarized_by_family <- resp_summarized_by_family %>%
distinct(anticodon, .keep_all = T)
cor(resp_summarized_by_family$nDEP, resp_summarized_by_family$Family_count)
# Remove unnecessary variables
rm(resp_summarized_by_family)
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I used to define the threshold to make out major and minor tRNA genes - I had it at 2 - now I do this in a bit of a more complex way (below)
# Define a column with "minor"-"major", so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness <- responsiveness %>%
group_by(anticodon) %>%
mutate(family_max = max(nDEP)) %>%
ungroup() %>%
mutate(Gene_type = case_when(nDEP <= 20 ~ "Minor",
nDEP > 20 & nDEP < 0.75*family_max ~ "Minor",
nDEP > 0.75*family_max ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup() %>%
dplyr::select(-family_max)
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, responsiveness, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% responsiveness$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
dplyr::select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot - I think I could have avoided this by using geom_col()? But I didn't know it yet
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Produce a single histogram like the one at the beginning of this chunk for each set of tRNA isoacceptors - and save them to a PDF
## Add amino acid full name to be used as title for each subplot
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
responsiveness <- left_join(responsiveness, amino_acids, by = "Amino_acid_1_letter")
## Create empty list of plots
plot_list <- list()
## Generate the plots and add them to the list
aas <- sort(levels(as.factor(responsiveness$Amino_acid_1_letter)))
for (i in 1:length(aas)) {
aa <- aas[i]
temp <- responsiveness %>%
filter(Amino_acid_1_letter == aa)
plot_list[[aa]] <- ggplot(data = temp, aes(x = nDEP, fill = anticodon)) +
geom_histogram(binwidth = 1, stat = StatBin2) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("{aa}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/nDEP_hists_per_isoacceptors_color_by_codon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unnecessary variables
rm(family_sizes_long, my_grobs, plot_list, temp, aa, aas, output_file, i)
# Add columns with DNA and mature sequences to responsiveness dataframe
temp <- master_dataset %>%
dplyr::select(Strain.Name, DNA_sequence, mature_sequence)
responsiveness <- left_join(responsiveness, temp, by = "Strain.Name")
## Create empty list of plots
plot_list_DNA_seq <- list()
plot_list_mature_seq <- list()
## Generate the plots and add them to the list
anticodons <- unique(as.character(responsiveness$anticodon))
for (i in 1:length(anticodons)) {
my_anticodon <- anticodons[i]
temp <- responsiveness %>%
filter(anticodon == my_anticodon)
# Color by DNA seq
plot_list_DNA_seq[[my_anticodon]] <- ggplot(data = temp, aes(x = nDEP, col = DNA_sequence, fill = DNA_sequence)) +
geom_histogram(binwidth = 1, stat = StatBin2) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
# Color by mature seq
plot_list_mature_seq[[my_anticodon]] <- ggplot(data = temp, aes(x = nDEP, col = mature_sequence, fill = mature_sequence)) +
geom_histogram(binwidth = 1, stat = StatBin2) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs_DNA <- lapply(plot_list_DNA_seq, ggplotGrob)
my_grobs_mature <- lapply(plot_list_mature_seq, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/nDEP_hists_per_anticodon_color_by_DNA_seq.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs_DNA, nrow=4, ncol=4),
width = 15, height = 9
)
output_file = paste(base_dir, "Output/Plots/nDEP_hists_per_anticodon_color_by_mature_seq.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs_mature, nrow=4, ncol=4),
width = 15, height = 9
)
# Save responsiveness dataframe for further use
fwrite(responsiveness, paste(base_dir, "Data/responsiveness.csv", sep=""))
# Remove unnecessary variables
rm(amino_acids, master_by_amino_acid, master_by_anticodon, my_grobs_DNA, my_grobs_mature, plot_list_DNA_seq, plot_list_mature_seq, temp,
anticodon, anticodons, i, my_anticodon, num_of_tRNA_versions_DNA, num_of_tRNA_versions_mature, output_file)
# Just need to load resp_and_expression first
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
# Family_count vs. major_count, as in 1.11., but color by amino acid carried - TODO
temp <- resp_and_expression %>%
dplyr::select(anticodon, Amino_acid_1_letter)
temp_2 <- left_join(family_sizes, temp, by = "anticodon") %>%
distinct(anticodon, .keep_all = T)
ggplot(data = temp_2, aes(x = Family_count, y = Major_count, col = Amino_acid_1_letter)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count == 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4,
max.overlaps = 100)
# Same, but use in the y axis the % of major tRNAs instead of the count
ggplot(data = temp_2, aes(x = Family_count, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the study") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3| anticodon == "CAA"),
aes(x = Family_count, y = Major_count/Family_count, label = anticodon, col = Amino_acid_1_letter),
size = 4)
# Same, but use in the y axis the % of major tRNAs instead of the count, and color by aa
ggplot(data = temp_2, aes(x = Family_size, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in total") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3 | anticodon == "CAA"),
aes(x = Family_size, y = Major_count/Family_count, label = anticodon, col = Amino_acid_1_letter),
size = 4)
# Remove unnecessary variables
rm(family_sizes, resp_and_expression)
num_of_tRNA_versions_DNA <- c()
num_of_tRNA_versions_mature <- c()
anticodons <- unique(master_dataset$Anticodon)
for (i in 1:length(anticodons)) {
anticodon <- anticodons[i]
temp <- master_dataset %>%
filter(Anticodon == anticodon)
num_of_tRNA_versions_DNA <- c(num_of_tRNA_versions_DNA, length(unique(temp$DNA_sequence)))
num_of_tRNA_versions_mature <- c(num_of_tRNA_versions_mature, length(unique(temp$mature_sequence)))
}
temp <- data.frame(anticodons, num_of_tRNA_versions_DNA, num_of_tRNA_versions_mature)
# Remove unnecessary variables
rm(temp, anticodon, anticodons, i, num_of_tRNA_versions_DNA, num_of_tRNA_versions_mature)
# Plots by anticodon
master_by_anticodon <- master_dataset %>%
distinct(Anticodon, .keep_all = T)
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.7), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon)) +
theme(axis.text.x = element_blank()) +
labs(title = "% of tRNA-genes with each anticodon that were KOd") +
ylab("% of genes KOd")
# Plots by amino acid - for some reason distinct() is not working???
master_by_amino_acid <- master_dataset[!duplicated(master_dataset$Isotype_from_anticodon),]
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd",
col = "Number of tRNAs\nloading this aa")
# How many tRNA genes are there for each amino acid?
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
theme(axis.text.x = element_blank()) +
labs(title = "Number of tRNA genes carrying each amino acid") +
xlab("Amino acid") +
ylab("Number of genes") +
geom_text_repel(data = subset(master_by_amino_acid, Number_of_tRNAs_loading_this_aa < 6 | Number_of_tRNAs_loading_this_aa > 20), aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa, label = Isotype_from_anticodon))
# Remove unnecessary variables
rm(master_by_amino_acid, master_by_anticodon)
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
xlab("KO strain") +
labs(fill = "Amino acid")
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_density(fill="#77bd89",
color="#1f6e34",
alpha=0.8,
linewidth = 1) +
theme_light()
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Amino acid",
title = 'tRNA KOs Responsiveness per AA',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Amino acid",
title = 'tRNA KOs Responsiveness per AA',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated < 250 nDEP') +
xlab("Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Chromosome") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated < 250 nDEP') +
xlab("Chromosome") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
myLetters <- letters[1:26]              # Need this to be able to re-order anticodons by amino acid
ggplot(responsiveness, aes(x = fct_reorder(anticodon, match(tolower(Amino_acid_1_letter), myLetters)), y = nDEP, groupping = Amino_acid_1_letter, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
xlab("Anticodon") +
labs(fill = "Amino acid") +
labs(title = 'tRNA KOs Responsiveness per Anticodon',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(responsiveness, aes(x = fct_reorder(anticodon, match(tolower(Amino_acid_1_letter), myLetters)), y = nDEP, groupping = Amino_acid_1_letter, fill = Amino_acid_1_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
xlab("Anticodon") +
labs(fill = "Amino acid") +
coord_cartesian(ylim = c(0, 350)) +
labs(title = 'tRNA KOs Responsiveness per Anticodon',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated < 350 nDEP') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
rm(da, master_dataset, responsiveness, sample_layout)
# I identified families where there are at least 2 KOs with a decently large number of nDEPs by looking at the histograms I made earlier
families_of_interest <- c("CUU", "UUG", "CCA", "AGA", "CAU", "AGC")
# Load protein overlaps dataset created in previous section, with all possible intersections
if (alpha == 0.01) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep="")))
}
if (alpha == 0.05) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep="")))
}
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep = "")))
DE_protein_overlaps <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2,
anticodon_1 %in% families_of_interest)
View(DE_protein_overlaps)
DE_protein_overlaps <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2,
anticodon_1 %in% families_of_interest,
protein_number_1 > 20 & protein_number_2 > 20)
View(DE_protein_overlaps)
# I identified families where there are at least 2 KOs with a decently large number of nDEPs by looking at the histograms I made earlier
families_of_interest <- c("CUU", "UUG", "CCA", "AGA", "CAU", "AGC")
# Load protein overlaps dataset created in previous section, with all possible intersections
if (alpha == 0.01) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep="")))
}
if (alpha == 0.05) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep="")))
}
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep = "")))
DE_protein_overlaps <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2,
protein_number_1 > 20 & protein_number_2 > 20)
View(DE_protein_overlaps)
ggplot(data = DE_protein_overlaps, aes(x = mean(protein_number_1, protein_number_2), y = Jaccard_index)) +
geom_point() +
theme_light()
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(protein_number_avg = mean(protein_number_1, protein_number_2),
overlap_over_strain_1 = overlap_size/protein_number_1,
overlap_over_strain_2 = overlap_size/protein_number_2,
overlap_over_union = overlap_size/(protein_number_1+protein_number_2),
overlap_over_log_union = overlap_size/log2(protein_number_1+protein_number_2),
Jaccard_index = overlap_size/(protein_number_1+protein_number_2-overlap_size))
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(protein_number_avg = mean(protein_number_1, protein_number_2)) %>%
mutate(overlap_over_strain_1 = overlap_size/protein_number_1,
overlap_over_strain_2 = overlap_size/protein_number_2,
overlap_over_union = overlap_size/(protein_number_1+protein_number_2),
overlap_over_log_union = overlap_size/log2(protein_number_1+protein_number_2),
Jaccard_index = overlap_size/(protein_number_1+protein_number_2-overlap_size))
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(protein_number_avg = mean(c(protein_number_1, protein_number_2))) %>%
mutate(overlap_over_strain_1 = overlap_size/protein_number_1,
overlap_over_strain_2 = overlap_size/protein_number_2,
overlap_over_union = overlap_size/(protein_number_1+protein_number_2),
overlap_over_log_union = overlap_size/log2(protein_number_1+protein_number_2),
Jaccard_index = overlap_size/(protein_number_1+protein_number_2-overlap_size))
