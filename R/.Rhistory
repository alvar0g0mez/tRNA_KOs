dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(AA_charge_synth, AA_type_synth)
temp <- amino_acids %>%
dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
de_synthetases <- list()
for (i in 1:length(de_proteins_list_001)) {
de_proteins <- de_proteins_list_001[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list_001)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Amino acid carried by the KOd tRNA
temp <- master_dataset %>%
dplyr::select(Strain.Name, Isotype_from_anticodon_1_letter)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Strain.Name") %>%
rename(AA = Isotype_from_anticodon_1_letter)
temp <- amino_acids %>%
dplyr::select(AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_charge_tRNA = amino_acid_charge,
AA_type_tRNA = amino_acid_type)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "AA") %>%
rename(AA_carried_by_tRNA = AA)
# Amino acid loaded by the synthetase
temp <- amino_acids %>%
dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_charge_synth, AA_type_synth) %>%
rename(Synthetase = Gene.secondaryIdentifier)
de_synthetases_df <- left_join(de_synthetases_df, temp_2, by = "Synthetase") %>%
rename()
temp <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_loaded_by_synthetase) %>%
rename(Synthetase = Gene.secondaryIdentifier) %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_loaded_by_synthetase, collapse = ","), .keep) %>%
rename(AA_loaded_by_synthetase = text)
temp <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_loaded_by_synthetase) %>%
rename(Synthetase = Gene.secondaryIdentifier) %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_loaded_by_synthetase, collapse = ",")) %>%
rename(AA_loaded_by_synthetase = text)
de_synthetases_df <- left_join(de_synthetases_df, temp_2, by = "Synthetase") %>%
rename()
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
de_synthetases <- list()
for (i in 1:length(de_proteins_list_001)) {
de_proteins <- de_proteins_list_001[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list_001)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Amino acid carried by the KOd tRNA
temp <- master_dataset %>%
dplyr::select(Strain.Name, Isotype_from_anticodon_1_letter)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Strain.Name") %>%
rename(AA = Isotype_from_anticodon_1_letter)
temp <- amino_acids %>%
dplyr::select(AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_charge_tRNA = amino_acid_charge,
AA_type_tRNA = amino_acid_type)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "AA") %>%
rename(AA_carried_by_tRNA = AA)
# Amino acid loaded by the synthetase
temp <- amino_acids %>%
dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_charge_synth, AA_type_synth) %>%
rename(Synthetase = Gene.secondaryIdentifier)
de_synthetases_df <- left_join(de_synthetases_df, temp_2, by = "Synthetase") %>%
rename()
temp <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_loaded_by_synthetase) %>%
rename(Synthetase = Gene.secondaryIdentifier) %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_loaded_by_synthetase, collapse = ",")) %>%
rename(AA_loaded_by_synthetase = text)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Synthetase") %>%
rename()
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
de_synthetases <- list()
for (i in 1:length(de_proteins_list_001)) {
de_proteins <- de_proteins_list_001[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list_001)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
temp <- master_dataset %>%
dplyr::select(Strain.Name, Isotype_from_anticodon_1_letter)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Strain.Name") %>%
rename(AA = Isotype_from_anticodon_1_letter)
temp <- amino_acids %>%
dplyr::select(AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_charge_tRNA = amino_acid_charge,
AA_type_tRNA = amino_acid_type)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "AA") %>%
rename(AA_carried_by_tRNA = AA)
temp <- amino_acids %>%
dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_charge_synth, AA_type_synth) %>%
rename(Synthetase = Gene.secondaryIdentifier)
View(temp_2)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
de_synthetases <- list()
for (i in 1:length(de_proteins_list_001)) {
de_proteins <- de_proteins_list_001[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list_001)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Amino acid carried by the KOd tRNA
temp <- master_dataset %>%
dplyr::select(Strain.Name, Isotype_from_anticodon_1_letter)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Strain.Name") %>%
rename(AA = Isotype_from_anticodon_1_letter)
temp <- amino_acids %>%
dplyr::select(AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_charge_tRNA = amino_acid_charge,
AA_type_tRNA = amino_acid_type)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "AA") %>%
rename(AA_carried_by_tRNA = AA)
# Amino acid loaded by the synthetase
temp <- amino_acids %>%
dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_charge_synth, AA_type_synth) %>%
rename(Synthetase = Gene.secondaryIdentifier)
temp_3 <- temp_2 %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_charge_synth, collapse = ",")) %>%
rename(AA_charge_synth = text)
temp_4 <- temp_2 %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_type_synth, collapse = ",")) %>%
rename(AA_type_synth = text)
de_synthetases_df <- left_join(de_synthetases_df, temp_3, by = "Synthetase")
de_synthetases_df <- left_join(de_synthetases_df, temp_4, by = "Synthetase")
temp <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_loaded_by_synthetase) %>%
rename(Synthetase = Gene.secondaryIdentifier) %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_loaded_by_synthetase, collapse = ",")) %>%
rename(AA_loaded_by_synthetase = text)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Synthetase") %>%
rename()
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Synthetase information
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
# Yeastmine
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Before I match standard to systematic names, I need to extend the rows with multiple standard names into several rows, each with one of the systematic names, since they are all meaningful and different
chu_synths_new <- data.frame(matrix(ncol = ncol(chu_synths), nrow = 0))
colnames(chu_synths_new) <- colnames(chu_synths)
for (i in 1:nrow(chu_synths)) {
std_name <- chu_synths$Synthetase[i]
if (grepl("/", std_name)) {
std_names <- str_split_1(std_name, "/")
for (j in 1:length(std_names)) {
new_row <- chu_synths[i, ]
new_row$Synthetase[1] <- std_names[j]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
else {
new_row <- chu_synths[i,]
chu_synths_new <- rbind(chu_synths_new, new_row)
}
}
chu_synths_new <- chu_synths_new %>%
rename(gene_names = Synthetase)
# Get a column with systematic gene names in the synthetase dataframe (they only have the standard naming)
chu_synths_new <- match_systematic_and_standard_protein_names(data = chu_synths_new,
yeastmine = yeastmine,
input = "standard",
simplify = F,
add_extra_columns = F)
de_synthetases <- list()
for (i in 1:length(de_proteins_list_001)) {
de_proteins <- de_proteins_list_001[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list_001)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
rename(Synthetase_systematic = Synthetase)
# Amino acid carried by the KOd tRNA
temp <- master_dataset %>%
dplyr::select(Strain.Name, Isotype_from_anticodon_1_letter)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "Strain.Name") %>%
rename(AA = Isotype_from_anticodon_1_letter)
temp <- amino_acids %>%
dplyr::select(AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_charge_tRNA = amino_acid_charge,
AA_type_tRNA = amino_acid_type)
de_synthetases_df <- left_join(de_synthetases_df, temp, by = "AA") %>%
rename(AA_carried_by_tRNA = AA)
# Amino acid loaded by the synthetase
temp <- amino_acids %>%
dplyr::select(Amino_acid, AA, amino_acid_charge, amino_acid_type) %>%
rename(AA_loaded_by_synthetase = AA,
AA_charge_synth = amino_acid_charge,
AA_type_synth = amino_acid_type)
temp_2 <- left_join(chu_synths_new, temp, by = "Amino_acid") %>%
dplyr::select(Gene.secondaryIdentifier, AA_charge_synth, AA_type_synth) %>%
rename(Synthetase = Gene.secondaryIdentifier)
temp_3 <- temp_2 %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_charge_synth, collapse = ",")) %>%
rename(AA_charge_synth = text)
temp_4 <- temp_2 %>%
group_by(Synthetase) %>%
summarise(text=paste(AA_type_synth, collapse = ",")) %>%
rename(AA_type_synth = text)
de_synthetases_df <- left_join(de_synthetases_df, temp_3, by = "Synthetase")
View(yeastmine)
