test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(melted_corrs)
ggplot(data = melted_corrs, aes(x=Var2, y=Var1, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>% dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
class(melted_corrs$Var1)
class(melted_corrs$Var2)
melt <- function(df) {
if (is.matrix(df))  {
df <- as.data.frame(df)
}
df$Var1 <- as.factor(rownames(df))
out <- pivot_longer(df, cols = -Var1, names_to = "Var2", values_to = "value")
df$Var2 <- as.factor(df$Var2)
return(out)
}
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>% dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
df <- test_corrs
df <- as.data.frame(df)
df$Var1 <- as.factor(rownames(df))
out <- pivot_longer(df, cols = -Var1, names_to = "Var2", values_to = "value")
df$Var2 <- as.factor(df$Var2)
melt <- function(df) {
if (is.matrix(df))  {
df <- as.data.frame(df)
}
df$Var1 <- as.factor(rownames(df))
out <- pivot_longer(df, cols = -Var1, names_to = "Var2", values_to = "value")
out$Var2 <- as.factor(df$Var2)
return(out)
}
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>% dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
df <- test_corrs
df <- as.data.frame(df)
df$Var1 <- as.factor(rownames(df))
out <- pivot_longer(df, cols = -Var1, names_to = "Var2", values_to = "value")
out$Var2 <- as.factor(df$Var2)
melt <- function(df) {
if (is.matrix(df))  {
df <- as.data.frame(df)
}
df$Var1 <- as.factor(rownames(df))
out <- pivot_longer(df, cols = -Var1, names_to = "Var2", values_to = "value")
out$Var2 <- as.factor(out$Var2)
return(out)
}
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>% dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
rownames(melted_corrs)
melted_corrs$Var1
colnames(test_corrs)
# MY MELT FUNCTION RETURNS THE ROWS IN THE DATAFRAME IN AN ORDER THAT MAKES SENSE TO ME, BUT SEEMINLGY GGPLOT2 DOESN'T LIKE IT BECAUSE IT PLOTS THEM IN ANOTHER ORDER XD
# GOTTA FIX THAT FOR IT TO LOOK PRETTY
melted_corrs$Var1 <- factor(melted_corrs$Var1, ordered = T, levels = c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP" ))
melted_corrs$Var2 <- factor(melted_corrs$Var2, ordered = T, levels = c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP" ))
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Load their small microarray data: fold changes for all genes but only for 5 samples
microarray_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/microarray_fold_change_data.tsv", sep="")))
# Load all S. cerevisiae genes from AllianceMine - to be able to go from standard to systematic gene names and vice versa
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Need to change the colnames in the microarray data to use () instead of ..
colnames(microarray_data) <- c("gene_names", "tM(CAU)C", "tR(CCU)J", "tR(UCU)M2", "tH(GUG)G1", "tL(GAG)G")
# Get standard protein names
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
microarray_data <- match_systematic_and_standard_protein_names(data = microarray_data,
yeastmine = yeastmine,
input = "systematic",
simplify = FALSE,
add_extra_columns = FALSE)
# Join with our proteomics data - not too sure if this merge is the most appropriate way to do it, even though I think so?
trna_ko_temp <- trna_ko %>%
mutate(Gene.symbol = rownames(trna_ko))
# Our proteomics data
resp <- as.data.frame(fread(paste(base_dir, "Data/responsiveness_batchcorrected_onWTs.csv", sep="")))
# Load their phenotypic data: growth rate and growth yield for all KOs
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
# Load trna_ko
trna_ko <- as.data.frame(fread(paste(base_dir, "Data/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv")))
# Load trna_ko
trna_ko <- as.data.frame(fread(paste(base_dir, "Data/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep="")))
# Load trna_ko
trna_ko <- as.data.frame(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep="")))
# Get standard protein names
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
microarray_data <- match_systematic_and_standard_protein_names(data = microarray_data,
yeastmine = yeastmine,
input = "systematic",
simplify = FALSE,
add_extra_columns = FALSE)
# Load their small microarray data: fold changes for all genes but only for 5 samples
microarray_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/microarray_fold_change_data.tsv", sep="")))
# Load all S. cerevisiae genes from AllianceMine - to be able to go from standard to systematic gene names and vice versa
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Need to change the colnames in the microarray data to use () instead of ..
colnames(microarray_data) <- c("gene_names", "tM(CAU)C", "tR(CCU)J", "tR(UCU)M2", "tH(GUG)G1", "tL(GAG)G")
# Get standard protein names
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
microarray_data <- match_systematic_and_standard_protein_names(data = microarray_data,
yeastmine = yeastmine,
input = "systematic",
simplify = FALSE,
add_extra_columns = FALSE)
# Join with our proteomics data - not too sure if this merge is the most appropriate way to do it, even though I think so?
trna_ko_temp <- trna_ko %>%
mutate(Gene.symbol = rownames(trna_ko))
proteomics_and_microarray_data <- left_join(trna_ko_temp, microarray_data, by = "Gene.symbol") # IM KEEPING ALL PROTEINS IN TRNA_KO, THERE ARE ACTUALLY 2863 WHICH ARE IN BOTH, SO SOME IN TRNA_KO ARE NOT IN MICROARRAY_DATA, I SHOULD FIX THIS CODE SO THOSE ARE NOT INCLUDED IN THE RESULTING DATA SET
# Correlation heatmap between our samples
samples_in_microarray <- colnames(microarray_data)[2:6]
sample_names_escaped <- c("tM\\(CAU\\)C",  "tR\\(CCU\\)J",  "tR\\(UCU\\)M2", "tH\\(GUG\\)G1", "tL\\(GAG\\)G")
proteomics_and_microarray_subset <- data.frame(matrix(nrow = nrow(proteomics_and_microarray_data), ncol = 0))
for (i in 1:length(samples_in_microarray)) {
sample_name <- sample_names_escaped[i]
temp <- proteomics_and_microarray_data[, grepl(sample_name, colnames(proteomics_and_microarray_data))]
proteomics_and_microarray_subset <- cbind(proteomics_and_microarray_subset, temp)
}
cormat <- round(cor(proteomics_and_microarray_subset, use = "pairwise.complete.obs", method = "kendall"), 2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary objects
list_for_venn_diagram <- list(Proteomics = rownames(trna_ko),
Transcriptomics = microarray_data$Gene.symbol)
ggvenn(
list_for_venn_diagram,
fill_color = c("#80AAFF", "#FF8080"),
stroke_size = 0.5, set_name_size = 4
)
test <- microarray_data %>% dplyr::select(-Gene.secondaryIdentifier, -Gene.symbol)
corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary variables
rm(test, corrs, melted_corrs)
# Grab columns of proteomics data with only samples from the strains for which there are microarray data
matches <- grepl(paste(sample_names_escaped, collapse="|"),
colnames(trna_ko))
MC_and_SC_proteomics <- trna_ko[, matches]
# Add MC or SC information to column names and sort columns by this so (expected) clusters are easily visible on heatmap
new_colnames <- c()
for (i in 1:ncol(MC_and_SC_proteomics)) {
old_colname <- colnames(MC_and_SC_proteomics)[i]
if (grepl(paste(c("UCU", "GUG"), collapse = "|"), old_colname))
new_colnames <- c(new_colnames, paste("MC", old_colname, sep = "_"))
else if ((grepl(paste(c("CCU", "GAG", "CAU"), collapse = "|"), old_colname)))
new_colnames <- c(new_colnames, paste("SC", old_colname, sep = "_"))
}
colnames(MC_and_SC_proteomics) <- new_colnames
MC_and_SC_proteomics <- MC_and_SC_proteomics %>% dplyr::select(order(colnames(MC_and_SC_proteomics)))
# Correlation heatmap
corrs <- round(cor(MC_and_SC_proteomics, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(corrs)
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary objects
rm(toMatch, matches, corrs, melted_corrs, old_colname, new_colnames)
corrs <- round(cor(trna_ko, use = "pairwise.complete.obs"), 2)
p1 <- ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, col = Amino_acid_1_letter)) +
geom_col() +
theme_light()
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, col = Amino_acid_1_letter)) +
geom_col() +
theme_light()
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light()
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
xlab("KO strain")
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
xlab("KO strain")
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
xlab("KO strain")
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("KO strain")
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_text(size=5),
legend.key.size = unit(0.5, 'cm')) +
xlab("KO strain")
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
xlab("KO strain")
ggplot(data = responsiveness, aes(x = Strain.Name, y = nDEP, fill = Amino_acid_1_letter)) +
geom_col() +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
xlab("KO strain") +
labs(fill = "Amino acid")
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_density() +
theme_light()
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_density(fill="#77bd89",
color="#1f6e34",
alpha=0.8) +
theme_light()
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_density(fill="#77bd89",
color="#1f6e34",
alpha=0.8,
size = 1) +
theme_light()
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_density(fill="#77bd89",
color="#1f6e34",
alpha=0.8,
linewidth = 1) +
theme_light()
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
labs(fill = "Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
labs(fill = "Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
theme_light()
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light()
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
geom_jitter() +
theme_light() +
labs(fill = "Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Amino acid") +
xlab("Amino acid")
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Amino acid") +
xlab("Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Amino acid",
title = 'tRNA KOs Responsiveness per AA',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Amino acid",
title = 'tRNA KOs Responsiveness per AA',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = Amino_acid_1_letter, y = nDEP, fill = Amino_acid_1_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Amino acid",
title = 'tRNA KOs Responsiveness per AA',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated > 250 nDEP') +
xlab("Amino acid") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = chromosome, y = nDEP, fill = chromosome)) +
geom_boxplot() +
geom_jitter() +
labs(title = 'tRNA KOs Responsiveness per Chromosome', subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = chromosome, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
geom_jitter() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = chromosome, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
geom_jitter() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
geom_jitter() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Chromosome")
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
geom_jitter() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Chromosome")
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Chromosome")
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated > 250 nDEP') +
xlab("Chromosome")
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Chromosome") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated > 250 nDEP') +
xlab("Chromosome") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs)') +
xlab("Chromosome") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm'))
ggplot(data = responsiveness, aes(x = chromosome_letter, y = nDEP, fill = chromosome_letter)) +
geom_boxplot(outliers = F) +
geom_jitter() +
theme_light() +
labs(fill = "Chromosome",
title = 'tRNA KOs Responsiveness per Chromosome',
subtitle = 'Number of Differentially Expressed Proteins (DEPs) - truncated > 250 nDEP') +
xlab("Chromosome") +
theme(legend.title = element_text(size=9),
legend.key.size = unit(0.5, 'cm')) +
coord_cartesian(ylim = c(0, 250))
