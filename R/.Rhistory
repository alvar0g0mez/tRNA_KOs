width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_with_DE_proteins", "temp", "da_only_KOs_with_DE_proteins", "trna", "i", "output_file"))
# Load their phenotypic data: growth rate and growth yield for all KOs
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep = "")))
# Just number of DE proteins
UCU_major_minor <- phenotypic_data %>%
filter(UCU_family != "No") %>%
dplyr::select(gene_name, UCU_family) %>%
rename(Strain.Name = gene_name)
UCU_responsiveness <- responsiveness%>% filter(anticodon == "UCU")
UCU_family <- full_join(UCU_major_minor, UCU_responsiveness, by = "Strain.Name")
# Volcano plots
## Keep only KOs in UCU family
KOs_in_UCU_family <- UCU_family$Strain.Name
da_only_KOs_from_UCU_family <- da[da$Strain.Name %in% KOs_in_UCU_family,]
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(KOs_in_UCU_family)) {
trna <- KOs_in_UCU_family[i]
plot_title <- paste(trna, UCU_family$UCU_family[UCU_family$Strain.Name == trna], sep = "_")
temp <- da_only_KOs_from_UCU_family %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = plot_title) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_location <- paste(base_dir, "Output/Plots/Volcano_plots/DE_together/volcano_plots_per_KO_UCU_family_together.pdf", sep="")
ggsave(
filename = output_location,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_in_UCU_family", "temp", "da_only_KOs_from_UCU_family", "trna", "plot_title", "UCU_major_minor", "UCU_responsiveness", "i", "UCU_family", "phenotypic_data", "output_location"))
ggplot(data = responsiveness, aes(x = as.factor(Replicate_num), y = nDEP, col = as.factor(Replicate_num))) +
geom_boxplot() +
geom_jitter(position=position_jitter(0.2)) +
xlab("Number of replicates")
replicate_num_vs_nDEP_cor <- cor(responsiveness$nDEP, responsiveness$Replicate_num)
replicate_num_vs_nDEP_cor
# Remove unnecessary objects
rm(replicate_num_vs_nDEP_cor)
responsiveness <- responsiveness %>%
group_by(anticodon) %>%
mutate(n= n())
ggplot(data = responsiveness, aes(x = anticodon, y = nDEP, fill = n)) +
geom_boxplot()
# Correlation between nDEP and tRNA family size
resp_summarized_by_family <- aggregate(responsiveness$nDEP, list(responsiveness$anticodon), mean)
colnames(resp_summarized_by_family) <- c("anticodon", "nDEP")
resp_summarized_by_family <- merge(resp_summarized_by_family, responsiveness[, c("anticodon", "n")], by = "anticodon", all.x = T)
resp_summarized_by_family <- resp_summarized_by_family %>%
distinct(anticodon, .keep_all = T)
cor(resp_summarized_by_family$nDEP, resp_summarized_by_family$n)
# Remove unnecessary variables
rm(resp_summarized_by_family)
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I define the threshold to make out major and minor tRNA genes - for now I have it at 2
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness<- responsiveness%>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
responsiveness<- responsiveness%>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, responsiveness, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% responsiveness$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
dplyr::select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Produce a single histogram like the one at the beginning of this chunk for each set of tRNA isoacceptors - and save them to a PDF
## Add amino acid full name to be used as title for each subplot
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
rename(Amino_acid = Name,
AA = X1_letter_code) %>%
dplyr::select(Amino_acid, AA)
# Save responsiveness dataframe for further use
responsiveness <- responsiveness %>%
rename(Amino_acid_1_letter = AA)
fwrite(responsiveness, paste(base_dir, "Data/responsiveness.csv", sep=""))
num_of_tRNA_versions_DNA <- c()
num_of_tRNA_versions_mature <- c()
anticodons <- unique(master_dataset$Anticodon)
for (i in 1:length(anticodons)) {
anticodon <- anticodons[i]
temp <- master_dataset %>%
filter(Anticodon == anticodon)
num_of_tRNA_versions_DNA <- c(num_of_tRNA_versions_DNA, length(unique(temp$DNA_sequence)))
num_of_tRNA_versions_mature <- c(num_of_tRNA_versions_mature, length(unique(temp$mature_sequence)))
}
temp <- data.frame(anticodons, num_of_tRNA_versions_DNA, num_of_tRNA_versions_mature)
# tRNa expression data from Cozen et al., 2015 - keep only genomic rows
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
dplyr::select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp
resp_and_expression <- left_join(responsiveness, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA expression") +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid_3_letter") %>%
rename(synthetase_abundance = Abundance)
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "Amino_acid_1_letter")
# Add also the synthetase abundance we detect in our WTs
synthetases <- fread(paste(base_dir, "Data/trna_synthetases.csv", sep=""))
temp <- synthetases %>%
dplyr::select(Amino_acid, measured_proteomics_WT)
resp_and_expression <- left_join(resp_and_expression, temp, by = "Amino_acid_3_letter")
View(amino_acids)
temp <- fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv")) %>%
dplyr::select(-molecular_weight)
temp <- fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")) %>%
dplyr::select(-molecular_weight)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# Fix the names of the amino acid columns
synthetases <- synthetases %>%
rename(Amino_acid_3_letter = Amino_acid)
synthetases <- left_join(synthetases, temp, by = "Amino_acid_3_letter")
# Save this dataset
fwrite(synthetases, paste(base_dir, "Data/trna_synthetases.csv", sep=""))
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid_3_letter") %>%
rename(synthetase_abundance = Abundance)
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "Amino_acid_1_letter")
# Add also the synthetase abundance we detect in our WTs
synthetases <- fread(paste(base_dir, "Data/trna_synthetases.csv", sep=""))
temp <- synthetases %>%
dplyr::select(Amino_acid, measured_proteomics_WT)
temp <- synthetases %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT)
resp_and_expression <- left_join(resp_and_expression, temp, by = "Amino_acid_1_letter")
# tRNa expression data from Cozen et al., 2015 - keep only genomic rows
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# tRNa expression data from Cozen et al., 2015 - keep only genomic rows
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
dplyr::select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp
resp_and_expression <- left_join(responsiveness, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA expression") +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid_3_letter") %>%
rename(synthetase_abundance = Abundance)
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "Amino_acid_1_letter")
# Add also the synthetase abundance we detect in our WTs
synthetases <- fread(paste(base_dir, "Data/trna_synthetases.csv", sep=""))
temp <- synthetases %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT)
resp_and_expression <- left_join(resp_and_expression, temp, by = "Amino_acid_1_letter")
# tRNa expression data from Cozen et al., 2015 - keep only genomic rows
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
dplyr::select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp
resp_and_expression <- left_join(responsiveness, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA expression") +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid_3_letter") %>%
rename(synthetase_abundance = Abundance)
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "Amino_acid_1_letter")
# Add also the synthetase abundance we detect in our WTs
synthetases <- fread(paste(base_dir, "Data/trna_synthetases.csv", sep=""))
temp <- synthetases %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT)
View(resp_and_expression)
View(temp)
View(chu_synths)
View(synthetases)
i = 1
aas <- unique(synthetases$Amino_acid_3_letter)
aa <- aas[i]
View(synthetases)
View(temp)
aa <- "E"
temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
View(temp_2)
temp <- synthetases %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT) %>%
filter(Gene.symbol != "GRS2",
!is.na(measured_proteomics_WT))
temp <- synthetases %>%
filter(Gene.symbol != "GRS2",
!is.na(measured_proteomics_WT)) %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT) %>%
# For the rows for each amino acid, select the limiting one, the one we detect the least of (even though I don't even know if they join 1:1 to form the complex?)
synthetases_to_merge <- data.frame(matrix(ncol = ncol(synthetases), nrow = 0))
temp <- synthetases %>%
filter(Gene.symbol != "GRS2",
!is.na(measured_proteomics_WT)) %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT)
# For the rows for each amino acid, select the limiting one, the one we detect the least of (even though I don't even know if they join 1:1 to form the complex?)
synthetases_to_merge <- data.frame(matrix(ncol = ncol(synthetases), nrow = 0))
temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
View(temp_2)
temp_2 <- temp_2[which.min(temp_2$measured_proteomics_WT),]
temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
temp_2 <- temp_2[which.min(temp_2$measured_proteomics_WT),]
synthetases_to_merge <- data.frame(matrix(ncol = ncol(synthetases), nrow = 0))
aas <- unique(synthetases$Amino_acid_3_letter)
for (i in 1:length(aas)) {
aa <- aas[i]
temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
temp_2 <- temp_2[which.min(temp_2$measured_proteomics_WT),]
synthetases_to_merge <- rbind(synthetases_to_merge, temp_2)
}
synthetases_to_merge <- data.frame(matrix(ncol = ncol(synthetases), nrow = 0))
aas <- unique(synthetases$Amino_acid_1_letter)
for (i in 1:length(aas)) {
aa <- aas[i]
temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
temp_2 <- temp_2[which.min(temp_2$measured_proteomics_WT),]
synthetases_to_merge <- rbind(synthetases_to_merge, temp_2)
}
View(synthetases_to_merge)
resp_and_expression <- left_join(resp_and_expression, temp, by = "Amino_acid_1_letter")
# tRNa expression data from Cozen et al., 2015 - keep only genomic rows
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
dplyr::select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp
resp_and_expression <- left_join(responsiveness, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA expression") +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))[1:20,]
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid_3_letter") %>%
rename(synthetase_abundance = Abundance)
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "Amino_acid_1_letter")
# Add also the synthetase abundance we detect in our WTs
## Remove those synthetases we didn't detect in our data, as well as GRS2 (only active under stress)
synthetases <- fread(paste(base_dir, "Data/trna_synthetases.csv", sep=""))
temp <- synthetases %>%
filter(Gene.symbol != "GRS2",
!is.na(measured_proteomics_WT)) %>%
dplyr::select(Amino_acid_1_letter, measured_proteomics_WT)
# For the rows for each amino acid, select the limiting one, the one we detect the least of (even though I don't even know if they join 1:1 to form the complex?)
synthetases_to_merge <- data.frame(matrix(ncol = ncol(synthetases), nrow = 0))
aas <- unique(synthetases$Amino_acid_1_letter)
for (i in 1:length(aas)) {
aa <- aas[i]
temp_2 <- temp %>%
filter(Amino_acid_1_letter == aa)
temp_2 <- temp_2[which.min(temp_2$measured_proteomics_WT),]
synthetases_to_merge <- rbind(synthetases_to_merge, temp_2)
}
resp_and_expression <- left_join(resp_and_expression, synthetases_to_merge, by = "Amino_acid_1_letter")
View(resp_and_expression)
View(synthetases)
knitr::opts_chunk$set(echo = TRUE)
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
View(codon_ratios_list)
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
View(responsiveness)
# Processed KO proteomics dataframe
trna_ko <- as.data.frame(as.matrix(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep="")), rownames = 1))
View(trna_ko)
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ synthetase_abundance*k_cat_value*codon_frequency_chu_2011)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ synthetase_abundance*k_cat_value*codon_frequency_chu_2011*mean_reads_per_tRNA)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ synthetase_abundance*k_cat_value*codon_frequency_chu_2011)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
