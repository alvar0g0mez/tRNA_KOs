anticodons <- unique(responsiveness$anticodon)
upset_plots_list <- list()
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
upset_plots_list <- list()
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
par(mfrow = c(2,2))
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
p <- ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect")
print(p)
}
}
dev.off()
# Something wrong in that for-loop, I shouldn't end up with NULL elements in that list, we should not be generating anything and adding it to the list when length(KOs_with_anticodon) <= 1 -- there is a very clear "if" statement there to prevent that xd, no idea why it is not working
upset_plots_list <- upset_plots_list[!(sapply(upset_plots_list, is.null))]
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
upset_plots_list <- list()
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
upset_plots_list <- list()
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
par(mfrow = c(2,2))
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
p <- ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect")
upset_plot_list[[i]] <- p
print(p)
}
}
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
upset_plots_list <- list()
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
par(mfrow = c(2,2))
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
p <- ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect")
upset_plots_list[[i]] <- p
print(p)
}
}
dev.off()
# Something wrong in that for-loop, I shouldn't end up with NULL elements in that list, we should not be generating anything and adding it to the list when length(KOs_with_anticodon) <= 1 -- there is a very clear "if" statement there to prevent that xd, no idea why it is not working
upset_plots_list <- upset_plots_list[!(sapply(upset_plots_list, is.null))]
## Print to PDF
my_grobs <- lapply(upset_plots_list, ggplotGrob)
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=1, ncol=1),
width = 5, height = 3
)
grid.arrange(upset_plot_list[[1]], upset_plot_list[[2]], upset_plot_list[[3]], upset_plot_list[[4]], ncol = 2, nrow = 2)
grid.arrange(upset_plots_list[[1]], upset_plots_list[[2]], upset_plots_list[[3]], upset_plots_list[[4]], ncol = 2, nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
upset_plots_list <- list()
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
par(mfrow = c(2,2))
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
p <- ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect")
upset_plots_list[[i]] <- p
print(p)
}
}
dev.off()
p1 <- upset_plots_list[[1]]
p2 <- upset_plots_list[[2]]
p3 <- upset_plots_list[[3]]
p4 <- upset_plots_list[[4]]
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/check.pdf", sep = ""))
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/check.pdf", sep = ""))
combined_plot <- (plot1 + plot2) / (plot3 + plot4)
pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/check.pdf", sep = ""))
combined_plot <- (p1 + p2) / (p3 + p4)
print(combined_plot)
View(upset_plots_list)
plot(upset_plots_list[[1]])
upset_plots_list[[1]] + upset_plots_list[[2]]
p <- plot(upset_plots_list[[1]])
View(p)
combined_plot <- (p1 + p2) / (p3 + p4)
print(combined_plot)
# Something wrong in that for-loop, I shouldn't end up with NULL elements in that list, we should not be generating anything and adding it to the list when length(KOs_with_anticodon) <= 1 -- there is a very clear "if" statement there to prevent that xd, no idea why it is not working
upset_plots_list <- upset_plots_list[!(sapply(upset_plots_list, is.null))]
## Print to PDF
my_grobs <- lapply(upset_plots_list, ggplotGrob)
View(my_grobs)
my_grobs <- list()
for (i in 1:length(upset_plots_list)) {
plot <- upset_plots_list[[i]]
grob <- lapply(plot, ggplotGrob)
my_grobs[[i]] <- grob
}
View(my_grobs)
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=1, ncol=1),
width = 5, height = 3
)
## Print to PDF
my_grobs <- glist()
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=1, ncol=1),
width = 5, height = 3
)
gaussian_modelling_df <- resp_and_expression_modelling %>%
mutate(nDEP = log2(nDEP))
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
# Create a new version of the dataset with prettier names for the columns so the model summary is more readable
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
codon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA,
synthetase_abundance_literature = synthetase_abundance,
synthetase_abundance_our_WTs = measured_proteomics_WT)
# Add info on U_34, A_34 from master_dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep=""))) %>%
dplyr::select(Strain.Name, A_34, U_34) %>%
mutate(A_34 = as.numeric(A_34),
U_34 = as.numeric(A_34))
resp_and_expression_modelling <- left_join(resp_and_expression_modelling, master_dataset, by = "Strain.Name")
gaussian_modelling_df <- resp_and_expression_modelling %>%
mutate(nDEP = log2(nDEP))
hist(log2(resp_and_expression$nDEP))
hist(log10(resp_and_expression$nDEP))
fit <- lm(nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency)
fit <- lm(data = gaussian_modelling_df, nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency)
View(gaussian_modelling_df)
log2(0)
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
# Create a new version of the dataset with prettier names for the columns so the model summary is more readable
resp_and_expression_modelling <- resp_and_expression %>%
dplyr::rename(catalytic_constant = k_cat_value,
codon_frequency = codon_frequency_chu_2011,
tRNA_expression = mean_reads_per_tRNA,
synthetase_abundance_literature = synthetase_abundance,
synthetase_abundance_our_WTs = measured_proteomics_WT)
# Add info on U_34, A_34 from master_dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep=""))) %>%
dplyr::select(Strain.Name, A_34, U_34) %>%
mutate(A_34 = as.numeric(A_34),
U_34 = as.numeric(A_34))
resp_and_expression_modelling <- left_join(resp_and_expression_modelling, master_dataset, by = "Strain.Name")
gaussian_modelling_df <- resp_and_expression_modelling %>%
mutate(nDEP = ifelse(nDEP == 0, 0, log2(nDEP)))
fit <- lm(data = gaussian_modelling_df, nDEP ~ synthetase_abundance_literature*catalytic_constant*codon_frequency)
summary(fit)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
# Preparations:
#   - Remove KOs with 0 DE proteins from list,
#   - Grab anticodon names
#   - Create empty list to put data matrices for Upset plots there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
#pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect")
image_name <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_", anticodon, ".png", sep="")
ggsave(filename = image_name)
}
}
#dev.off()
ggsave(filename = image_name, width = 8, height = 5)
# Preparations:
#   - Remove KOs with 0 DE proteins from list,
#   - Grab anticodon names
#   - Create empty list to put data matrices for Upset plots there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
#pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect")
image_name <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_", anticodon, ".png", sep="")
ggsave(filename = image_name, width = 8, height = 5)
}
}
#dev.off()
# Preparations:
#   - Remove KOs with 0 DE proteins from list,
#   - Grab anticodon names
#   - Create empty list to put data matrices for Upset plots there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
#pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect",
base_annotations = list(annotate(geom = "text",
label=paste("Total: ", length(all_proteins_anticodon)))),
set_size = F)
image_name <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_", anticodon, ".png", sep="")
ggsave(filename = image_name, width = 8, height = 5)
}
}
#dev.off()
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect",
base_annotations = list(annotate(geom = "text",
label=paste("Total: ", length(all_proteins_anticodon)),
labs(title = "Main title"))),
set_size = F)
# Preparations:
#   - Remove KOs with 0 DE proteins from list,
#   - Grab anticodon names
#   - Create empty list to put data matrices for Upset plots there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
#pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect",
base_annotations = list(annotate(geom = "text",
label=paste("Total: ", length(all_proteins_anticodon))))) +
ggtitle(label = "Intersection in DE proteins",
subtitle = glue("Across KOs for tRNAs with {anticodon}"))
image_name <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_", anticodon, ".png", sep="")
ggsave(filename = image_name, width = 8, height = 5)
}
}
#dev.off()
# Preparations:
#   - Remove KOs with 0 DE proteins from list,
#   - Grab anticodon names
#   - Create empty list to put data matrices for Upset plots there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
#pdf(file = paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_plots_per_anticodon.pdf", sep = ""), onefile = T, width = 12, height = 5, paper = 'USr')
# Iterate over the anticodons and get an Upset plot for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the right format for an upset plot
anticodon <- anticodons[i]
KOs_with_anticodon <- de_protein_list[grepl(anticodon, names(de_protein_list))]
KOs_with_anticodon_names <- names(KOs_with_anticodon)
# This is so I don't process anticodons for which there is only one KO - there is an error if I do so
if (length(KOs_with_anticodon) > 1) {
# Create the matrix where I will add one-hot encoded columns for each KO
all_proteins_anticodon <- unique(unlist(KOs_with_anticodon))
df_to_upset <- data.frame(Proteins = all_proteins_anticodon)
# Iterate over the KO strains and add a one-hot encoded column for each of them, for presence/absence of that protein among the DE prots in that strain
for (j in 1:length(KOs_with_anticodon_names)) {
KO <- KOs_with_anticodon_names[j]
proteins <- KOs_with_anticodon[[KO]]
df_to_upset[,KO] <- all_proteins_anticodon %in% proteins
}
# Now that we have the dataframe, get the Upset plot and save it to the list
## Using ComplexUpset
ComplexUpset::upset(data = df_to_upset,
intersect = KOs_with_anticodon_names,
name='KO strain',
width_ratio=0.1,
mode = "intersect") +
ggtitle(label = "Intersection in DE proteins",
subtitle = glue("Across KOs for tRNAs with {anticodon}"))
image_name <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/upset/upset_", anticodon, ".png", sep="")
ggsave(filename = image_name, width = 8, height = 5)
}
}
#dev.off()
