# First iteration through the strains
for (i in 1:length(strains)) {
strain_1 <- strains[i]
proteins_strain_1 <- de_protein_list[[strain_1]]
# Second iteration through the strains
for (j in 1:length(strains)) {
strain_2 <- strains[j]
proteins_strain_2 <- de_protein_list[[strain_2]]
# Make sure we are not comparing a strain to itself
condition_1 = strain_1 != strain_2
# Also make sure that we haven't added this pair of strains before already
strain_pair <- paste(sort(c(strain_1, strain_2)), collapse = ",")
condition_2 = !(strain_pair %in% observed_pairs)
# If both these conditions are covered, analyze the pair of strains and add their characteristics to the output vectors
if (condition_1 & condition_2) {
strains_1 <- c(strains_1, strain_1)
strains_2 <- c(strains_2, strain_2)
protein_number_1 <- c(protein_number_1, length(proteins_strain_1))
protein_number_2 <- c(protein_number_2, length(proteins_strain_2))
protein_names_1 <- c(protein_names_1, paste(proteins_strain_1, collapse = ","))
protein_names_2 <- c(protein_names_2, paste(proteins_strain_2, collapse = ","))
overlap <- c(overlap, paste(intersect(proteins_strain_1, proteins_strain_2), collapse = ","))
overlap_size <- c(overlap_size, length(intersect(proteins_strain_1, proteins_strain_2)))
observed_pairs <- c(observed_pairs, paste(sort(c(strain_1, strain_2)), collapse = ","))
}
}
}
DE_protein_overlaps <- data.frame(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, protein_names_1, protein_names_2, overlap)
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(overlap_over_strain_1 = overlap_size/protein_number_1,
overlap_over_strain_2 = overlap_size/protein_number_2,
overlap_over_union = overlap_size/(protein_number_1+protein_number_2),
overlap_over_log_union = overlap_size/log2(protein_number_1+protein_number_2),
Jaccard_index = overlap_size/(protein_number_1+protein_number_2-overlap_size))
# Match to strain_1
DE_protein_overlaps <- DE_protein_overlaps %>%
rename(Strain.Name = strains_1)
temp <- responsiveness %>%
dplyr::select(Strain.Name, anticodon, Amino_acid_1_letter, chromosome_letter, amino_acid_type, amino_acid_charge)
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
rename(anticodon_1 = anticodon,
Amino_acid_1 = Amino_acid_1_letter,
chr_1 = chromosome_letter,
aa_type_1 = amino_acid_type,
aa_charge_1 = amino_acid_charge)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
rename(strains_1 = Strain.Name,
Nt_at_30_1 = Nt_at_30,
Nt_at_31_1 = Nt_at_31,
Nt_at_32_1 = Nt_at_32,
Nt_at_33_1 = Nt_at_33,
Nt_at_34_1 = Nt_at_34,
Nt_at_35_1 = Nt_at_35,
Nt_at_36_1 = Nt_at_36,
Nt_at_37_1 = Nt_at_37,
Nt_at_38_1 = Nt_at_38,
Nt_at_39_1 = Nt_at_39,
Nt_at_40_1 = Nt_at_40,
Strain.Name = strains_2)
View(temp)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
View(temp)
View(master_dataset)
## Column saying if there is a U in position 34 (the one that binds the last nucleotide in the codon), and a couple things more
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(grepl("\\(U", Strain.Name) ~ T,
TRUE ~ F),
A_34 = case_when(grepl("\\(A", Strain.Name) ~ T,
TRUE ~ F),
Nt_at_30 = substr(mature_sequence, 30, 30),
Nt_at_31 = substr(mature_sequence, 31, 31),
Nt_at_32 = substr(mature_sequence, 32, 32),
Nt_at_33 = substr(mature_sequence, 33, 33),
Nt_at_34 = substr(mature_sequence, 34, 34),
Nt_at_35 = substr(mature_sequence, 35, 35),
Nt_at_36 = substr(mature_sequence, 36, 36),
Nt_at_37 = substr(mature_sequence, 37, 37),
Nt_at_38 = substr(mature_sequence, 38, 38),
Nt_at_39 = substr(mature_sequence, 39, 39),
Nt_at_40 = substr(mature_sequence, 40, 40))
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep=""))
# Prepare for iterations, create empty vectors to which I will save the information (and from which I'll create a dataframe afterwards)
observed_pairs <- c()
strains <- names(de_protein_list)
strains_1 <- c()
strains_2 <- c()
protein_number_1 <- c()
protein_number_2 <- c()
protein_names_1 <- c()
protein_names_2 <- c()
overlap <- c()
overlap_size <- c()
# First iteration through the strains
for (i in 1:length(strains)) {
strain_1 <- strains[i]
proteins_strain_1 <- de_protein_list[[strain_1]]
# Second iteration through the strains
for (j in 1:length(strains)) {
strain_2 <- strains[j]
proteins_strain_2 <- de_protein_list[[strain_2]]
# Make sure we are not comparing a strain to itself
condition_1 = strain_1 != strain_2
# Also make sure that we haven't added this pair of strains before already
strain_pair <- paste(sort(c(strain_1, strain_2)), collapse = ",")
condition_2 = !(strain_pair %in% observed_pairs)
# If both these conditions are covered, analyze the pair of strains and add their characteristics to the output vectors
if (condition_1 & condition_2) {
strains_1 <- c(strains_1, strain_1)
strains_2 <- c(strains_2, strain_2)
protein_number_1 <- c(protein_number_1, length(proteins_strain_1))
protein_number_2 <- c(protein_number_2, length(proteins_strain_2))
protein_names_1 <- c(protein_names_1, paste(proteins_strain_1, collapse = ","))
protein_names_2 <- c(protein_names_2, paste(proteins_strain_2, collapse = ","))
overlap <- c(overlap, paste(intersect(proteins_strain_1, proteins_strain_2), collapse = ","))
overlap_size <- c(overlap_size, length(intersect(proteins_strain_1, proteins_strain_2)))
observed_pairs <- c(observed_pairs, paste(sort(c(strain_1, strain_2)), collapse = ","))
}
}
}
DE_protein_overlaps <- data.frame(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, protein_names_1, protein_names_2, overlap)
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(overlap_over_strain_1 = overlap_size/protein_number_1,
overlap_over_strain_2 = overlap_size/protein_number_2,
overlap_over_union = overlap_size/(protein_number_1+protein_number_2),
overlap_over_log_union = overlap_size/log2(protein_number_1+protein_number_2),
Jaccard_index = overlap_size/(protein_number_1+protein_number_2-overlap_size))
# Match to strain_1
DE_protein_overlaps <- DE_protein_overlaps %>%
rename(Strain.Name = strains_1)
temp <- responsiveness %>%
dplyr::select(Strain.Name, anticodon, Amino_acid_1_letter, chromosome_letter, amino_acid_type, amino_acid_charge)
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
rename(anticodon_1 = anticodon,
Amino_acid_1 = Amino_acid_1_letter,
chr_1 = chromosome_letter,
aa_type_1 = amino_acid_type,
aa_charge_1 = amino_acid_charge)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
rename(strains_1 = Strain.Name,
Nt_at_30_1 = Nt_at_30,
Nt_at_31_1 = Nt_at_31,
Nt_at_32_1 = Nt_at_32,
Nt_at_33_1 = Nt_at_33,
Nt_at_34_1 = Nt_at_34,
Nt_at_35_1 = Nt_at_35,
Nt_at_36_1 = Nt_at_36,
Nt_at_37_1 = Nt_at_37,
Nt_at_38_1 = Nt_at_38,
Nt_at_39_1 = Nt_at_39,
Nt_at_40_1 = Nt_at_40,
Strain.Name = strains_2)
# Match to strain_2
temp <- responsiveness %>%
dplyr::select(Strain.Name, anticodon, Amino_acid_1_letter, chromosome_letter, amino_acid_type, amino_acid_charge)
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
rename(anticodon_2 = anticodon,
Amino_acid_2 = Amino_acid_1_letter,
aa_type_2 = amino_acid_type,
aa_charge_2 = amino_acid_charge,
chr_2 = chromosome_letter)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
rename(strains_2 = Strain.Name,
Nt_at_30_2 = Nt_at_30,
Nt_at_31_2 = Nt_at_31,
Nt_at_32_2 = Nt_at_32,
Nt_at_33_2 = Nt_at_33,
Nt_at_34_2 = Nt_at_34,
Nt_at_35_2 = Nt_at_35,
Nt_at_36_2 = Nt_at_36,
Nt_at_37_2 = Nt_at_37,
Nt_at_38_2 = Nt_at_38,
Nt_at_39_2 = Nt_at_39,
Nt_at_40_2 = Nt_at_40)
# Come up with columns that require matching between these 2 sets of them
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(same_family = anticodon_1 == anticodon_2,
same_amino_acid = Amino_acid_1 == Amino_acid_2,
same_chromosome = chr_1 == chr_2,
same_family_and_chr = same_family&same_chromosome,
same_amino_acid_and_chr = same_amino_acid&same_chromosome,
same_aa_type = aa_type_1 == aa_type_2,
same_aa_charge = aa_charge_1 == aa_charge_2,
Nt_at_30 = Nt_at_30_1 == Nt_at_30_2,
Nt_at_31 = Nt_at_31_1 == Nt_at_31_2,
Nt_at_32 = Nt_at_32_1 == Nt_at_32_2,
Nt_at_33 = Nt_at_33_1 == Nt_at_33_2,
Nt_at_34 = Nt_at_34_1 == Nt_at_34_2,
Nt_at_35 = Nt_at_35_1 == Nt_at_35_2,
Nt_at_36 = Nt_at_36_1 == Nt_at_36_2,
Nt_at_37 = Nt_at_37_1 == Nt_at_37_2,
Nt_at_38 = Nt_at_38_1 == Nt_at_38_2,
Nt_at_39 = Nt_at_39_1 == Nt_at_39_2,
Nt_at_40 = Nt_at_40_1 == Nt_at_40_2) %>%
dplyr::select(-c(Nt_at_30_1, Nt_at_31_1, Nt_at_32_1, Nt_at_33_1, Nt_at_34_1, Nt_at_35_1, Nt_at_36_1, Nt_at_37_1, Nt_at_38_1, Nt_at_39_1, Nt_at_40_1,
Nt_at_30_2, Nt_at_31_2, Nt_at_32_2, Nt_at_33_2, Nt_at_34_2, Nt_at_35_2, Nt_at_36_2, Nt_at_37_2, Nt_at_38_2, Nt_at_39_2, Nt_at_40_2))
# Get columns based on strain_1 and strain_2, but which reorganize this: the one with more DEPs to one column, the one with less DEPs to the other
# Just so that I can check the overlap_size/amount of DEPs in the KO strain with less out of the pair. Not sure if too important but oh well
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(Strain_more_DEPs = max(protein_number_1, protein_number_2),
Strain_less_DEPs = min(protein_number_1, protein_number_2),
Ratio_more_to_less_DEPs = Strain_more_DEPs/Strain_less_DEPs)
# Add columns where I combine the strings for the anticodons and amino acids for the 2 strains (always using sort() before so that they are unique)
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(both_anticodons = paste(sort(c(anticodon_1, anticodon_2)), collapse = "-"),
both_amino_acids = paste(sort(c(Amino_acid_1, Amino_acid_2)), collapse = "-"),
both_aa_types = paste(sort(c(aa_type_1, aa_type_2)), collapse = "-"),
both_aa_charges = paste(sort(c(aa_charge_1, aa_charge_2)), collapse = "-"))
# Put columns with protein names as the last ones
DE_protein_overlaps <- DE_protein_overlaps %>%
relocate(protein_names_1, .after = last_col()) %>%
relocate(protein_names_2, .after = last_col()) %>%
relocate(overlap, .after = last_col())
if (alpha == 0.01) {
fwrite(DE_protein_overlaps, paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep=""))
}
if (alpha == 0.05) {
fwrite(DE_protein_overlaps, paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep=""))
}
#' This functions needs to receive as input a dataframe where we want to perform the test for all the columns! Except for one column which is the one containing the Jaccard Index, and which needs to be called "Jaccard_index"
#'
perform_chi_square_and_wmw_return_pvalues_and_effect_sizes <- function(DE_protein_overlaps) {
# Create some vectors to collect the outcome
variables <- c()
p_vals_chi_square <- c()
true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
for (i in 1:length(columns)) {
# Save the name of the variable we are testing for
variable <- columns[i]
variables <- c(variables, variable)
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable][,1]))
p_vals_chi_square <- c(p_vals_chi_square, chisq.test(data)$p.value)
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop                         # This means the proportion of 0s in the False group is almost double that in the True group???
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, true_to_false_ratio)
## Wilcoxon-Mann Whitney test for the non-zero values
temp <- DE_protein_overlaps %>%
filter(Jaccard_index != 0)
x <- temp$Jaccard_index[temp[colnames(temp) == variable] == T]
y <- temp$Jaccard_index[temp[colnames(temp) == variable] == F]
p_vals_wmw <- c(p_vals_wmw, wilcox.test(x, y)$p.value)
# Wilcoxon-Mann Whitney effect size
effect_size_directions_wmw <- c(effect_size_directions_wmw, mean(x)-mean(y))
}
# Put it all together and return it
p_values_chisq_and_wmw <- data.frame(variables, p_vals_chi_square, true_to_false_ratio_chi_square, p_vals_wmw, effect_size_directions_wmw)
return(p_values_chisq_and_wmw)
}
# Define the columns we want to provide as input for the above defined function - to test (Chi-square and WMW) the Jaccard Indexes across their levels
df <- DE_protein_overlaps %>%
dplyr::select(Jaccard_index,
same_amino_acid,
same_family,
same_chromosome,
same_amino_acid_and_chr,
same_family_and_chr,
same_aa_charge,
same_aa_type,
Nt_at_30,
Nt_at_31,
Nt_at_32,
Nt_at_33,
Nt_at_34,
Nt_at_35,
Nt_at_36,
Nt_at_37,
Nt_at_38,
Nt_at_39,
Nt_at_40)
# Perform testing and save p-values and effect sizes
p_values_chisq_and_wmw <- perform_chi_square_and_wmw_return_pvalues_and_effect_sizes(df)
DE_protein_overlap <- df
i = 2
variables <- c()
p_vals_chi_square <- c()
true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
# Save the name of the variable we are testing for
variable <- columns[i]
variables <- c(variables, variable)
# Define the columns we want to provide as input for the above defined function - to test (Chi-square and WMW) the Jaccard Indexes across their levels
df <- DE_protein_overlaps %>%
dplyr::select(Jaccard_index,
same_amino_acid,
same_family,
same_chromosome,
same_amino_acid_and_chr,
same_family_and_chr,
same_aa_charge,
same_aa_type,
Nt_at_30,
Nt_at_31,
Nt_at_32,
Nt_at_33,
Nt_at_34,
Nt_at_35,
Nt_at_36,
Nt_at_37,
Nt_at_38,
Nt_at_39,
Nt_at_40)
# Protein overlaps
if (alpha == 0.01) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep="")))
}
if (alpha == 0.05) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep="")))
}
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep = "")))
variable <- "same_amino_acid"
variables <- c()
p_vals_chi_square <- c()
true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable][,1]))
variable <- "Nt_at_40"
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable][,1]))
p_vals_chi_square <- c(p_vals_chi_square, chisq.test(data)$p.value)
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop                         # This means the proportion of 0s in the False group is almost double that in the True group???
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, true_to_false_ratio)
## Wilcoxon-Mann Whitney test for the non-zero values
temp <- DE_protein_overlaps %>%
filter(Jaccard_index != 0)
x <- temp$Jaccard_index[temp[colnames(temp) == variable] == T]
y <- temp$Jaccard_index[temp[colnames(temp) == variable] == F]
p_vals_wmw <- c(p_vals_wmw, wilcox.test(x, y)$p.value)
# Wilcoxon-Mann Whitney effect size
effect_size_directions_wmw <- c(effect_size_directions_wmw, mean(x)-mean(y))
#' This functions needs to receive as input a dataframe where we want to perform the test for all the columns! Except for one column which is the one containing the Jaccard Index, and which needs to be called "Jaccard_index"
#'
perform_chi_square_and_wmw_return_pvalues_and_effect_sizes <- function(DE_protein_overlaps) {
# Create some vectors to collect the outcome
variables <- c()
p_vals_chi_square <- c()
true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
for (i in 1:length(columns)) {
# Save the name of the variable we are testing for
variable <- columns[i]
variables <- c(variables, variable)
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable][,1]))
p_vals_chi_square <- c(p_vals_chi_square, chisq.test(data)$p.value)
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[colnames(DE_protein_overlaps) == variable] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop                         # This means the proportion of 0s in the False group is almost double that in the True group???
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, true_to_false_ratio)
## Wilcoxon-Mann Whitney test for the non-zero values
temp <- DE_protein_overlaps %>%
filter(Jaccard_index != 0)
x <- temp$Jaccard_index[temp[colnames(temp) == variable] == T]
y <- temp$Jaccard_index[temp[colnames(temp) == variable] == F]
p_vals_wmw <- c(p_vals_wmw, wilcox.test(x, y)$p.value)
# Wilcoxon-Mann Whitney effect size
effect_size_directions_wmw <- c(effect_size_directions_wmw, mean(x)-mean(y))
}
# Put it all together and return it
p_values_chisq_and_wmw <- data.frame(variables, p_vals_chi_square, true_to_false_ratio_chi_square, p_vals_wmw, effect_size_directions_wmw)
return(p_values_chisq_and_wmw)
}
# Define the columns we want to provide as input for the above defined function - to test (Chi-square and WMW) the Jaccard Indexes across their levels
df <- DE_protein_overlaps %>%
dplyr::select(Jaccard_index,
same_amino_acid,
same_family,
same_chromosome,
same_amino_acid_and_chr,
same_family_and_chr,
same_aa_charge,
same_aa_type,
Nt_at_30,
Nt_at_31,
Nt_at_32,
Nt_at_33,
Nt_at_34,
Nt_at_35,
Nt_at_36,
Nt_at_37,
Nt_at_38,
Nt_at_39,
Nt_at_40)
# Perform testing and save p-values and effect sizes
p_values_chisq_and_wmw <- perform_chi_square_and_wmw_return_pvalues_and_effect_sizes(df)
# Make the row descriptions a bit prettier - colnames I need to fix directly in LaTex
p_values_chisq_and_wmw$variables <- c("Carried amino acid", "Anticodon", "Chromosome", "Carried amino acid and chromosome", "Anticodon and chromosome",
"Amino acid charge", "Amino acid type", "Nucleotide at 30", "Nucleotide at 31", "Nucleotide at 32", "Nucleotide at 33",
"Nucleotide at 34", "Nucleotide at 35", "Nucleotide at 36", "Nucleotide at 37", "Nucleotide at 38", "Nucleotide at 39",
"Nucleotide at 40")
# Print it to take it to LaTex
print(xtable(p_values_chisq_and_wmw, label = "p_values_table", digits = c(8)), include.rownames=FALSE)
## Column saying if there is a U in position 34 (the one that binds the last nucleotide in the codon), and a couple things more
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(grepl("\\(U", Strain.Name) ~ T,
TRUE ~ F),
A_34 = case_when(grepl("\\(A", Strain.Name) ~ T,
TRUE ~ F),
Nt_at_1 = substr(mature_sequence, 1, 1),
Nt_at_2 = substr(mature_sequence, 2, 2),
Nt_at_3 = substr(mature_sequence, 3, 3),
Nt_at_4 = substr(mature_sequence, 4, 4),
Nt_at_5 = substr(mature_sequence, 5, 5),
Nt_at_6 = substr(mature_sequence, 6, 6),
Nt_at_7 = substr(mature_sequence, 7, 7),
Nt_at_8 = substr(mature_sequence, 8, 8),
Nt_at_9 = substr(mature_sequence, 9, 9),
Nt_at_10 = substr(mature_sequence, 10, 10),
Nt_at_11 = substr(mature_sequence, 11, 11),
Nt_at_12 = substr(mature_sequence, 12, 12),
Nt_at_13 = substr(mature_sequence, 13, 13),
Nt_at_14 = substr(mature_sequence, 14, 14),
Nt_at_15 = substr(mature_sequence, 15, 15),
Nt_at_16 = substr(mature_sequence, 16, 16),
Nt_at_17 = substr(mature_sequence, 17, 17),
Nt_at_18 = substr(mature_sequence, 18, 18),
Nt_at_19 = substr(mature_sequence, 19, 19),
Nt_at_20 = substr(mature_sequence, 20, 20),
Nt_at_21 = substr(mature_sequence, 21, 21),
Nt_at_22 = substr(mature_sequence, 22, 22),
Nt_at_23 = substr(mature_sequence, 23, 23),
Nt_at_24 = substr(mature_sequence, 24, 24),
Nt_at_25 = substr(mature_sequence, 25, 25),
Nt_at_26 = substr(mature_sequence, 26, 26),
Nt_at_27 = substr(mature_sequence, 27, 27),
Nt_at_28 = substr(mature_sequence, 28, 28),
Nt_at_29 = substr(mature_sequence, 29, 29),
Nt_at_30 = substr(mature_sequence, 30, 30),
Nt_at_31 = substr(mature_sequence, 31, 31),
Nt_at_32 = substr(mature_sequence, 32, 32),
Nt_at_33 = substr(mature_sequence, 33, 33),
Nt_at_34 = substr(mature_sequence, 34, 34),
Nt_at_35 = substr(mature_sequence, 35, 35),
Nt_at_36 = substr(mature_sequence, 36, 36),
Nt_at_37 = substr(mature_sequence, 37, 37),
Nt_at_38 = substr(mature_sequence, 38, 38),
Nt_at_39 = substr(mature_sequence, 39, 39),
Nt_at_40 = substr(mature_sequence, 40, 40),
Nt_at_41 = substr(mature_sequence, 41, 41),
Nt_at_42 = substr(mature_sequence, 42, 42),
Nt_at_43 = substr(mature_sequence, 43, 43),
Nt_at_44 = substr(mature_sequence, 44, 44),
Nt_at_45 = substr(mature_sequence, 45, 45),
Nt_at_46 = substr(mature_sequence, 46, 46),
Nt_at_47 = substr(mature_sequence, 47, 47),
Nt_at_48 = substr(mature_sequence, 48, 48),
Nt_at_49 = substr(mature_sequence, 49, 49),
Nt_at_50 = substr(mature_sequence, 50, 50),
Nt_at_51 = substr(mature_sequence, 51, 51),
Nt_at_52 = substr(mature_sequence, 52, 52),
Nt_at_53 = substr(mature_sequence, 53, 53),
Nt_at_54 = substr(mature_sequence, 54, 54),
Nt_at_55 = substr(mature_sequence, 55, 55),
Nt_at_56 = substr(mature_sequence, 56, 56),
Nt_at_57 = substr(mature_sequence, 57, 57),
Nt_at_58 = substr(mature_sequence, 58, 58),
Nt_at_59 = substr(mature_sequence, 59, 59),
Nt_at_61 = substr(mature_sequence, 61, 61),
Nt_at_62 = substr(mature_sequence, 62, 62),
Nt_at_63 = substr(mature_sequence, 63, 63),
Nt_at_64 = substr(mature_sequence, 64, 64),
Nt_at_65 = substr(mature_sequence, 65, 65),
Nt_at_66 = substr(mature_sequence, 66, 66),
Nt_at_67 = substr(mature_sequence, 67, 67),
Nt_at_68 = substr(mature_sequence, 68, 68),
Nt_at_69 = substr(mature_sequence, 69, 69),)
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep=""))
