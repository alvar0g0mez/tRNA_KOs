temp <- de_proteins_list_001[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_001 <- data.frame(Strain.Name = names(de_proteins_list_001),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_001[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_001 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_001)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_001[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
universe = my_universe,
maxGSSize = 200)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_001[[names(de_proteins_list_entrez_ID_001)[i]]] <- go_results
}
}
}
# Check how much correlation there is between strains having many DEPs and strains showing some GO enrichment results
has_go_results <- c()
number_of_go_terms <- c()
for (i in 1:nrow(de_prots_per_strain_001)) {
strain <- de_prots_per_strain_001$Strain.Name[i]
if (strain %in% names(go_results_list_001)) {
has_go_results <- c(has_go_results, "Yes")
number_of_go_terms <- c(number_of_go_terms, nrow(go_results_list_001[[strain]]))
}
else {
has_go_results <- c(has_go_results, "No")
number_of_go_terms <- c(number_of_go_terms, 0)
}
}
de_prots_per_strain_001$GO_results_bp <- has_go_results
de_prots_per_strain_001$num_of_go_terms_bp <- number_of_go_terms
de_prots_per_strain_001 <- left_join(de_prots_per_strain_001, master_dataset, by = "Strain.Name")
write_json(go_results_list_001, path = paste(base_dir, "Data/Other/enrichment_analysis/go_results_list_001.json", sep=""), pretty = T)
de_proteins_list_entrez_ID_005 <- list()
for (i in 1:length(de_proteins_list_005)) {
temp <- data.frame("Protein_stable_ID" = de_proteins_list_005[[i]])
temp <- left_join(temp, entrez_db, by = "Protein_stable_ID")
temp <- temp$`NCBI_gene_(formerly_Entrezgene)_ID`
de_proteins_list_entrez_ID_005[[i]] <- temp
}
names(de_proteins_list_entrez_ID_005) <- names(de_proteins_list_005)
de_prots_per_strain <- c()
for (i in 1:length(de_proteins_list_005)) {
temp <- de_proteins_list_005[[i]]
de_prots_per_strain <- c(de_prots_per_strain, length(temp))
}
de_prots_per_strain_005 <- data.frame(Strain.Name = names(de_proteins_list_005),
nDEP = de_prots_per_strain) %>%
filter(Strain.Name != "WT")
# Come up with background (all proteins detected)
my_universe <- as.character(de_proteins_list_entrez_ID_005[["WT"]])
# Create empty list for GO results, perform GO for each KO strain, and store them there
go_results_list_005 <- list()
for (i in 2:length(de_proteins_list_entrez_ID_005)) {
proteins_detected <- as.character(de_proteins_list_entrez_ID_005[[i]])
if (length(proteins_detected) > 0) {
go_results <- enrichGO(gene = proteins_detected,
OrgDb = "org.Sc.sgd.db",
keyType = "ENTREZID",
ont = "ALL",
universe = my_universe)
go_results <- as.data.frame(go_results)
if (nrow(go_results) > 0) {
go_results_list_005[[names(de_proteins_list_entrez_ID_005)[i]]] <- go_results
}
}
}
de_prots_per_strain_005 <- left_join(de_prots_per_strain_005, master_dataset, by = "Strain.Name")
write_json(go_results_list_005, path = paste(base_dir, "Data/Other/enrichment_analysis/go_results_list_005.json", sep=""), pretty = T)
View(go_results_list_001)
View(go_results_list_005)
# Grab the strains in here and put them into a vector so I can filter the EA results by them
paired_major_strains <- c(as.character(DE_protein_overlaps_major_within_family$strains_1),as.character(DE_protein_overlaps_major_within_family$strains_2))
# Keep only those we are interested in
go_results_list_001_filtered <- go_results_list_001[[names(go_results_list_001) %in% paired_major_strains]]
sum(names(go_results_list_001) %in% paired_major_strains)
names(go_results_list_001) %in% paired_major_strains
# Keep only those we are interested in
go_results_list_001_filtered <- go_results_list_001[names(go_results_list_001) %in% paired_major_strains]
View(go_results_list_001_filtered)
# Keep only those we are interested in
go_results_list_005_filtered <- go_results_list_005[names(go_results_list_005) %in% paired_major_strains]
View(go_results_list_005_filtered)
# Need to look deeper into this for sure, but so far I only get EA results for 2 major KOs, let's compare those
gca_b <- go_results_list_005_filtered[["tC(GCA)B"]]$Description
gca_p2 <- go_results_list_005_filtered[["tC(GCA)P2"]]$Description
gca_b
gca_p2
gca_b
gca_p2
View(responsiveness)
View(de_proteins_list_001)
View(de_proteins_list_005)
a <- unlist(de_proteins_list_001)
b <- unlist(de_proteins_list_005)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# Merge with master dataframe
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Remove annoying unnecessary (?) column (UniProt IDs)
if (dataset == "outlier_removed")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-sample) %>%
rename(genes = X) %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%                         # Remove rows for which "genes" column is empty or has "Genes" as value
column_to_rownames(var = 'genes')}                                                # Convert gene name column to rownames
if (dataset == "batchcorrected_onWTs")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-Protein.Group) %>%
dplyr::rename(genes = Genes) %>%
column_to_rownames(var = 'genes')}
# Come up with new colnames
new_names <- c()
current_names <- colnames(proteomics_raw)
new_names <- c(new_names, as.character(sample_layout$final_protemics_colnames[match(current_names, sample_layout$raw_proteomics_colnames)]))
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[, colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
dplyr::select(!contains('QC'))                                 # Remove QCs columns
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Remove the sub-batch that went wrong
if (dataset == "outlier_removed") {
samples_in_wrong_batch <- sample_layout$final_protemics_colnames[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
}
# Turn the rownames to all be systematic gene names rather than standard and systematic mixed
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
old_rownames <- rownames(trna_ko)
new_rownames <- match_systematic_and_standard_protein_names(data = old_rownames,
yeastmine = yeastmine,
input = "standard",
simplify = T)
rownames(trna_ko) <- new_rownames
# Save this last dataset for later usage elsewhere
#if (dataset == "outlier_removed") {
#  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_outlier_removed.tsv", sep=""), row.names = T)
#}
#if (dataset == "batchcorrected_onWTs") {
#  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep=""), row.names = T)
#}
fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep=""), row.names = T)
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, out, i, new_names, samples_in_wrong_batch, current_names, old_rownames, new_rownames, yeastmine)
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_protemics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Fit linear model
fit <- lmFit(trna_ko_log, mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', number = Inf, sort.by = 'none')
}
# At the alpha specified at the top of the document
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_001 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
temp <- na.omit(temp)
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[(temp$adj.P.Val < alpha) &
(temp$logFC > lfc_threshold | temp$logFC < -lfc_threshold)]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_001[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep="")
write_json(de_proteins_list_001, path=output_file)
# At alpha= 0.05
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_005 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[(na.omit(temp$adj.P.Val) < 0.05) &
((na.omit(temp$logFC) > lfc_threshold) | (na.omit(temp$logFC) < - lfc_threshold))]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_005[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep="")
write_json(de_proteins_list_005, path=output_file)
write_json(da, path=paste(base_dir, "Data/Other/enrichment_analysis/da.json", sep=""), pretty = T)
# Format data
da <- bind_rows(da) %>%
mutate(protein = rep(rownames(da[[1]]), times = length(da)),
Strain.Name = rep(names(da), each = nrow(da[[1]])), .before = 1) %>%
`rownames<-`(NULL) %>%
dplyr::select(protein, Strain.Name, logFC, adj.P.Val) %>%
filter(Strain.Name != 'WT') %>%                              # From here on in this function it's added by me
mutate(diffexpressed = case_when(logFC > lfc_threshold & adj.P.Val < alpha ~ "Up_regulated",
logFC < -lfc_threshold & adj.P.Val < alpha ~ "Down_regulated",
TRUE ~ "Not_significant"))
# Add a column to da with the number of replicates per KO - by me
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(Amino_acid_1_letter = str_sub(Strain.Name, 2, 2),
chromosome_letter = substr(Strain.Name, 8, 8),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))")) %>%
arrange(Amino_acid_1_letter) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Add all amino acid names
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
responsiveness <- left_join(responsiveness, amino_acids, by = "Amino_acid_1_letter")
# Save responsiveness dataset
fwrite(responsiveness, paste(base_dir, "Data/responsiveness.csv", sep=""))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(amino_acids, DE, de_proteins_list_001, de_proteins_list_005, fit, fit2, KOs_replicates, mm, temp, trna_ko_log,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, trna_levels, unique_KOs, trna_ko)
# One plot per KO and save them to a PDF - for all KOs
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(levels(as.factor(da$Strain.Name)))) {
trna <- levels(as.factor(da$Strain.Name))[i]
temp <- da %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(0.01), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = trna) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Volcano_plots/volcano_plots_per_KO_all_KOs_together.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# One plot per KO and save them to a PDF - only for KOs with at least 1 DE protein
## Remove KOs with 0 DE proteins
KOs_with_DE_proteins <- responsiveness$Strain.Name[responsiveness$nDEP > 0]
da_only_KOs_with_DE_proteins <- da[da$Strain.Name %in% KOs_with_DE_proteins,]
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(KOs_with_DE_proteins)) {
trna <- KOs_with_DE_proteins[i]
temp <- da_only_KOs_with_DE_proteins %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-lfc_threshold, lfc_threshold), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = trna) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Volcano_plots/volcano_plots_per_KO_KOs_with_DE_proteins_together.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_with_DE_proteins", "temp", "da_only_KOs_with_DE_proteins", "trna", "i", "output_file"))
# Load their phenotypic data: growth rate and growth yield for all KOs
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep = "")))
# Just number of DE proteins
UCU_major_minor <- phenotypic_data %>%
filter(UCU_family != "No") %>%
dplyr::select(gene_name, UCU_family) %>%
dplyr::rename(Strain.Name = gene_name)
UCU_responsiveness <- responsiveness%>% filter(anticodon == "UCU")
UCU_family <- full_join(UCU_major_minor, UCU_responsiveness, by = "Strain.Name")
# Volcano plots
## Keep only KOs in UCU family
KOs_in_UCU_family <- UCU_family$Strain.Name
da_only_KOs_from_UCU_family <- da[da$Strain.Name %in% KOs_in_UCU_family,]
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(KOs_in_UCU_family)) {
trna <- KOs_in_UCU_family[i]
plot_title <- paste(trna, UCU_family$UCU_family[UCU_family$Strain.Name == trna], sep = "_")
temp <- da_only_KOs_from_UCU_family %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = plot_title) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_location <- paste(base_dir, "Output/Plots/Volcano_plots/volcano_plots_per_KO_UCU_family_together.pdf", sep="")
ggsave(
filename = output_location,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unused objects
rm(list = c("my_grobs", "plot_list", "KOs_in_UCU_family", "temp", "da_only_KOs_from_UCU_family", "trna", "plot_title", "UCU_major_minor", "UCU_responsiveness", "i", "UCU_family", "phenotypic_data", "output_location"))
ggplot(data = responsiveness, aes(x = as.factor(Replicate_num), y = nDEP, col = as.factor(Replicate_num))) +
geom_boxplot() +
geom_jitter(position=position_jitter(0.2)) +
theme_light() +
xlab("Number of replicates")
replicate_num_vs_nDEP_cor <- cor(responsiveness$nDEP, responsiveness$Replicate_num)
replicate_num_vs_nDEP_cor
# Remove unnecessary objects
rm(replicate_num_vs_nDEP_cor)
responsiveness <- responsiveness %>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
ggplot(data = responsiveness, aes(x = anticodon, y = nDEP, fill = Family_count)) +
geom_boxplot() +
theme_light() +
xlab("Anticodon") +
labs(fill = "Genes in\nfamily",
title = "Number of DE proteins per family",
subtitle = "Colored by number of tRNA genes in the family") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(data = responsiveness, aes(x = Family_count, y = nDEP)) +
geom_boxplot() +
theme_light() +
xlab("Family count") +
ylab("nDEP")
View(responsiveness)
ggplot(data = responsiveness, aes(x = as.factor(Family_count), y = nDEP)) +
geom_boxplot() +
theme_light() +
xlab("Family count") +
ylab("nDEP")
ggplot(data = responsiveness, aes(x = as.factor(Family_count), y = nDEP)) +
geom_boxplot() +
theme_light() +
xlab("Family count") +
ylab("nDEP") +
coord_cartesian(ylim = c(0, 150))
ggplot(data = responsiveness, aes(x = as.factor(Family_count), y = nDEP)) +
geom_point() +
theme_light() +
xlab("Family count") +
ylab("nDEP") +
coord_cartesian(ylim = c(0, 150))
ggplot(data = responsiveness, aes(x = as.factor(Family_count), y = nDEP)) +
geom_boxplot() +
theme_light() +
xlab("Family count") +
ylab("nDEP") +
coord_cartesian(ylim = c(0, 150))
