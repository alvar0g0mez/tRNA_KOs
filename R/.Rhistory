geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Strain.Type") +
theme_light()
# Label by Analysis.Plate.96_Replicate
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.96_Replicate")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.96_Analysis.Plate.384 - complete") +
theme_light()
# Label by Wrong_batch
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Wrong_batch")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Wrong_batch - full data") +
theme_light()
# Label by chromosome
# Label by anticodon
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Anticodon")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by anticodon") +
theme_light()
# Label by amino acid
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Best_isotype_model")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by amino acid") +
theme_light()
# Label by intron in the tRNA gene
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Intron")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - intron in the tRNA gene") +
theme_light()
# Label by whether they are iMet or not
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "iMet")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by whether they are iMet or not") +
theme_light()
# Label by gene seq length
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "length_DNA_seq")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by gene seq length") +
theme_light()
# Label by mature seq length
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "length_mature_seq")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by mature seq length") +
theme_light()
rm(PCA_tags, var_exp_PC1, var_exp_PC2, var_explained, get_PCA_tags, PC, PCA_data, results_PCA)
# Add column with subbatches to stats file
stats_file <- left_join(stats_file, sample_layout[,c("File.Name", "Analysis.Plate.96", "Replicate", "Analysis.Plate.96_Replicate", "Strain.Type",
"Wrong_batch", "date", "Injection_Order", "Date_Injection_Order")], by = "File.Name")
temp <- stats_file %>%
mutate(QCs = case_when(Analysis.Plate.96 == "QC" ~"QC",
TRUE ~ "Not"))
# Plot precursor number vs. protein number coloring by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = temp, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(Replicate))) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. protein number, color by whether they are in the wrong batch or not
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_wrong_batch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Wrong_batch)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot protein number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by date
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_date.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = as.factor(date))) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. MS1.Signal coloring by sub-batch
ggplot(data = stats_file, aes(x = MS1.Signal, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
# Precs vs. proteins
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by batch/384-well plate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(Replicate))) +
geom_point() +
theme_light()
# Precs vs. proteins, color by 96-well plate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by 96-well plate_Replicate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by date
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(date))) +
geom_point() +
theme_light()
# Precs vs. proteins, color by KO or WT
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Strain.Type)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by Date_Injection_Order - doesn't really work, needs to be a factor and it has way too many levels
#ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Date_Injection_Order)) +
#  geom_point() +
#  theme_light()
# Precs vs. proteins, color by Injection_Order
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Injection_Order)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by Date+Injection_Order
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = date+Injection_Order)) +
geom_point() +
theme_light()
# Get a dataframe with the number of precursors and proteins and so on, but from the processed data
## Precursor level
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes))
Total.Precursor.Sum <- c()
Precursor.Count <- c()
Sample.ID.unique <- str_replace_all(colnames(report), "-", "_")
for (i in 1:ncol(report)) {
Total.Precursor.Sum <- c(Total.Precursor.Sum, sum(report[,i], na.rm = T))
Precursor.Count <- c(Precursor.Count, sum(!is.na(report[,i])))
}
stats_file_processed <- data.frame(Total.Precursor.Sum, Precursor.Count, Sample.ID.unique) %>%
left_join(sample_layout, by = "Sample.ID.unique")
## Protein level
Total.Protein.Sum <- c()
Protein.Count <- c()
raw_proteomics_colnames <- c()
for (i in 1:ncol(proteomics_processed)) {
Total.Protein.Sum <- c(Total.Protein.Sum, sum(proteomics_processed[,i], na.rm = T))
Protein.Count <- c(Protein.Count, sum(!is.na(proteomics_processed[,i])))
raw_proteomics_colnames <- c(raw_proteomics_colnames, colnames(proteomics_processed)[i])
}
temp <- data.frame(Total.Protein.Sum, Protein.Count, raw_proteomics_colnames)
stats_file_processed <- left_join(temp, stats_file_processed, by = "raw_proteomics_colnames")
ggplot(data = stats_file_processed, aes(x = Total.Precursor.Sum, y = Total.Protein.Sum)) +
geom_point() +
theme_light()
ggplot(data = stats_file_processed, aes(x = Precursor.Count, y = Protein.Count)) +
geom_point() +
theme_light() +
xlab("Precursors.Identified") +
ylab("Proteins.Identified")
# This code is from 2 chunks above
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t() %>%
as.data.frame()
View(report)
# This code is from 2 chunks above
report <- report %>%
t() %>%
as.data.frame()
report$Sample.ID <- as.character(str_replace_all(rownames(report), "-", "_"))
temp <- sample_layout %>%
dplyr::select(Sample.ID, final_proteomics_colnames, Date_Injection_Order)
report <- left_join(report, temp, by = "Sample.ID")
report <- pivot_longer(data = report,
cols = !c(Sample.ID, final_proteomics_colnames, Date_Injection_Order),
names_to = "Whatever",
values_to = "Precursor.Quantity")
# Get the plot
temp <- report[1:4701996,]
ggplot(data = temp, aes(x = Date_Injection_Order, y = log10(Precursor.Quantity))) +
geom_boxplot(outliers = F) +
theme_light() +
theme(panel.grid.major.x = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Total precursor intensity along the injection order, for processed data",
subtitle = "Only the first 1/5 of the data")
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(diann)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
report <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity.tsv"))
View(report)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
View(sample_layout)
library(platetools)
## 1.5. Come up with plate drawings for where the samples were located
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(as.factor(temp$Strain.Type)),
well = temp$Plate.Position,
plate = 384) +
ggtitle("Plate {i} - tRNA KOs") +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
library(viridis)
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(as.factor(temp$Strain.Type)),
well = temp$Plate.Position,
plate = 384) +
ggtitle("Plate {i} - tRNA KOs") +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == 1),
well = temp$Plate.Position,
plate = 384) +
ggtitle("Plate {i} - tRNA KOs") +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
as.numeric(temp$Strain.Type == 1)
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Plate.Position,
plate = 384) +
ggtitle("Plate {i} - tRNA KOs") +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
as.numeric(temp$Strain.Type == "KO")
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
View(sample_layout)
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_"), nchar(Plate.Position)))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_")+1, nchar(Plate.Position)))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_"), nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(susbtr(temp, 1, 1), "0", substr(temp, 3, 3))))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_"), nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(substr(temp, 1, 1), "0", substr(temp, 3, 3))))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_")+1, nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(substr(temp, 1, 1), "0", substr(temp, 3, 3))))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_")+1, nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(substr(temp, 1, 1), "0", substr(temp, 3, 3), sep="")))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_")+1, nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(substr(temp, 1, 1), "0", substr(temp, 2, 2), sep="")))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_")+1, nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(substr(temp, 1, 1), "0", substr(temp, 2, 2), sep=""))) %>%
dplyr::select(-temp)
# Packages
library(dplyr)
library(data.table)
# Set up
working_from = "charite"
# Load data
if (working_from == "home") {
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_Boris.tsv"))
} else {
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
}
# Turn all dashes to underscores
sample_layout <- sample_layout %>%
mutate(Sample.ID = str_replace_all(Sample.ID, "-", "_"),
Sample.ID.unique = str_replace_all(Sample.ID.unique, "-", "_"))
# Grab the position within plate from the Plate.Position column, so that I can use it to obtain plate images with platetools
sample_layout <- sample_layout %>%
mutate(temp = substr(Plate.Position, str_locate(Plate.Position, "_")+1, nchar(Plate.Position)),
Position.Within.Plate = case_when(nchar(temp) == 3 ~ temp,
nchar(temp) == 2 ~ paste(substr(temp, 1, 1), "0", substr(temp, 2, 2), sep=""))) %>%
dplyr::select(-temp)
# Create a column that can match the colnames of the proteomics data as I get it from Boris
sample_layout <- sample_layout %>%
mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
sample_layout <- sample_layout %>%
mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Add some columns - I used to do this in my main analysis file
## Fix the QC rows to say "QC" instead of "NA" in the columns that don't apply
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
## Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
mutate(Injection_Order = str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
## Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
## Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
## Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Save final version
if (working_from == "home") {
fwrite(sample_layout, "/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv")
} else {
fwrite(sample_layout, "S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv")
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Position_Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
View(temp)
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Position.Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Position.Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
View(sample_layout)
version
1+1
version
