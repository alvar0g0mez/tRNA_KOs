sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# Merge with master dataframe
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# Merge with master dataframe
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Remove annoying unnecessary (?) column (UniProt IDs)
if (dataset == "outlier_removed")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-sample) %>%
rename(genes = X) %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%                         # Remove rows for which "genes" column is empty or has "Genes" as value
column_to_rownames(var = 'genes')}                                                # Convert gene name column to rownames
if (dataset == "batchcorrected_onWTs")
{proteomics_raw <- proteomics_raw %>%
dplyr::select(-Protein.Group) %>%
dplyr::rename(genes = Genes) %>%
column_to_rownames(var = 'genes')}
# Come up with new colnames
new_names <- c()
current_names <- colnames(proteomics_raw)
new_names <- c(new_names, as.character(sample_layout$final_proteomics_colnames[match(current_names, sample_layout$raw_proteomics_colnames)]))
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[, colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
dplyr::select(!contains('QC'))                                 # Remove QCs columns
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Remove the sub-batch that went wrong
if (dataset == "outlier_removed") {
samples_in_wrong_batch <- sample_layout$final_proteomics_colnames[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
}
# Turn the rownames to all be systematic gene names rather than standard and systematic mixed
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
old_rownames <- rownames(trna_ko)
new_rownames <- match_systematic_and_standard_protein_names(data = old_rownames,
yeastmine = yeastmine,
input = "standard",
simplify = T)
rownames(trna_ko) <- new_rownames
# Save this last dataset for later usage elsewhere
#if (dataset == "outlier_removed") {
#  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_outlier_removed.tsv", sep=""), row.names = T)
#}
#if (dataset == "batchcorrected_onWTs") {
#  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep=""), row.names = T)
#}
fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep=""), row.names = T)
# Remove unnecessary objects
#rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, out, i, new_names, samples_in_wrong_batch, current_names, old_rownames, new_rownames, yeastmine)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
library(limpa)
# Significance level to be used for all tests and plots in this file
alpha <- 0.05
# Significance level as a plain string to use when loading or writing files
alpha_plain <- str_replace(as.character(alpha), "\\.", "")
# Minimum threshold for the average log2-expression across all samples in order to keep a protein in the data before DE analysis
mean_log2_across_all_samples_threshold <- 2
# Minimum threshold for the variance of the log2-expression across all samples in order to keep a protein in the data before DE analysis
var_across_log2_all_samples_threshold <- 0.6
# Separate significance level, the one used for the enrichment analysis
alpha_enrichment <- 0.05
# Significance level above as a plain string to use when loading or writing files
alpha_enrichment_plain <- str_replace(as.character(alpha_enrichment), "\\.", "")
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included) - THIS I AM NOT USING ANYMORE, AM I?
threshold_major <- 2
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs -
dataset <- "batchcorrected_onWTs"
if (working_from == "charite") {
if (dataset == "outlier_removed") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
# Merge with master dataframe
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# From .RData
load(paste(base_dir, "Data/Other/limpa_analysis/limpa_analysis_results.RData", sep=""))
# From .rds
dpcfit <- readRDS(paste(base_dir, "Data/Other/limpa_analysis/dpcfit.rds", sep=""))
y.protein <- readRDS(paste(base_dir, "Data/Other/limpa_analysis/y.protein.rds", sep=""))
fit <- readRDS(paste(base_dir, "Data/Other/limpa_analysis/fit.rds", sep=""))
# Set this so I don't have to change its name in the code below
trna_ko <- y.protein$E
# Re-run the parts that don't take so long
## Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
## Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
fit <- dpcDE(y.protein, mm)
plotDPC(dpcfit)
plotMDSUsingSEs(y.protein)
## Average expression of each protein across all samples - need to get this working for limpa!!
#hist(rowMeans(y.protein))
#hist(apply(y.protein, 1, var), breaks = 60)
#mean(apply(y.protein, 1, var))
#median(apply(y.protein, 1, var))
View(y.protein)
View(y.protein[["E"]])
View(sample_layout)
# CV checks
proteomics_data_log2_long <- pivot_longer(y.protein$E, cols = everything(), names_to = "final_proteomics_colnames")
# CV checks
proteomics_data_log2_long <- pivot_longer(as.data.frame(y.protein$E), cols = everything(), names_to = "final_proteomics_colnames")
View(proteomics_data_log2_long)
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name)
proteomics_data_log2_long <- left_join(proteomics_data_log2_long, temp_layout, by = "final_proteomics_colnames")
# CV checks
proteomics_data_log2_long <- pivot_longer(as.data.frame(y.protein$E), cols = everything(), names_to = "final_proteomics_colnames")
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name)
proteomics_data_log2_long <- left_join(proteomics_data_log2_long, temp_layout, by = "final_proteomics_colnames")
robust_cv <- function(x, na.rm = TRUE) {
if (na.rm) x <- x[!is.na(x)]
median_x <- median(x)
mad_x <- mad(x)
return(mad_x/median_x)
}
# CV checks
## CV across samples (of the same family - biological replicates)
temp <- as.data.frame(y.protein$E)
temp$protein <- rownames(temp)
proteomics_data_log2_long <- pivot_longer(temp, cols = everything(), names_to = "final_proteomics_colnames")
View(temp)
proteomics_data_log2_long <- pivot_longer(temp, cols = !protein, names_to = "final_proteomics_colnames")
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name)
proteomics_data_log2_long <- left_join(proteomics_data_log2_long, temp_layout, by = "final_proteomics_colnames") %>%
group_by(Strain.Name) %>%
dplyr::mutate(CV_strain = robust_cv(value)) %>%
ungroup() %>%
group_by(protein) %>%
dplyr::mutate(CV_protein = robust_cv(value))
plot_cv_per_protein <- proteomics_data_log2_long %>%
dplyr::select(protein, CV_protein)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light()
plot_cv_per_strain <- proteomics_data_log2_long %>%
dplyr::select(Strain.Name, CV_strain)
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light()
plot_cv_per_protein <- proteomics_data_log2_long %>%
dplyr::select(protein, CV_protein)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                        # remove the vertical grid lines
panel.grid.major.y = element_line( size=.1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                 # remove x axis labels
axis.ticks.x=element_blank()) +                                # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples")
plot_cv_per_strain <- proteomics_data_log2_long %>%
dplyr::select(Strain.Name, CV_strain)
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                        # remove the vertical grid lines
panel.grid.major.y = element_line( size=.1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                 # remove x axis labels
axis.ticks.x=element_blank()) +                                # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins")
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth=.1, color="black"),    # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins") #+
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 2)
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth=.1, color="black"),    # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins") +
geom_text_repel(data = subset(plot_cv_per_strain, CV_strain > 0.35),
aes(x = Strain.Name, y = CV_strain, label = Strain.Name),
size = 2)
plot_cv_per_protein <- proteomics_data_log2_long %>%                       # dataset for plotting CV per protein
dplyr::select(protein, CV_protein) %>%
dplyr::distinct(protein, .keep_all = T)
plot_cv_per_strain <- proteomics_data_log2_long %>%                        # dataset for plotting CV per sample
dplyr::select(Strain.Name, CV_strain) %>%
dplyr::distinct(Strain.Name, .keep_all = T)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 2)
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth=.1, color="black"),    # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins") +
geom_text_repel(data = subset(plot_cv_per_strain, CV_strain > 0.35),
aes(x = Strain.Name, y = CV_strain, label = Strain.Name),
size = 2)
View(plot_cv_per_strain)
plot_cv_per_strain <- proteomics_data_log2_long %>%                        # dataset for plotting CV per sample
dplyr::select(Strain.Name, CV_strain) %>%
dplyr::distinct(Strain.Name, .keep_all = T)
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
View(yeastmine)
length(unique(plot_cv_per_strain$Strain.Name))
plot_cv_per_strain <- proteomics_data_log2_long %>%                        # dataset for plotting CV per sample
dplyr::select(Strain.Name, CV_strain) %>%
dplyr::distinct(Strain.Name, .keep_all = T)
plot_cv_per_strain <- proteomics_data_log2_long %>%                        # dataset for plotting CV per sample
ungroup() %>%
dplyr::select(Strain.Name, CV_strain) %>%
dplyr::distinct(Strain.Name, .keep_all = T)
View(plot_cv_per_strain)
View(plot_cv_per_protein)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth=.1, color="black"),    # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins") +
geom_text_repel(data = subset(plot_cv_per_strain, CV_strain > 0.35),
aes(x = Strain.Name, y = CV_strain, label = Strain.Name),
size = 4)
View(yeastmine)
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
View(yeastmine)
proteins_with_high_CV <- plot_cv_per_protein$protein[plot_cv_per_protein$CV_protein > 0.4]
strains_with_high_CV <- plot_cv_per_strain$Strain.Name[plot_cv_per_strain$CV_strain > 0.35]
View(temp)
# Look at expression of each of the proteins with the high CV in detail
temp <- temp %>%
filter(protein %in% proteins_with_high_CV)
# Look at expression of each of the proteins with the high CV in detail
temp <- temp %>%
dplyr::filter(protein %in% proteins_with_high_CV)
length(unique(colnames(temp)))
