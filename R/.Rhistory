ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Same, but color by amino acid carried - TODO
temp <- resp_and_expression %>%
select(anticodon, AA)
# Histogram of avg_nDEP for each KO strain
ggplot(data = resp_filtered, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# There are ~80 KO strains with 0 avg_nDEP, I don't think it's that straightforward but for now I'll assume those are the minor tRNA genes
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
resp_filtered <- resp_filtered %>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
resp_filtered <- resp_filtered %>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, resp_filtered, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% resp_filtered$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Same, but use in the y axis the % of major tRNAs instead of the count
ggplot(data = temp_2, aes(x = Family_count, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the study") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3| anticodon == "CAA"),
aes(x = Family_count, y = Major_count/Family_count, label = anticodon, col = AA),
size = 4)
# Histogram of avg_nDEP for each KO strain
ggplot(data = resp_filtered, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# There are ~80 KO strains with 0 avg_nDEP, I don't think it's that straightforward but for now I'll assume those are the minor tRNA genes
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
resp_filtered <- resp_filtered %>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
resp_filtered <- resp_filtered %>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, resp_filtered, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% resp_filtered$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Load their small microarray data: fold changes for all genes but only for 5 samples
microarray_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/microarray_fold_change_data.tsv", sep="")))
# Load all S. cerevisiae genes from AllianceMine - to be able to go from standard to systematic gene names and vice versa
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
# Need to change the colnames in the microarray data to use () instead of ..
colnames(microarray_data) <- c("gene_names", "tM(CAU)C", "tR(CCU)J", "tR(UCU)M2", "tH(GUG)G1", "tL(GAG)G")
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA expression") +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
# Plot tRNA abundance from Cozen et al., against log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Same, but color by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA-synthetase abundance") +
xlab("log2-tRNA synthetase abundance (from von der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by family size
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = chromosome.x)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Create function to get anticodon from codon
exchange_individual_nucleotide <- function(nt) {
if (nt == "A") {return("U")}
else if (nt == "C") {return("G")}
else if (nt == "G") {return("C")}
else if (nt == "T") {return("A")}
else if (nt == "U") {return("A")}
else {return("Provided letter is not a nucleotide")}
}
get_anticodon_from_codon <- function(codon) {
anticodon <- ""
for (i in 1:nchar(codon)) {
nt <- substr(codon, i, i)
new_nt <- exchange_individual_nucleotide(nt)
anticodon <- paste(anticodon, new_nt, sep="")
}
return(anticodon)
}
# Get anticodon from codon and rename columns
anticodon_freq <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S1.csv", sep="")))
anticodon_freq$anticodon <- lapply(anticodon_freq[,colnames(anticodon_freq) == "Codon"], get_anticodon_from_codon)
anticodon_freq$anticodon <- as.character(anticodon_freq$anticodon)
anticodon_freq$anticodon <- as.factor(anticodon_freq$anticodon)
anticodon_freq <- anticodon_freq %>%
rename(codon_frequency_chu_2011 = Frequency)
# Merge to resp_and_expression
resp_and_expression <- left_join(resp_and_expression, anticodon_freq, by = "anticodon")
# Codon frequency vs. nDEP
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. codon frequency") +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by tRNA abundance from Cozen et al.
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = mean_reads_per_tRNA)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = log2(synthetase_abundance))) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Codon frequency vs. nDEP - color by family size
ggplot(data = resp_and_expression, aes(x = codon_frequency_chu_2011, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Codon frequency (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# Family_count vs. major_count, as in 1.11., but color by amino acid carried - TODO
temp <- resp_and_expression %>%
select(anticodon, AA)
temp_2 <- left_join(family_sizes, temp, by = "anticodon") %>%
distinct(anticodon, .keep_all = T)
ggplot(data = temp_2, aes(x = Family_count, y = Major_count, col = AA)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count == 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4,
max.overlaps = 100)
# Same, but use in the y axis the % of major tRNAs instead of the count
ggplot(data = temp_2, aes(x = Family_count, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the study") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3| anticodon == "CAA"),
aes(x = Family_count, y = Major_count/Family_count, label = anticodon, col = AA),
size = 4)
# Same, but use in the y axis the % of major tRNAs instead of the count, and color by aa
ggplot(data = temp_2, aes(x = Family_size, y = Major_count/Family_count)) +
geom_point() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in total") +
ylab("% of major genes detected in the family") +
geom_text_repel(data = subset(temp_2, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3 | anticodon == "CAA"),
aes(x = Family_size, y = Major_count/Family_count, label = anticodon, col = AA),
size = 4)
View(resp_and_expression)
View(amino_acids)
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
View(resp_and_expression)
# Plot average nDEP vs. avg expression - color by amino acid type
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# tRNA abundance from Cozen et al., vs. log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
cozen <- read.xlsx(paste(base_dir, "Data/Other/tRNA_expression_comparative/cozen_et_al_2015.xlsx", sep=""), 1) %>%
filter(read.mapping..genomic.sequence.or.mature.tRNA. == "genomic")
cozen_to_merge <- cozen %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA expression") +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Same, but color by number of tRNA genes in family
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Load data
chu_synths <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S3.csv", sep="")))
chu_trnas <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S2.csv", sep="")))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep=""))) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
# Plot average nDEP vs. avg expression - color by amino acid type
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# Plot average nDEP vs. avg expression - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("Sequencing reads per tRNA (from Cozen et al., 2015)") +
ylab("nDEP per tRNA KO")
# tRNA abundance from Cozen et al., vs. log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Same, but color by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# Same, but color by amino acid type
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light()
# Same, but color by amino acid charge
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light()
# Same, but color by amino acid weight
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light()
# tRNA abundance from Cozen et al., vs. log2 tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same, but color by major and minor based on our proteomics
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = Gene_type)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression, but color by tRNA synthetase abundance from Chu et al.
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
# Same, but color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = amino_acid_type)) +
geom_point() +
theme_light()
# Same, but color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = amino_acid_charge)) +
geom_point() +
theme_light()
# Same, but color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = mean_reads_per_tRNA, col = molecular_weight)) +
geom_point() +
theme_light()
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA-synthetase abundance") +
xlab("log2-tRNA synthetase abundance (from von der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by family size
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = chromosome.x)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = chromosome.xy)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. synthetase abundance
ggplot(data = resp_and_expression, aes(x = synthetase_abundance, y = nDEP)) +
geom_point()
# nDEP vs. log2-synthetase abundance
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP)) +
geom_point() +
theme_light() +
labs(title = "nDEP vs. tRNA-synthetase abundance") +
xlab("log2-tRNA synthetase abundance (from von der Haar, 2008)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by family size
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = Family_count)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by chromosome
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = chromosome.y)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid type
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_type)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid charge
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = amino_acid_charge)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
# nDEP vs. log2-synthetase abundance - color by amino acid weight
ggplot(data = resp_and_expression, aes(x = log2(synthetase_abundance), y = nDEP, col = molecular_weight)) +
geom_point() +
theme_light() +
xlab("log2-tRNA synthetase abundance (from Chu et al., 2011)") +
ylab("nDEP per tRNA KO")
