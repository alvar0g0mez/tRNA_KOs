library(tidyr)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
#source("C:/MyStuff/tRNA_KOs/Scripts/R/Mine/0.general_use_functions.R")
# Extract the date for when each sample was run
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"))
# Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
# Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
# Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Come up with new colnames
new_names <- c("sample_group", "genes")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[5:nrow(proteomics_raw), colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
first_rows <- proteomics_raw[1:4, colnames(proteomics_raw) == strain]
out <- c(first_rows[,1], apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%             # Remove rows for which "genes" column is empty or has "Genes" as value
select(-genes & !contains('QC')) %>%                                  # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'sample_group')                              # Convert gene name column to rownames
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Add sample_names to sample_layout so that we can filter out in the next line
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Remove the sub-batch that went wrong
samples_in_wrong_batch <- sample_layout$sample_names[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, first_rows, out, batch_num, i, new_name, new_names, strain_and_batch, trna_name,
samples_in_wrong_batch)
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$sample_names == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# Fit linear model
fit <- lmFit(log2(trna_ko), mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', n = Inf, sort.by = 'none')
}
# Format data
da <- bind_rows(da) %>%
mutate(protein = rep(rownames(da[[1]]), times = length(da)),
Strain.Name = rep(names(da), each = nrow(da[[1]])), .before = 1) %>%
`rownames<-`(NULL) %>%
select(protein, Strain.Name, logFC, adj.P.Val) %>%
filter(Strain.Name != 'WT') %>%                              # From here on in this function it's added by me
mutate(diffexpressed = case_when(logFC > lfc_threshold & adj.P.Val < alpha ~ "Up_regulated",
logFC < -lfc_threshold & adj.P.Val < alpha ~ "Down_regulated",
TRUE ~ "Not_significant"))
# Add a column to da with the number of replicates per KO - by me - THIS DOESN'T REALLY MAKE SENSE INSIDE THIS FUNCTION BUT WHEN DOING DE FOR ALL PLATES AT ONCE IT WAS, SO I'LL KEEP IT JUST IN CASE
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= log2(lfc_threshold) & adj.P.Val <= 0.01, na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(AA = str_sub(Strain.Name, 2, 2),
chromosome = str_extract(str_remove(str_sub(Strain.Name, 1, -4), '[:digit:]$'), '[:alpha:]$'),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))")) %>%
arrange(AA) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
resp = responsiveness)
# Save output with the right names for downstream analysis
resp_filtered <- DE$resp
da_full <- DE$da
# One plot per KO and save them to a PDF - for all KOs
## Come up with the list of plots
plot_list <- list()
for (i in 1:length(levels(as.factor(da$Strain.Name)))) {
trna <- levels(as.factor(da$Strain.Name))[i]
temp <- da %>% filter(Strain.Name == trna)
plot_list[[i]] <- ggplot(data = temp, aes(x = logFC, y = -log10(adj.P.Val), col = diffexpressed)) +
geom_point() +
geom_hline(yintercept = -log10(0.01), linetype = "dashed", col = "gray") +
geom_vline(xintercept = c(-1.5, 1.5), linetype = "dashed", col = "gray") +
theme_light() +
theme(legend.position = "none") +
labs(title = trna) +
scale_color_manual(values = c(Down_regulated = "#80AAFF", Not_significant = "#808080", Up_regulated = "#FF8080"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
ggplot(data = responsiveness, aes(x = as.factor(Replicate_num), y = nDEP, col = as.factor(Replicate_num))) +
geom_boxplot() +
geom_jitter(position=position_jitter(0.2)) +
xlab("Number of replicates")
replicate_num_vs_nDEP_cor <- cor(responsiveness$nDEP, responsiveness$Replicate_num)
replicate_num_vs_nDEP_cor
# Remove unnecessary objects
rm(replicate_num_vs_nDEP_cor)
ea <- list()
for (i in unique(da_full$Strain.Name)) {
ea[[i]] <- pull(filter(da_full, Strain.Name %in% i & abs(logFC) >= log2(lfc_threshold) & adj.P.Val <= alpha), protein)
}
rm(i)
ea <- gost(ea, organism = 'scerevisiae', correction_method = 'fdr', domain_scope = 'custom', custom_bg = unique(da_full$protein), sources = c('GO', 'KEGG', 'TF'))
ea_terms <- ea$result %>%
group_by(query) %>%
summarise(n_terms = n()) %>%
mutate(AA = str_sub(query, 2, 2),
chromosome = str_extract(str_remove(query, '[:digit:]$'), '[:alpha:]$'),
anticodon = str_extract(query, '(?<=\\.)[:alpha:]{3}'))
ea_terms_ko <- ea$result %>%
group_by(term_name) %>%
summarise(n_kos = n(), source = unique(source)) %>%
ungroup() %>%
filter(n_kos > 25)
cozen <- read.xlsx("C:/MyStuff/tRNA_KOs/Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", 1)
# Keep only rows with a single tRNA gene identified, remove those with unknown (NA) gene identified and with NA in the mean.normalized.ReadCount..AlkB column
cozen_single <- cozen %>%
filter(!grepl(",", saccaromyces.genome.datasbase..sgd..tRNA.name) &
saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
read.mapping..genomic.sequence.or.mature.tRNA. == "genomic" &
mean.normalized.ReadCount..AlkB != "NA")
cozen_single_to_merge <- cozen_single %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = mean(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(gene_name = saccaromyces.genome.datasbase..sgd..tRNA.name)
# Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_single_to_merge, by = "gene_name")
View(resp_filtered)
View(cozen_single_to_merge)
cozen <- read.xlsx("C:/MyStuff/tRNA_KOs/Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", 1)
# Keep only rows with a single tRNA gene identified, remove those with unknown (NA) gene identified and with NA in the mean.normalized.ReadCount..AlkB column
cozen_single <- cozen %>%
filter(!grepl(",", saccaromyces.genome.datasbase..sgd..tRNA.name) &
saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
read.mapping..genomic.sequence.or.mature.tRNA. == "genomic" &
mean.normalized.ReadCount..AlkB != "NA")
cozen_single_to_merge <- cozen_single %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = mean(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
# Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_single_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = avg_nDEP)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
cozen <- read.xlsx("C:/MyStuff/tRNA_KOs/Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", 1)
# Keep only rows with a single tRNA gene identified, remove those with unknown (NA) gene identified and with NA in the mean.normalized.ReadCount..AlkB column
cozen_single <- cozen %>%
filter(!grepl(",", saccaromyces.genome.datasbase..sgd..tRNA.name) &
saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA" &
mean.normalized.ReadCount..AlkB != "NA")
## Select columns of interest, get the mean reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_single_to_merge <- cozen_single %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = mean(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_single_to_merge, by = "Strain.Name")
## Plot average nDEP vs. avg expression
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
View(cozen_single)
cozen <- read.xlsx("C:/MyStuff/tRNA_KOs/Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", 1)
# Keep only rows with a single tRNA gene identified, remove those with unknown (NA) gene identified and with NA in the mean.normalized.ReadCount..AlkB column
cozen_single <- cozen %>%
filter(!grepl(",", saccaromyces.genome.datasbase..sgd..tRNA.name) &
saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
read.mapping..genomic.sequence.or.mature.tRNA. == "genomic" &
mean.normalized.ReadCount..AlkB != "NA")
## Select columns of interest, get the mean reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_single_to_merge <- cozen_single %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_single_to_merge, by = "Strain.Name")
## Plot average nDEP vs. avg expression
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light() +
## Plot average nDEP vs. avg expression
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
cozen <- read.xlsx("C:/MyStuff/tRNA_KOs/Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", 1)
# Keep only rows with a single tRNA gene identified, remove those with unknown (NA) gene identified and with NA in the mean.normalized.ReadCount..AlkB column
cozen_single <- cozen %>%
filter(!grepl(",", saccaromyces.genome.datasbase..sgd..tRNA.name) &
saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA" &
mean.normalized.ReadCount..AlkB != "NA")
## Select columns of interest, get the mean reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_single_to_merge <- cozen_single %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_single_to_merge, by = "Strain.Name")
## Plot average nDEP vs. avg expression
ggplot(data = resp_and_expression, aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
View(cozen)
View(cozen)
test <- cozen$saccaromyces.genome.datasbase..sgd..tRNA.name[2]
test_2 <- strsplit(test, ",")
View(test_2)
test_2[[1]]
test_2 <- strsplit(test, ",")[[1]]
which(colnames(cozen) == "saccaromyces.genome.datasbase..sgd..tRNA.name")
cozen <- cozen %>%
select(-c(corresponding.mature.tRNA.or.tRNA.locus.names..RNA.central., genomic.tRNA.database.legacy.names))
new_column <- c()
cozen_split <- data.frame(matrix(nrow = 0, ncol = ncol(cozen)))
colnames(cozen_split) <- colnames(cozen)
for (i in 1:nrow(cozen)) {
trna_names <- cozen$saccaromyces.genome.datasbase..sgd..tRNA.name[i]
if (!grepl(",", trna_names)) {
cozen_split <- rbind(cozen_split, cozen[i,])
new_column <- c(new_column, "Single")
}
else {
trnas_mapped_to <- strsplit(trna_names, ",")[[1]]
for (j in 1:length(trnas_mapped_to)) {
new_row <- cozen[i,]
new_row[which(colnames(cozen) == "saccaromyces.genome.datasbase..sgd..tRNA.name")] <- trnas_mapped_to[j]
cozen_split <- rbind(cozen_split, new_row)
new_column <- c(new_column, "Multiple")
}
}
}
cozen_split$Num_of_tRNAs_originally_in_row <- new_column
View(cozen_split)
## Select columns of interest, get the sum of reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_to_merge <- cozen_single %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA")
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
cozen <- read.xlsx("C:/MyStuff/tRNA_KOs/Data/tRNA_expression_comparative/cozen_et_al_2015.xlsx", 1)
# Split rows with multiple genes identified into multiple rows with a single gene, with the same values in all other columns - add a column identifying whether each row came from an original row with multiple tRNAs or not
cozen <- cozen %>%
select(-c(corresponding.mature.tRNA.or.tRNA.locus.names..RNA.central., genomic.tRNA.database.legacy.names))
new_column <- c()
cozen_split <- data.frame(matrix(nrow = 0, ncol = ncol(cozen)))
colnames(cozen_split) <- colnames(cozen)
for (i in 1:nrow(cozen)) {
trna_names <- cozen$saccaromyces.genome.datasbase..sgd..tRNA.name[i]
if (!grepl(",", trna_names)) {
cozen_split <- rbind(cozen_split, cozen[i,])
new_column <- c(new_column, "Single")
}
else {
trnas_mapped_to <- strsplit(trna_names, ",")[[1]]
for (j in 1:length(trnas_mapped_to)) {
new_row <- cozen[i,]
new_row[which(colnames(cozen) == "saccaromyces.genome.datasbase..sgd..tRNA.name")] <- trnas_mapped_to[j]
cozen_split <- rbind(cozen_split, new_row)
new_column <- c(new_column, "Multiple")
}
}
}
cozen_split$Num_of_tRNAs_originally_in_row <- new_column
## Select columns of interest, get the sum of reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_to_merge <- cozen_split %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA")
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Select columns of interest, get the sum of reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_to_merge <- cozen_split %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "Strain.Name")
## Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"), aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
## Select columns of interest, get the sum of reads per tRNA (since there are several rows for the same tRNA), and rename to merge with responsiveness dataframe
cozen_to_merge <- cozen_split %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "Strain.Name")
## Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"), aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
## Plot average nDEP vs. avg expression - mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"), aes(x = mean_reads_per_tRNA, y = nDEP)) +
geom_point() +
theme_light()
View(resp_and_expression)
View(cozen_split)
cozen_to_merge <- cozen_split %>%
filter(saccaromyces.genome.datasbase..sgd..tRNA.name != "NA" &
mean.normalized.ReadCount..AlkB != "NA") %>%
select(name, tRNA.group, chromosome, chromosome.start, chromosome.end, chromosome.start, Num_of_tRNAs_originally_in_row,
saccaromyces.genome.datasbase..sgd..tRNA.name, mean.normalized.ReadCount..AlkB, read.mapping..genomic.sequence.or.mature.tRNA.) %>%
group_by(saccaromyces.genome.datasbase..sgd..tRNA.name) %>%
mutate(mean_reads_per_tRNA = sum(as.numeric(mean.normalized.ReadCount..AlkB), na.rm = T)) %>%
rename(Strain.Name = saccaromyces.genome.datasbase..sgd..tRNA.name)
## Merge with resp_filtered
resp_and_expression <- left_join(resp_filtered, cozen_to_merge, by = "Strain.Name")
# Plot average nDEP vs. avg expression - genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"), aes(x = mean_reads_per_tRNA, y = nDEP, col = Num_of_tRNAs_originally_in_row)) +
geom_point() +
theme_light()
# Plot average nDEP vs. avg expression - mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"), aes(x = mean_reads_per_tRNA, y = nDEP, col = Num_of_tRNAs_originally_in_row)) +
geom_point() +
theme_light()
chu <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/chu_2011/S3.csv"))
View(chu)
chu_trnas <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/chu_2011/S2.csv"))
View(chu_trnas)
chu_synths <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/chu_2011/S3.csv"))
rm(chu)
View(chu_synths)
View(resp_and_expression)
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv"))
View(amino_acids)
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv")) %>%
select(X1_letter_code, X3_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid")
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv")) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid")
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = abundance) %>%
select(-c(k_cat_value, k_cat_organism))
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
# Load data
chu_synths <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/chu_2011/S3.csv"))
chu_trnas <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/chu_2011/S2.csv"))
# The problem with these abundances for tRNAs is that they are for each family, not for each tRNA concretely, so I don't really know if they will be useful to me. I could collapse those from Cozen et al. by family and compare them to this to see if they point in the same direction, but might be a bit of a time waste
# Join the synthetase data to the resp_and_expression dataset
amino_acids <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv")) %>%
select(X1_letter_code, X3_letter_code) %>%
rename(Amino_acid = X3_letter_code,
AA = X1_letter_code)
chu_synths <- left_join(chu_synths, amino_acids, by = "Amino_acid") %>%
rename(synthetase_abundance = Abundance) %>%
select(-c(k_cat_value, k_cat_organism))
resp_and_expression <- left_join(resp_and_expression, chu_synths, by = "AA")
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"), aes(x = synthetase_abundance, y = mean_reads)) +
geom_point() +
theme_light()
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"), aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
## Mature tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
## Mature tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
## Genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
## Mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Plot tRNA abundance from Cozen et al., against tRNA synthetase abundance from Chu et al.
## Genomic tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
## Mature tRNAs
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = synthetase_abundance, y = mean_reads_per_tRNA)) +
geom_point() +
theme_light()
# Same plots as before, tRNA abundance from Cozen et al. vs. our nDEP, coloring by tRNA synthetase abundance from Chu et al.
## Genomic tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "genomic"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
## Mature tRNA sequences
ggplot(data = subset(resp_and_expression, read.mapping..genomic.sequence.or.mature.tRNA. == "mature_tRNA"),
aes(x = mean_reads_per_tRNA, y = nDEP, col = synthetase_abundance)) +
geom_point() +
theme_light()
