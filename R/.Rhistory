mutate(n= n())
ggplot(data = responsiveness, aes(x = anticodon, y = nDEP, fill = n)) +
geom_boxplot()
# Correlation between nDEP and tRNA family size
resp_summarized_by_family <- aggregate(responsiveness$nDEP, list(responsiveness$anticodon), mean)
colnames(resp_summarized_by_family) <- c("anticodon", "nDEP")
resp_summarized_by_family <- merge(resp_summarized_by_family, responsiveness[, c("anticodon", "n")], by = "anticodon", all.x = T)
resp_summarized_by_family <- resp_summarized_by_family %>%
distinct(anticodon, .keep_all = T)
cor(resp_summarized_by_family$nDEP, resp_summarized_by_family$n)
# Remove unnecessary variables
rm(resp_summarized_by_family)
# Histogram of avg_nDEP for each KO strain
ggplot(data = responsiveness, aes(x = nDEP)) +
geom_histogram(binwidth = 1, color="black", fill="grey") +
theme_light() +
xlab("nDEP per tRNA KO") +
ylab("Count") +
labs(title = "Frequency of nDEP across all tRNA KO strains")
# Given this histogram, I define the threshold to make out major and minor tRNA genes - for now I have it at 2
# Define a column with "minor"-"major" based on this so that I can check how many major and minor ones there are per family (I could also do this directly based on the avg_nDEP tbh but oh well)
responsiveness<- responsiveness%>%
mutate(Gene_type = case_when(nDEP < threshold_major ~ "Minor",
TRUE ~ "Major")) %>%
group_by(anticodon) %>%
summarize(Major_count = sum(Gene_type == "Major"), across()) %>%
ungroup()
# Also need to count the total number of KOs I have from each family in the experiment
responsiveness<- responsiveness%>%
group_by(anticodon) %>%
summarize(Family_count = n(), across()) %>%
ungroup()
# Get a dataframe with the size of each family, the number of those genes we have as KOs in the experiment, and how many of them are major, and plot this
colnames(master_dataset)[colnames(master_dataset) == "family_size"] <- "Family_size"
family_sizes <- left_join(master_dataset, responsiveness, by = "Strain.Name")
family_sizes <- family_sizes %>%
filter(Strain.Name %in% responsiveness$Strain.Name) %>%                       # Filtered on KOd before, but that kept strains that were removed during filtering
dplyr::select(anticodon, Family_size, Family_count, Major_count) %>%
distinct(anticodon, .keep_all = T)
# Get long version to plot, and re-order the anticodons by family size, in order to keep that order for the x axis of the plot
family_sizes <- family_sizes[order(-family_sizes$Family_size), ]
family_sizes_long <- family_sizes %>% pivot_longer(!anticodon, names_to = "Type", values_to = "Count")
family_sizes_long$anticodon <- factor(family_sizes_long$anticodon, levels = family_sizes$anticodon)
family_sizes_long$Type <- factor(family_sizes_long$Type, levels = c("Family_size", "Family_count", "Major_count"))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# Plot this
ggplot(data = family_sizes_long, aes(x = Anticodon, y = Count, fill = Type)) +
geom_bar(position="dodge", stat="identity") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
# Produce a single histogram like the one at the beginning of this chunk for each set of tRNA isoacceptors - and save them to a PDF
## Create empty list of plots
plot_list <- list()
## Generate the plots and add them to the list
aas <- levels(as.factor(responsiveness$AA))
for (i in 1:length(aas)) {
aa <- aas[i]
temp <- responsiveness%>%
filter(AA == aa)
plot_list[[aa]] <- ggplot(data = temp, aes(x = nDEP, col = anticodon, fill = anticodon)) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs loading {aa}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/nDEP_hists_per_isoacceptors_color_by_codon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
# Remove unnecessary variables
rm(family_sizes_long, my_grobs, plot_list, temp, aa, aas, output_file, i)
temp <- master_dataset %>%
dplyr::select(Strain.Name, DNA_sequence, mature_sequence)
responsiveness <- left_join(responsiveness, temp, by = "Strain.Name")
## Create empty list of plots
plot_list_DNA_seq <- list()
plot_list_mature_seq <- list()
my_anticodon = "CCA"
temp <- responsiveness %>%
filter(anticodon == my_anticodon)
View(temp)
length(unique(temp$DNA_sequence))
ggplot(data = temp, aes(x = nDEP, col = DNA_sequence, fill = DNA_sequence)) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
ggplot(data = temp, aes(x = nDEP, col = mature_sequence, fill = mature_sequence)) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
ggplot(data = temp, aes(x = nDEP, col = "black", fill = DNA_sequence)) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
ggplot(data = temp, aes(x = nDEP, col = "black", fill = "grey")) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
ggplot(data = temp, aes(x = nDEP, col = "black", fill = "grey")) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}")) +
theme(legend.position = "none")
ggplot(data = temp, aes(x = nDEP, col = "black", fill = "grey")) +
geom_histogram(binwidth = 1) +
theme_light() +
xlab("nDEP") +
ylab("Count") +
labs(title = glue("Frequency of nDEP in tRNAs with {my_anticodon}"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
fit <- glm.nb(data = resp_and_expression,
formula = nDEP ~ synthetase_abundance*k_cat_value*codon_frequency_chu_2011)
summary(fit)
# Check overdispersion
check_overdispersion(fit)
# Load list
codon_ratios_list <- fromJSON(paste(base_dir, "Data/Other/check_codon_enrichment_in_protein_sequences/codon_counts.json", sep=""))
# Remove from the list those strains where there aren't at least 4 DE proteins
bool <- c()
for (i in 1:length(codon_ratios_list)) {
bool <- c(bool, length(codon_ratios_list[[i]][["DE"]]) > 4)
}
codon_ratios_list <- codon_ratios_list[bool]
strains <- names(codon_ratios_list)
p.values_wmw <- c()
mean_de <- c()
mean_non_de <- c()
num_de <- c()
num_non_de <- c()
for (i in 1:length(codon_ratios_list)) {
# Grab data for this strain
strain_name <- names(codon_ratios_list)[i]
de <- codon_ratios_list[[strain_name]][["DE"]]
non_de <- codon_ratios_list[[strain_name]][["non_DE"]]
de_df <- data.frame(codon_ratios_list[[strain_name]][["DE"]])
non_de_df <- data.frame(codon_ratios_list[[strain_name]][["non_DE"]])
# Plot overlapping histograms - not worth it I think
ggplot() +
geom_histogram(data = de_df, aes(x = log2(codon_ratios_list..strain_name.....DE...)), fill = "red", alpha = 0.9) +
geom_histogram(data = non_de_df, aes(x = log2(codon_ratios_list..strain_name.....non_DE...)), fill = "orange", alpha = 0.4)
# Test - WMW
p.values_wmw <- c(p.values_wmw, wilcox.test(de, non_de)$p.value)
# Test - log2 transform (need to take care of 0s) and use t-test - is this worth doing?
# Save the mean of each group to the output vectors as well
mean_de <- c(mean_de, mean(de))
mean_non_de <- c(mean_non_de, mean(non_de))
# Save the number of proteins in each of the two groups - probably will explain the significance bc of low power with small DE protein counts
num_de <- c(num_de, length(de))
num_non_de <- c(num_non_de, length(non_de))
}
p.values.adj <- p.adjust(p.values_wmw, method = "fdr")
test_codon_enrichment <- data.frame(Strain.Name = strains, p.values_wmw, p.values.adj, mean_de, mean_non_de, num_de, num_non_de) %>%
mutate(direction = case_when(mean_de > mean_non_de ~ "DE",
TRUE ~ "non_DE"),
FC = mean_de/mean_non_de)
# Get the logFC - need to deal with the negative values in the FC - there is definitely a better way to do this but oh well
logFC <- c()
for (i in 1:nrow(test_codon_enrichment)) {
FC <- test_codon_enrichment$FC[i]
if (FC < 1) {
out <- -log10(abs(FC))
}
else if (FC > 1) {
out <- log10(FC)
}
else if (FC == 0) {
out <- 0
}
logFC <- c(logFC, out)
}
test_codon_enrichment$logFC <- log10(test_codon_enrichment$FC)
# Remove unnecessary variables
rm(bool, strains, p.values_wmw, mean_de, mean_non_de, p.values.adj, logFC, FC, out, num_de, num_non_de)
temp <- master_dataset %>%
dplyr::select(Strain.Name, Anticodon, Best_isotype_model_1_letter, Family_size) %>%
rename(AA = Best_isotype_model_1_letter)
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
temp <- master_dataset %>%
dplyr::select(Strain.Name, Anticodon, Best_isotype_model_1_letter, Family_size) %>%
rename(AA = Best_isotype_model_1_letter)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag only significant p-values and FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, (((FC < 0.5 | FC > 1.5) & -log10(p.values.adj) > -log10(0.05)))|-log10(p.values.adj) > -log10(0.05)),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag all significant FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, FC < 0.5 | FC > 1.5),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Color by count of DE proteins
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = num_de)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Anticodon)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family size
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Family_size)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by amino acid
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = AA)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
View(test_codon_enrichment)
View(master_dataset)
# Get anticodon from codon and rename columns
anticodon_freq <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/chu_2011/S1.csv", sep="")))
anticodon_freq$anticodon <- lapply(anticodon_freq[,colnames(anticodon_freq) == "Codon"], codon_to_anticodon)
anticodon_freq$anticodon <- as.character(anticodon_freq$anticodon)
anticodon_freq$anticodon <- as.factor(anticodon_freq$anticodon)
anticodon_freq <- anticodon_freq %>%
rename(codon_frequency_chu_2011 = Frequency)
# Merge to resp_and_expression
resp_and_expression <- left_join(resp_and_expression, anticodon_freq, by = "anticodon")
View(resp_and_expression)
resp_and_expression <- as.data.frame(fread(paste(base_dir, "Data/resp_and_expression.csv", sep="")))
View(resp_and_expression)
# Color by codon frequency
temp <- resp_and_expression %>%
dplyr::select(Strain.Name, codon_frequency_chu_2011)
test_codon_enrichment <- left_join(test_codon_enrichment, temp, by = "Strain.Name")
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = codon_frequency_chu_2011)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
alpha
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag only significant p-values and FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, (((FC < 0.5 | FC > 1.5) & -log10(p.values.adj) > -log10(0.05)))|-log10(p.values.adj) > -log10(0.05)),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Basic volcano plot - FC vs. -log10(adj.p-value) - tag all significant FCs
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj))) +
geom_point() +
geom_hline(yintercept = -log10(0.05), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light() +
geom_text_repel(data = subset(test_codon_enrichment, FC < 0.5 | FC > 1.5),
aes(x = FC, y = -log10(p.values.adj), label = Strain.Name))
# Color by count of DE proteins
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = num_de)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Anticodon)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by family size
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = Family_size)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by amino acid
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = AA)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
# Color by codon frequency
ggplot(data = test_codon_enrichment, aes(x = FC, y = -log10(p.values.adj), col = codon_frequency_chu_2011)) +
geom_point() +
geom_hline(yintercept = -log10(alpha), col = "red") +
geom_vline(xintercept = 0.5, col = "red") +
geom_vline(xintercept = 1.5, col = "red") +
theme_light()
ggplot(data = test_codon_enrichment, aes(x = num_de, y = FC)) +
geom_point() +
theme_light()
hist(test_codon_enrichment$FC)
## Column saying if there is a U in position 34 (the one that binds the last nucleotide in the codon)
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(substr(Anticodon, 1, 1) == "U" ~ "Yes",
TRUE ~ "No"))
## Column saying if there is a U in position 34 (the one that binds the last nucleotide in the codon)
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(grepl("\\(U", Strain.Name) ~ "Yes",
TRUE ~ "No"))
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, "C:/MyStuff/tRNAs/data/GtRNAdb/master_tRNA_dataset.csv")
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, "C:/MyStuff/tRNA_KOs/data/GtRNAdb/master_tRNA_dataset.csv")
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, "C:/MyStuff/tRNA_KOs/Data/GtRNAdb/master_tRNA_dataset.csv")
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, "C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv")
View(master_dataset)
master_dataset$Strain.Name[1]
substr(master_dataset$mature_sequence[1], 34, 36)
## Column saying if there is a U in position 34 (the one that binds the last nucleotide in the codon)
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(grepl("\\(U", Strain.Name) ~ "Yes",
TRUE ~ "No"),
A_34 = case_when(grepl("\\(A", Strain.Name) ~ "Yes",
TRUE ~ "No"),
Nt_at_32 = substr(mature_sequence, 32, 32))
# Load libraries
library(data.table)
library(dplyr)
library(xlsx)
library(stringr)
#-----------------------------------------------------------------------------------------
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
#-----------------------------------------------------------------------------------------
# 1. Dealing with the database from GtRNAdb
# Load data
db <- read.xlsx(paste(base_dir, "Data/Other/GtRNAdb/GtRNAdb_gene_list.xlsx", sep=""), 1)
View(db)
# 1.2. Match 3-letter codes to 1-letter codes
## Load dataframe with amino acid information
aas <- fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv",sep=""))
# 2.0. Load phenotypic results dataset
phenotypic_results <- fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep=""))
# 3. Add genetic and mature tRNA sequences from the FASTA files
trna_seqs <- read.csv(paste(base_dir, "Data/Other/GtRNAdb/gene_and_mature_tRNA_seqs.csv", sep=""))
knitr::opts_chunk$set(echo = TRUE)
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(grepl("\\(U", Strain.Name) ~ "Yes",
TRUE ~ "No"),
A_34 = case_when(grepl("\\(A", Strain.Name) ~ "Yes",
TRUE ~ "No"),
Nt_at_32 = substr(mature_sequence, 32, 32),
Nt_at_38 = substr(mature_sequence, 38, 38))
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
master_dataset <- master_dataset %>%
mutate(U_34 = case_when(grepl("\\(U", Strain.Name) ~ "Yes",
TRUE ~ "No"),
A_34 = case_when(grepl("\\(A", Strain.Name) ~ "Yes",
TRUE ~ "No"),
Nt_at_32 = substr(mature_sequence, 32, 32),
Nt_at_38 = substr(mature_sequence, 38, 38))
View(master_dataset)
# 5. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep=""))
