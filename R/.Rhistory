sample_layout <- sample_layout %>%
mutate(raw_proteomics_colnames = case_when(Strain.Name == "WT" ~ paste(str_replace_all(Sample.ID, "_", "."), ".0", Replicate, sep=""),
Strain.Name == "QC" ~ str_replace_all(Sample.ID.unique, "_", "."),
TRUE ~ paste("X", Strain.ID, ".0", Replicate, sep="")))
# Create a column with the column IDs of the shape I want to be working with for my proteomics data
sample_layout <- sample_layout %>%
mutate(final_proteomics_colnames = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
Strain.Name == "QC" ~ Sample.ID.unique,
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Add some columns - I used to do this in my main analysis file
## Fix the QC rows to say "QC" instead of "NA" in the columns that don't apply
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.384))),
Analysis.Row.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.384))),
Analysis.Column.384 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.384))),
Analysis.Plate.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Plate.96))),
Analysis.Row.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Row.96))),
Analysis.Column.96 = as.factor(case_when(Plate.Position == "QC" ~ "QC",
TRUE ~ as.character(Analysis.Column.96))))
## Extract the date for when each sample was run, as well as Date_Injection
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)")) %>%
mutate(Injection_Order = str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
Date_Injection_Order = paste(str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"), str_extract(File.Name, "(?<=KTT_).*?(?=_30-0092_tRNA)"),
sep="_"))
## Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
## Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
## Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Save final version
if (working_from == "home") {
fwrite(sample_layout, "/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv")
} else {
fwrite(sample_layout, "S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/12_Analysis_Alvaro/sample_layout_alvaro.tsv")
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Position_Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
View(temp)
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Position.Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = as.numeric(temp$Strain.Type == "KO"),
well = temp$Position.Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
replicates <- c(1, 2, 3)
for (i in replicates) {
temp <- sample_layout %>%
filter(Replicate == i)
raw_map(data = temp$Strain.Type,
well = temp$Position.Within.Plate,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA KOs")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/tRNA_KOs_plate_", i, ".png", sep=""))
}
View(sample_layout)
version
1+1
version
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
library(BiocManager)
BiocManager::install("ComplexHeatmap")
suppressPackageStartupMessages(library(ComplexHeatmap))
BiocManager::install("ComplexHeatmap")
install.packages("png")
install.packages("png")
library(BiocManager)
BiocManager::install("ComplexHeatmap")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
install.packages("factoextra")
install.packages("mvtnorm")
library(mvtnorm)
library(lme4)
install.packages("lme4")
install.packages("lme4")
library(lme4)
library(pbkrtest)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
BiocManager::install("clusterProfiler")
install.packages("scatterpie")
install.packages("scatterpie")
BiocManager::install("clusterProfiler")
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
BiocManager::install("org.Sc.sgd.db")
library(org.Sc.sgd.db)
library(fgsea)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
library(UpSetR)
library(ComplexUpset)
library(wesanderson)
library(forcats)
library(ggpubr)
library(xtable)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(fgsea)
9.98/2
4.98/2
3.98/2
15/6
9.98/2
13.98/2
48.98/2
knitr::opts_chunk$set(echo = TRUE)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(data.table)
library(dplyr)
library(fgsea)
library(ggplot2)
library(jsonlite)
library(stringr)
library(forcats)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01 - remove emtpy vectors
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
de_proteins_list_001 <- Filter(function(x) length(x) > 0, de_proteins_list_001)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05 - remove emtpy vectors
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
de_proteins_list_005 <- Filter(function(x) length(x) > 0, de_proteins_list_005)
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
# Packages
library(data.table)
library(dplyr)
library(readODS)
library(stringr)
library(roxygen2)
library(stringi)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01 - remove emtpy vectors
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
de_proteins_list_001 <- Filter(function(x) length(x) > 0, de_proteins_list_001)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05 - remove emtpy vectors
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
de_proteins_list_005 <- Filter(function(x) length(x) > 0, de_proteins_list_005)
# Full Entrez ID dataframe, with all genes
entrez_db <- as.data.frame(fread(paste(base_dir, "Data/Other/enrichment_analysis/entrez_reference.txt", sep="")))
# Load the dataset with that information
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Phenotypic data from Bloom-Ackermann et al., 2014
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
source(paste(base_dir, "Code/R/Mine/0.general_use_functions.R", sep=""))
knitr::opts_chunk$set(echo = TRUE)
# Load protein overlaps dataset created in previous section, with all possible intersections
if (alpha == 0.01) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_001.tsv", sep="")))
}
if (alpha == 0.05) {
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "Data/Other/compare_DEPs_across_KOs/DE_protein_overlaps_005.tsv", sep="")))
}
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep = "")))
# This is what happens if I filter based on major - minor (defined by me)
DE_protein_overlaps_major_within_family <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2,
Gene_type_1 == "Major" & Gene_type_2 == "Major")
# Get a version of this which I can screenshot for a slide
temp <- DE_protein_overlaps_major_within_family %>%
dplyr::select(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, Jaccard_index)
# Grab the strains in here and put them into a vector so I can filter the EA results by them
paired_major_strains <- c(as.character(DE_protein_overlaps_major_within_family$strains_1),as.character(DE_protein_overlaps_major_within_family$strains_2))
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
de_proteins_list_001 <- Filter(function(x) length(x) > 0, de_proteins_list_001)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05 - remove emtpy vectors
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
de_proteins_list_005 <- Filter(function(x) length(x) > 0, de_proteins_list_005)
View(de_proteins_list_005)
View(de_proteins_list_001)
de_proteins_list_001[["tY(GUA)M2"]]
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
# Our proteomics data
resp <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "home"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Set the dataset we are working with: outlier_removed, or batchcorrected_onWTs
dataset <- "batchcorrected_onWTs"
# Our proteomics data
resp <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
# Load their phenotypic data: growth rate and growth yield for all KOs
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results.tsv", sep="")))
# Load trna_ko
trna_ko <- as.data.frame(fread(paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep="")))
# Change "ko" colname to allow to merge datasets based on it
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>%
dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
# My helper functions
source("0.general_use_functions.R")
# Change "ko" colname to allow to merge datasets based on it
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>%
dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
# MY MELT FUNCTION RETURNS THE ROWS IN THE DATAFRAME IN AN ORDER THAT MAKES SENSE TO ME, BUT SEEMINLGY GGPLOT2 DOESN'T LIKE IT BECAUSE IT PLOTS THEM IN ANOTHER ORDER XD
# GOTTA FIX THAT FOR IT TO LOOK PRETTY
melted_corrs$Var1 <- factor(melted_corrs$Var1, ordered = T, levels = c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP" ))
melted_corrs$Var2 <- factor(melted_corrs$Var2, ordered = T, levels = c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP" ))
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Remove unnecessary objects
rm(test, test_corrs, melted_corrs)
colnames(resp)[colnames(resp) == "Strain.Name"] <- "gene_name"
test <- full_join(phenotypic_data, resp, by = "gene_name")
# Select numeric columns, calculate correlations and plot heatmap
test <- test %>%
dplyr::select(YPD, SDC, low_glucose, galactose, NaCl, DTT, YPD_GY, SDC_GY, low_glucose_GY, galactose_GY, NaCl_GY, DTT_GY, nDEP)
colnames(test) <- c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP")
test_corrs <- round(cor(test, use = "pairwise.complete.obs"), 2)
melted_corrs <- melt(test_corrs)
# MY MELT FUNCTION RETURNS THE ROWS IN THE DATAFRAME IN AN ORDER THAT MAKES SENSE TO ME, BUT SEEMINLGY GGPLOT2 DOESN'T LIKE IT BECAUSE IT PLOTS THEM IN ANOTHER ORDER XD
# GOTTA FIX THAT FOR IT TO LOOK PRETTY
melted_corrs$Var1 <- factor(melted_corrs$Var1, ordered = T, levels = c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP" ))
melted_corrs$Var2 <- factor(melted_corrs$Var2, ordered = T, levels = c("YPD_GR", "SDC_GR", "low_glucose_GR", "galactose_GR", "NaCl_GR", "DTT_GR", "YPD_GY", "SDC_GY", "low_glucose_GY", "galactose_GY", "NaCl_GY", "DTT_GY", "nDEP" ))
ggplot(data = melted_corrs, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), size = 3) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = test, aes(x = SDC_GR, y = nDEP)) +
geom_point() +
theme_light()
