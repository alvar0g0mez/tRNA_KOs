true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
for (i in 1:length(columns)) {
# Save the name of the variable we are testing for
variable <- columns[i]
variables <- c(variables, variable)
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[[variable]]))
p_vals_chi_square <- c(p_vals_chi_square, chisq.test(data)$p.value)
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop
# Changed this, now it represents the % increase (or decrease) in the proportion of 0s in the TRUE group w.r.t. the FALSE group
if (true_to_false_ratio > 1) {
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, (true_to_false_ratio-1)*10)
} else {
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, (1-true_to_false_ratio)*10)
}
## Wilcoxon-Mann Whitney test for the non-zero values
temp <- DE_protein_overlaps %>%
filter(Jaccard_index != 0)
x <- temp$Jaccard_index[temp[colnames(temp) == variable] == T]
y <- temp$Jaccard_index[temp[colnames(temp) == variable] == F]
p_vals_wmw <- c(p_vals_wmw, wilcox.test(x, y)$p.value)
# Wilcoxon-Mann Whitney effect size - TURNED THIS INTO "PERCENTAGE" EFFECT SIZE BY DIVIDING BY THE MEAN JACCARD INDEX IN THE GROUP WHERE THE PAIRS OF KOS DO NOT SHARE THE CHARACTERISTIC ("FALSE" GROUP) SO AS TO TRY TO MAKE THIS MORE INTERPRETABLE
effect_size_directions_wmw <- c(effect_size_directions_wmw, (mean(x)-mean(y))/mean(y))
}
# Put it all together and return it
p_values_chisq_and_wmw <- data.frame(variables, p_vals_chi_square, true_to_false_ratio_chi_square, p_vals_wmw, effect_size_directions_wmw)
return(p_values_chisq_and_wmw)
}
# Define the columns we want to provide as input for the above defined function - to test (Chi-square and WMW) the Jaccard Indexes across their levels
df <- DE_protein_overlaps %>%
dplyr::select(Jaccard_index,
same_amino_acid,
same_family,
same_chromosome,
same_amino_acid_and_chr,
same_family_and_chr,
same_aa_charge,
same_aa_type,
Nt_at_1,
Nt_at_2,
Nt_at_3,
Nt_at_4,
Nt_at_5,
Nt_at_6,
Nt_at_7,
Nt_at_8,
Nt_at_9,
Nt_at_10,
Nt_at_11,
Nt_at_12,
Nt_at_13,
Nt_at_14,
Nt_at_15,
Nt_at_16,
Nt_at_17,
Nt_at_18,
Nt_at_19,
Nt_at_20,
Nt_at_21,
Nt_at_22,
Nt_at_23,
Nt_at_24,
Nt_at_25,
Nt_at_26,
Nt_at_27,
Nt_at_28,
Nt_at_29,
Nt_at_30,
Nt_at_31,
Nt_at_32,
Nt_at_33,
Nt_at_34,
Nt_at_35,
Nt_at_36,
Nt_at_37,
Nt_at_38,
Nt_at_39,
Nt_at_40,
Nt_at_41,
Nt_at_42,
Nt_at_43,
Nt_at_44,
Nt_at_45,
Nt_at_46,
Nt_at_47,
Nt_at_48,
Nt_at_49,
Nt_at_40,
Nt_at_51,
Nt_at_52,
Nt_at_53,
Nt_at_54,
Nt_at_55,
Nt_at_56,
Nt_at_57,
Nt_at_58,
Nt_at_59,
Nt_at_60,
Nt_at_61,
Nt_at_62,
Nt_at_63,
Nt_at_64,
Nt_at_65,
Nt_at_66,
Nt_at_67,
Nt_at_68,
Nt_at_69,
Nt_at_70)
# Perform testing and save p-values and effect sizes
p_values_chisq_and_wmw <- perform_chi_square_and_wmw_return_pvalues_and_effect_sizes(df)
# WHEN USING ALL NUCLEOTIDE POSITIONS
# Correct the p-values with BH
p_values_chisq_and_wmw$p_vals_chi_square_adj <- p.adjust(p_values_chisq_and_wmw$p_vals_chi_square, method = "BH")
p_values_chisq_and_wmw$p_vals_wmw_adj <- p.adjust(p_values_chisq_and_wmw$p_vals_wmw, method = "BH")
# Keep only significant rows
p_values_large <- p_values_chisq_and_wmw %>%
filter(p_vals_chi_square_adj < alpha | p_vals_wmw_adj < alpha) %>%
dplyr::select(-c(p_vals_chi_square, p_vals_wmw)) %>%
arrange(p_vals_chi_square_adj)
# Print the resulting table to LaTex
print(xtable(p_values_large, label = "p_values_table_with_Nts", digits = c(9)), include.rownames = F)
# WHEN NOT USING ALL NUCLEOTIDE POSITIONS
## Make the row descriptions a bit prettier - colnames I need to fix directly in LaTex - this only functions when I am not using all nucleotide #positions
#p_values_chisq_and_wmw$variables <- c("Carried amino acid", "Anticodon", "Chromosome", "Carried amino acid and chromosome", "Anticodon and #chromosome",
#                                      "Amino acid charge", "Amino acid type", "Nucleotide at 30", "Nucleotide at 31", "Nucleotide at 32", #"Nucleotide at 33",
#                                      "Nucleotide at 34", "Nucleotide at 35", "Nucleotide at 36", "Nucleotide at 37", "Nucleotide at 38", #"Nucleotide at 39",
#                                      "Nucleotide at 40")
# Print it to take it to LaTex
#print(xtable(p_values_chisq_and_wmw, label = "p_values_table", digits = c(8)), include.rownames=FALSE)
0.75/0.5
variable = "same_amino_acid"
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop
(true_to_false_ratio-1)*10
#' This functions needs to receive as input a dataframe where we want to perform the test for all the columns! Except for one column which is the one containing the Jaccard Index, and which needs to be called "Jaccard_index"
#'
perform_chi_square_and_wmw_return_pvalues_and_effect_sizes <- function(DE_protein_overlaps) {
# Create some vectors to collect the outcome
variables <- c()
p_vals_chi_square <- c()
true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
for (i in 1:length(columns)) {
# Save the name of the variable we are testing for
variable <- columns[i]
variables <- c(variables, variable)
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[[variable]]))
p_vals_chi_square <- c(p_vals_chi_square, chisq.test(data)$p.value)
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop
# Changed this, now it represents the % increase (or decrease) in the proportion of 0s in the TRUE group w.r.t. the FALSE group
if (true_to_false_ratio > 1) {
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, (true_to_false_ratio-1)*100)
} else {
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, (1-true_to_false_ratio)*100)
}
## Wilcoxon-Mann Whitney test for the non-zero values
temp <- DE_protein_overlaps %>%
filter(Jaccard_index != 0)
x <- temp$Jaccard_index[temp[colnames(temp) == variable] == T]
y <- temp$Jaccard_index[temp[colnames(temp) == variable] == F]
p_vals_wmw <- c(p_vals_wmw, wilcox.test(x, y)$p.value)
# Wilcoxon-Mann Whitney effect size - TURNED THIS INTO "PERCENTAGE" EFFECT SIZE BY DIVIDING BY THE MEAN JACCARD INDEX IN THE GROUP WHERE THE PAIRS OF KOS DO NOT SHARE THE CHARACTERISTIC ("FALSE" GROUP) SO AS TO TRY TO MAKE THIS MORE INTERPRETABLE
effect_size_directions_wmw <- c(effect_size_directions_wmw, ((mean(x)-mean(y))/mean(y))*100)
}
# Put it all together and return it
p_values_chisq_and_wmw <- data.frame(variables, p_vals_chi_square, true_to_false_ratio_chi_square, p_vals_wmw, effect_size_directions_wmw)
return(p_values_chisq_and_wmw)
}
# Define the columns we want to provide as input for the above defined function - to test (Chi-square and WMW) the Jaccard Indexes across their levels
df <- DE_protein_overlaps %>%
dplyr::select(Jaccard_index,
same_amino_acid,
same_family,
same_chromosome,
same_amino_acid_and_chr,
same_family_and_chr,
same_aa_charge,
same_aa_type,
Nt_at_1,
Nt_at_2,
Nt_at_3,
Nt_at_4,
Nt_at_5,
Nt_at_6,
Nt_at_7,
Nt_at_8,
Nt_at_9,
Nt_at_10,
Nt_at_11,
Nt_at_12,
Nt_at_13,
Nt_at_14,
Nt_at_15,
Nt_at_16,
Nt_at_17,
Nt_at_18,
Nt_at_19,
Nt_at_20,
Nt_at_21,
Nt_at_22,
Nt_at_23,
Nt_at_24,
Nt_at_25,
Nt_at_26,
Nt_at_27,
Nt_at_28,
Nt_at_29,
Nt_at_30,
Nt_at_31,
Nt_at_32,
Nt_at_33,
Nt_at_34,
Nt_at_35,
Nt_at_36,
Nt_at_37,
Nt_at_38,
Nt_at_39,
Nt_at_40,
Nt_at_41,
Nt_at_42,
Nt_at_43,
Nt_at_44,
Nt_at_45,
Nt_at_46,
Nt_at_47,
Nt_at_48,
Nt_at_49,
Nt_at_40,
Nt_at_51,
Nt_at_52,
Nt_at_53,
Nt_at_54,
Nt_at_55,
Nt_at_56,
Nt_at_57,
Nt_at_58,
Nt_at_59,
Nt_at_60,
Nt_at_61,
Nt_at_62,
Nt_at_63,
Nt_at_64,
Nt_at_65,
Nt_at_66,
Nt_at_67,
Nt_at_68,
Nt_at_69,
Nt_at_70)
# Perform testing and save p-values and effect sizes
p_values_chisq_and_wmw <- perform_chi_square_and_wmw_return_pvalues_and_effect_sizes(df)
# WHEN USING ALL NUCLEOTIDE POSITIONS
# Correct the p-values with BH
p_values_chisq_and_wmw$p_vals_chi_square_adj <- p.adjust(p_values_chisq_and_wmw$p_vals_chi_square, method = "BH")
p_values_chisq_and_wmw$p_vals_wmw_adj <- p.adjust(p_values_chisq_and_wmw$p_vals_wmw, method = "BH")
# Keep only significant rows
p_values_large <- p_values_chisq_and_wmw %>%
filter(p_vals_chi_square_adj < alpha | p_vals_wmw_adj < alpha) %>%
dplyr::select(-c(p_vals_chi_square, p_vals_wmw)) %>%
arrange(p_vals_chi_square_adj)
# Print the resulting table to LaTex
print(xtable(p_values_large, label = "p_values_table_with_Nts", digits = c(9)), include.rownames = F)
# WHEN NOT USING ALL NUCLEOTIDE POSITIONS
## Make the row descriptions a bit prettier - colnames I need to fix directly in LaTex - this only functions when I am not using all nucleotide #positions
#p_values_chisq_and_wmw$variables <- c("Carried amino acid", "Anticodon", "Chromosome", "Carried amino acid and chromosome", "Anticodon and #chromosome",
#                                      "Amino acid charge", "Amino acid type", "Nucleotide at 30", "Nucleotide at 31", "Nucleotide at 32", #"Nucleotide at 33",
#                                      "Nucleotide at 34", "Nucleotide at 35", "Nucleotide at 36", "Nucleotide at 37", "Nucleotide at 38", #"Nucleotide at 39",
#                                      "Nucleotide at 40")
# Print it to take it to LaTex
#print(xtable(p_values_chisq_and_wmw, label = "p_values_table", digits = c(8)), include.rownames=FALSE)
View(p_values_chisq_and_wmw)
View(de_protein_list)
View(DE_protein_overlaps)
sum(DE_protein_overlaps$Nt_at_21)
sum(DE_protein_overlaps$Nt_at_20)
perform_chi_square_and_wmw_return_pvalues_and_effect_sizes <- function(DE_protein_overlaps) {
# Create some vectors to collect the outcome
variables <- c()
p_vals_chi_square <- c()
true_to_false_ratio_chi_square <- c()
p_vals_wmw <- c()
effect_size_directions_wmw <- c()
perc_same_across_all_pairs <- c()
# Iterate over the columns of the dataframe, performing the tests for each of them
columns <- colnames(DE_protein_overlaps)
columns <- columns[!columns %in% c("Jaccard_index")]
for (i in 1:length(columns)) {
# Save the name of the variable we are testing for
variable <- columns[i]
variables <- c(variables, variable)
## Chi-square test for the proportion of 0s in each group
data <- table(as.numeric(!(DE_protein_overlaps$Jaccard_index == 0)), as.factor(DE_protein_overlaps[[variable]]))
p_vals_chi_square <- c(p_vals_chi_square, chisq.test(data)$p.value)
## Proportion of 0s in each group
true_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == T] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == T)
false_group_zero_prop <- sum(DE_protein_overlaps$Jaccard_index[DE_protein_overlaps[[variable]] == F] == 0, na.rm = T)/
sum(DE_protein_overlaps[[variable]] == F)
true_to_false_ratio <- true_group_zero_prop/false_group_zero_prop
# Changed this, now it represents the % increase (or decrease) in the proportion of 0s in the TRUE group w.r.t. the FALSE group
if (true_to_false_ratio > 1) {
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, (true_to_false_ratio-1)*100)
} else {
true_to_false_ratio_chi_square <- c(true_to_false_ratio_chi_square, (1-true_to_false_ratio)*100)
}
## Wilcoxon-Mann Whitney test for the non-zero values
temp <- DE_protein_overlaps %>%
filter(Jaccard_index != 0)
x <- temp$Jaccard_index[temp[colnames(temp) == variable] == T]
y <- temp$Jaccard_index[temp[colnames(temp) == variable] == F]
p_vals_wmw <- c(p_vals_wmw, wilcox.test(x, y)$p.value)
## Wilcoxon-Mann Whitney effect size - TURNED THIS INTO "PERCENTAGE" EFFECT SIZE BY DIVIDING BY THE MEAN JACCARD INDEX IN THE GROUP WHERE THE PAIRS OF KOS DO NOT SHARE THE CHARACTERISTIC ("FALSE" GROUP) SO AS TO TRY TO MAKE THIS MORE INTERPRETABLE
effect_size_directions_wmw <- c(effect_size_directions_wmw, ((mean(x)-mean(y))/mean(y))*100)
# Grab a value which shows the percentage of pairs across which each variable was TRUE
perc_same_across_all_pairs <- c(perc_same_across_all_pairs, sum(DE_protein_overlaps[[variable]] == T)/nrow(DE_protein_overlaps))
}
# Put it all together and return it
p_values_chisq_and_wmw <- data.frame(variables, p_vals_chi_square, true_to_false_ratio_chi_square, p_vals_wmw, effect_size_directions_wmw,
perc_same_across_all_pairs)
return(p_values_chisq_and_wmw)
}
# Define the columns we want to provide as input for the above defined function - to test (Chi-square and WMW) the Jaccard Indexes across their levels
df <- DE_protein_overlaps %>%
dplyr::select(Jaccard_index,
same_amino_acid,
same_family,
same_chromosome,
same_amino_acid_and_chr,
same_family_and_chr,
same_aa_charge,
same_aa_type,
Nt_at_1,
Nt_at_2,
Nt_at_3,
Nt_at_4,
Nt_at_5,
Nt_at_6,
Nt_at_7,
Nt_at_8,
Nt_at_9,
Nt_at_10,
Nt_at_11,
Nt_at_12,
Nt_at_13,
Nt_at_14,
Nt_at_15,
Nt_at_16,
Nt_at_17,
Nt_at_18,
Nt_at_19,
Nt_at_20,
Nt_at_21,
Nt_at_22,
Nt_at_23,
Nt_at_24,
Nt_at_25,
Nt_at_26,
Nt_at_27,
Nt_at_28,
Nt_at_29,
Nt_at_30,
Nt_at_31,
Nt_at_32,
Nt_at_33,
Nt_at_34,
Nt_at_35,
Nt_at_36,
Nt_at_37,
Nt_at_38,
Nt_at_39,
Nt_at_40,
Nt_at_41,
Nt_at_42,
Nt_at_43,
Nt_at_44,
Nt_at_45,
Nt_at_46,
Nt_at_47,
Nt_at_48,
Nt_at_49,
Nt_at_40,
Nt_at_51,
Nt_at_52,
Nt_at_53,
Nt_at_54,
Nt_at_55,
Nt_at_56,
Nt_at_57,
Nt_at_58,
Nt_at_59,
Nt_at_60,
Nt_at_61,
Nt_at_62,
Nt_at_63,
Nt_at_64,
Nt_at_65,
Nt_at_66,
Nt_at_67,
Nt_at_68,
Nt_at_69,
Nt_at_70)
# Perform testing and save p-values and effect sizes
p_values_chisq_and_wmw <- perform_chi_square_and_wmw_return_pvalues_and_effect_sizes(df)
# WHEN USING ALL NUCLEOTIDE POSITIONS
# Correct the p-values with BH
p_values_chisq_and_wmw$p_vals_chi_square_adj <- p.adjust(p_values_chisq_and_wmw$p_vals_chi_square, method = "BH")
p_values_chisq_and_wmw$p_vals_wmw_adj <- p.adjust(p_values_chisq_and_wmw$p_vals_wmw, method = "BH")
# Keep only significant rows
p_values_large <- p_values_chisq_and_wmw %>%
filter(p_vals_chi_square_adj < alpha | p_vals_wmw_adj < alpha) %>%
dplyr::select(-c(p_vals_chi_square, p_vals_wmw)) %>%
arrange(p_vals_chi_square_adj)
View(p_values_chisq_and_wmw)
View(p_values_large)
# Look at correlation first of all
cor_mat <- round(cor(p_values_large, use = "pairwise.complete"), 2)
# Look at correlation first of all
temp <- p_values_large
rownames(temp) <- temp[,1]
temp <- temp[,-1]
View(temp)
cor_mat <- round(cor(temp, use = "pairwise.complete"), 2)
View(cor_mat)
# Plots
ggplot(data = p_values_large, aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw)) +
geom_point()
# Plots
ggplot(data = p_values_large, aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw)) +
geom_point() +
geom_text_repel(data = subset(p_values_large, effect_size_directions_wmw > 20), aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw, label = variables))
# Plots
ggplot(data = p_values_large, aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(p_values_large, effect_size_directions_wmw > 20), aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw, label = variables))
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_1)
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_1)
table(master_dataset$Nt_at_33)
# Look at how common each nucleotide is in each of some of the most interesting positions
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_1)
table(master_dataset$Nt_at_33)
# Look at correlation first of all
temp <- p_values_large
rownames(temp) <- temp[,1]
temp <- temp[,-1]
cor_mat <- round(cor(temp, use = "pairwise.complete"), 2)
# Look at how common each nucleotide is in each of some of the most interesting positions
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_1)
table(master_dataset$Nt_at_33)
# Plots
ggplot(data = p_values_large, aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(p_values_large, effect_size_directions_wmw > 20), aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw, label = variables))
# Look at correlation first of all
temp <- p_values_large
rownames(temp) <- temp[,1]
temp <- temp[,-1]
cor_mat <- round(cor(temp, use = "pairwise.complete"), 2)
# Look at how common each nucleotide is in each of some of the most interesting positions
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_1)
table(master_dataset$Nt_at_33)
# Plots
ggplot(data = p_values_large, aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(p_values_large, effect_size_directions_wmw > 20 | perc_same_across_all_pairs > 0.5),
aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw, label = variables))
# Look at correlation first of all
temp <- p_values_large
rownames(temp) <- temp[,1]
temp <- temp[,-1]
cor_mat <- round(cor(temp, use = "pairwise.complete"), 2)
# Look at how common each nucleotide is in each of some of the most interesting positions
table(master_dataset$Nt_at_21)
table(master_dataset$Nt_at_1)
table(master_dataset$Nt_at_33)
# Plots
ggplot(data = p_values_large, aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(p_values_large, effect_size_directions_wmw > 20 | perc_same_across_all_pairs > 0.45),
aes(x = perc_same_across_all_pairs, y = effect_size_directions_wmw, label = variables))
