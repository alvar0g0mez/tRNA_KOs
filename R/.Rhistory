dplyr::distinct(protein, .keep_all = T)
plot_cv_per_strain <- proteomics_data_log2_long %>%
dplyr::select(protein, Strain.Name, CV_strain)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
proteins_with_high_CV <- plot_cv_per_protein$protein[plot_cv_per_protein$CV_protein > 0.4]
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot() +
theme_light()
strains_with_high_CV <- plot_cv_per_strain$Strain.Name[plot_cv_per_strain$CV_strain > 0.35]
View(plot_cv_per_strain)
View(proteomics_data_log2_long)
robust_cv(c(2, -2))
robust_cv(c(2, -1))
robust_cv(c(1.88, -1.88))
robust_cv(c(1.87, -1.88))
robust_cv(c(-1.87, 1.88))
x <- c(-1.87, 1.88)
mean(x)
median(x)
mad(x)
x <- c(-1.882395, 1.879666)
median(x)
mad(x)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4) +
coord_cartesian(ylim = c(-2, 2))
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_boxplot() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4) +
coord_cartesian(ylim = c(-1, 1))
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_boxplot() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4) +
coord_cartesian(ylim = c(0, 1))
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot() +
theme_light() +
coord_cartesian(ylim = c(-2, 2))
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
theme_light() +
coord_cartesian(ylim = c(0, 2))
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_boxplot(outliers = F) +
theme_light()
View(y.protein)
View(y.protein[["E"]])
df_for_manual_dea <- y.protein %>%
dplyr::select(contains("tA(AGC)D") | contains("WT"))
df_for_manual_dea <- y.protein %>%
dplyr::select(contains("tA(AGC)D", "WT"))
df_for_manual_dea <- y.protein %>%
dplyr::select(matches("tA(AGC)D"|"WT"))
df_for_manual_dea <- y.protein %>%
dplyr::select(matches("tA(AGC)D|WT"))
df_for_manual_dea <- y.protein %>%
dplyr::select(matches("tA(AGC)D|WT"))
df_for_manual_dea <- y.protein$E %>%
dplyr::select(matches("tA(AGC)D|WT"))
df_for_manual_dea <- as.data.frame(y.protein$E) %>%
dplyr::select(matches("tA(AGC)D|WT"))
View(df_for_manual_dea)
colnames(df_for_manual_dea)
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
rm(strain)
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
p.vals <- c()
logFCs <- c()
for (i in 1:nrow(df_wts)) {
wts <- as.numeric(df_wts[i,])
strain <- as.numeric(df_strain[i,])
p.vals <- c(p.vals, wilcox.test(wts, strain)$p.value)
logFCs <- c(logFCs, log2(mean(strain)/mean(wts)))
}
p.adjusted <- p.adjust(p.vals, method = "BH")
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"))
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dotted", col = "grey") +
geom_vline(xintercept = -0.5, linetype = "dotted", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dotted", col = "grey") +
theme_light()
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"))
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dotted", col = "grey") +
geom_vline(xintercept = -0.5, linetype = "dotted", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dotted", col = "grey") +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dotted", col = "grey") +
geom_vline(xintercept = -0.5, linetype = "dotted", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dotted", col = "grey") +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dotted", col = "grey") +
geom_vline(xintercept = -0.5, linetype = "dotted", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dotted", col = "grey") +
theme_light() +
labs(title = "Raw p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dotted", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dotted", col = "grey") +
theme_light() +
labs(title = "Raw p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey") +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey") +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey") +
theme_light() +
labs(title = "Raw p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Raw p-values")
View(plot_df)
1*2949*0.05
1/2949*0.05
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1:nrow(plot_df), 1))
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1))
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
p.adjusted.manually = (rank/2949)*0.05)
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
p.adjusted.manually = (rank/2949)*0.05,
significant_manually = case_when(p.val < p.adjusted.manually ~ "Yes",
TRUE ~ "No"))
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
p.adjusted.manually = (rank/2949)*0.05,
significant_manually = case_when(p.vals < p.adjusted.manually ~ "Yes",
TRUE ~ "No"))
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (rank/2949)*0.05,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"),
p.adjusted.manually = min(1, min(plot_df$BH_threshold[plot_df$rank >= rank])))
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= rank])))
}
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
p.vals <- c()
logFCs <- c()
for (i in 1:nrow(df_wts)) {
wts <- as.numeric(df_wts[i,])
strain <- as.numeric(df_strain[i,])
p.vals <- c(p.vals, wilcox.test(wts, strain)$p.value)
logFCs <- c(logFCs, log2(mean(strain)/mean(wts)))
}
p.adjusted <- p.adjust(p.vals, method = "BH")
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (2949/rank)*0.05,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"))
# Get the manually corrected p-values
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Raw p-values")
df_wts <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("WT"))
df_strain <- as.data.frame(y.protein$E) %>%
dplyr::select(contains("tA(AGC)D"))
p.vals <- c()
logFCs <- c()
for (i in 1:nrow(df_wts)) {
wts <- as.numeric(df_wts[i,])
strain <- as.numeric(df_strain[i,])
p.vals <- c(p.vals, wilcox.test(wts, strain)$p.value)
logFCs <- c(logFCs, log2(mean(strain)/mean(wts)))
}
p.adjusted <- p.adjust(p.vals, method = "BH")
plot_df <- data.frame(p.vals, logFCs, p.adjusted) %>%
dplyr::mutate(status_adjusted = case_when(p.adjusted < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.adjusted < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected"),
status_unadjusted = case_when(p.vals < 0.05 & logFCs > 0.5 ~ "Up-regulated",
p.vals < 0.05 & logFCs < 0.5 ~ "Down-regulated",
TRUE ~ "Un-affected")) %>%
dplyr::arrange(p.vals) %>%
dplyr::mutate(rank = seq(1, nrow(plot_df), 1),
BH_threshold = (2949/rank)*p.vals,
significant_manually = case_when(p.vals < BH_threshold ~ "Yes",
TRUE ~ "No"))
# Get the manually corrected p-values
p.adjusted.manually <- c()
for (i in 1:nrow(plot_df)) {
this_rank <- plot_df$rank[i]
p.adjusted.manually <- c(p.adjusted.manually, min(1, min(plot_df$BH_threshold[plot_df$rank >= this_rank])))
}
plot_df$p.adjusted.manually <- p.adjusted.manually
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.adjusted), col = status_adjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Adjusted p-values")
ggplot(data = plot_df, aes(x = logFCs, y = -log10(p.vals), col = status_unadjusted)) +
geom_point() +
geom_vline(xintercept = 0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_vline(xintercept = -0.5, linetype = "dashed", col = "grey", linewidth = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", col = "grey", linewidth = 1) +
theme_light() +
labs(title = "Raw p-values")
View(da)
strains <- unique(sample_layout$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
View(plot_list)
i = 1
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(sample_layout$Strain.Name)
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(da$Strain.Name)
plot_list <- list()
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
# Plot p-value distribution per strain - another check for the volcano plots
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
View(plot_list)
ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
i = 1
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
View(plot_list)
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in length(strains)) {
strain <- strains[i]
temp <- da %>%
filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
p <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
print(p)
}
strains <- unique(da$Strain.Name)
plot_list <- list()
for (i in 1:length(strains)) {
strain <- strains[i]
temp <- da %>%
dplyr::filter(Strain.Name == strain)
plot_list[[i]] <- ggplot(data = temp, aes(x = P.Value)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
xlab("Raw p-value") +
ylab("Count") +
labs(title = glue("{strain}"))
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "tRNA_KOs/Output/Plots/p_value_histograms/pval_hists_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
