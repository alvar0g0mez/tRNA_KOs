}
else {
new_name <- name
}
return(new_name)
}
temp_rownames$Gene.secondaryIdentifier <- sapply(temp_rownames$Gene.secondaryIdentifier, remove_second_systematic_name)
rownames(y.protein$E) <- temp_rownames$Gene.secondaryIdentifier
## Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
## Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
fit <- dpcDE(y.protein, mm)
# Limpa QC plots
#plotDPC(dpcfit)
#plotMDSUsingSEs(y.protein)
## Average expression of each protein across all samples - need to get this working for limpa!!
#hist(rowMeans(y.protein))
#hist(apply(y.protein, 1, var), breaks = 60)
#mean(apply(y.protein, 1, var))
#median(apply(y.protein, 1, var))
# This is what they provide, I wonder if they use the kind of design matrix that Alexis used
# I did not, so I am going to introduce contrasts here? I hope that makes sense?
## Create all contrasts - need to susbtitute parentheses in strain names by dots so that it runs...
treatments <- colnames(fit$coefficients)
treatments <- sapply(treatments, function(x) str_replace(x, "\\(", "."))
treatments <- sapply(treatments, function(x) str_replace(x, "\\)", "."))
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-WT")
## Need to change parentheses to dots in the fit object as well so they match...
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\(", "."))
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\)", "."))
## Introduce the contrasts and run eBayes for them, 10 at a time
da <- list()
batch_size <- 10
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
new_contrast_names <- c()
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
new_name <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
if (grepl(".", new_name)) {
substr(new_name, 3, 3) <- "("
substr(new_name, 7, 7) <- ")"
}
da[[new_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
da[[new_name]]$Strain.Name <- rep(new_name, nrow(da[[new_name]]))
}
}
i = 2
temp <- da[[i]]
View(temp)
# List of dataframes with the proteins that were DE in each KO strain
de_proteins_list <- fromJSON(paste(base_dir, "tRNA_KOs/Data/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""))
## Remove WT dataframe
de_proteins_list <- de_proteins_list[names(de_proteins_list) != "WT"]
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/produced_during_analysis/responsiveness_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".csv", sep="")))
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep="")))
# Prepare for iterations, create empty vectors to which I will save the information (and from which I'll create a dataframe afterwards)
observed_pairs <- c()
strains <- names(de_proteins_list)
strains_1 <- c()
strains_2 <- c()
protein_number_1 <- c()
protein_number_2 <- c()
protein_names_1 <- c()
protein_names_2 <- c()
overlap <- c()
overlap_size <- c()
# First iteration through the strains
for (i in 1:length(strains)) {
strain_1 <- strains[i]
proteins_strain_1 <- de_proteins_list[[strain_1]]
# Second iteration through the strains
for (j in 1:length(strains)) {
strain_2 <- strains[j]
proteins_strain_2 <- de_proteins_list[[strain_2]]
# Make sure we are not comparing a strain to itself
condition_1 = strain_1 != strain_2
# Also make sure that we haven't added this pair of strains before already
strain_pair <- paste(sort(c(strain_1, strain_2)), collapse = ",")
condition_2 = !(strain_pair %in% observed_pairs)
# If both these conditions are covered, analyze the pair of strains and add their characteristics to the output vectors
if (condition_1 & condition_2) {
strains_1 <- c(strains_1, strain_1)
strains_2 <- c(strains_2, strain_2)
protein_number_1 <- c(protein_number_1, length(proteins_strain_1))
protein_number_2 <- c(protein_number_2, length(proteins_strain_2))
protein_names_1 <- c(protein_names_1, paste(proteins_strain_1, collapse = ","))
protein_names_2 <- c(protein_names_2, paste(proteins_strain_2, collapse = ","))
overlap <- c(overlap, paste(intersect(proteins_strain_1, proteins_strain_2), collapse = ","))
overlap_size <- c(overlap_size, length(intersect(proteins_strain_1, proteins_strain_2)))
observed_pairs <- c(observed_pairs, paste(sort(c(strain_1, strain_2)), collapse = ","))
}
}
}
DE_protein_overlaps <- data.frame(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, protein_names_1, protein_names_2, overlap)
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(protein_number_avg = mean(c(protein_number_1, protein_number_2)),
Gene_type_1 = unique(responsiveness$Gene_type[responsiveness$Strain.Name == strains_1])[1],
Gene_type_2 = unique(responsiveness$Gene_type[responsiveness$Strain.Name == strains_2])[1]) %>%
ungroup() %>%
mutate(overlap_over_strain_1 = overlap_size/protein_number_1,
overlap_over_strain_2 = overlap_size/protein_number_2,
overlap_over_union = overlap_size/(protein_number_1+protein_number_2),
overlap_over_log_union = overlap_size/log2(protein_number_1+protein_number_2),
Jaccard_index = overlap_size/(protein_number_1+protein_number_2-overlap_size))
# Match to strain_1
DE_protein_overlaps <- DE_protein_overlaps %>%
dplyr::rename(Strain.Name = strains_1)
temp <- responsiveness %>%
dplyr::select(Strain.Name, anticodon, Amino_acid_1_letter, chromosome_letter, amino_acid_type, amino_acid_charge)
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
dplyr::rename(anticodon_1 = anticodon,
Amino_acid_1 = Amino_acid_1_letter,
chr_1 = chromosome_letter,
aa_type_1 = amino_acid_type,
aa_charge_1 = amino_acid_charge)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
dplyr::rename(strains_1 = Strain.Name,
Nt_at_1_1 = Nt_at_1,
Nt_at_2_1 = Nt_at_2,
Nt_at_3_1 = Nt_at_3,
Nt_at_4_1 = Nt_at_4,
Nt_at_5_1 = Nt_at_5,
Nt_at_6_1 = Nt_at_6,
Nt_at_7_1 = Nt_at_7,
Nt_at_8_1 = Nt_at_8,
Nt_at_9_1 = Nt_at_9,
Nt_at_10_1 = Nt_at_10,
Nt_at_11_1 = Nt_at_11,
Nt_at_12_1 = Nt_at_12,
Nt_at_13_1 = Nt_at_13,
Nt_at_14_1 = Nt_at_14,
Nt_at_15_1 = Nt_at_15,
Nt_at_16_1 = Nt_at_16,
Nt_at_17_1 = Nt_at_17,
Nt_at_18_1 = Nt_at_18,
Nt_at_19_1 = Nt_at_19,
Nt_at_20_1 = Nt_at_20,
Nt_at_21_1 = Nt_at_21,
Nt_at_22_1 = Nt_at_22,
Nt_at_23_1 = Nt_at_23,
Nt_at_24_1 = Nt_at_24,
Nt_at_25_1 = Nt_at_25,
Nt_at_26_1 = Nt_at_26,
Nt_at_27_1 = Nt_at_27,
Nt_at_28_1 = Nt_at_28,
Nt_at_29_1 = Nt_at_29,
Nt_at_30_1 = Nt_at_30,
Nt_at_31_1 = Nt_at_31,
Nt_at_32_1 = Nt_at_32,
Nt_at_33_1 = Nt_at_33,
Nt_at_34_1 = Nt_at_34,
Nt_at_35_1 = Nt_at_35,
Nt_at_36_1 = Nt_at_36,
Nt_at_37_1 = Nt_at_37,
Nt_at_38_1 = Nt_at_38,
Nt_at_39_1 = Nt_at_39,
Nt_at_40_1 = Nt_at_40,
Nt_at_41_1 = Nt_at_41,
Nt_at_42_1 = Nt_at_42,
Nt_at_43_1 = Nt_at_43,
Nt_at_44_1 = Nt_at_44,
Nt_at_45_1 = Nt_at_45,
Nt_at_46_1 = Nt_at_46,
Nt_at_47_1 = Nt_at_47,
Nt_at_48_1 = Nt_at_48,
Nt_at_49_1 = Nt_at_49,
Nt_at_50_1 = Nt_at_50,
Nt_at_51_1 = Nt_at_51,
Nt_at_52_1 = Nt_at_52,
Nt_at_53_1 = Nt_at_53,
Nt_at_54_1 = Nt_at_54,
Nt_at_55_1 = Nt_at_55,
Nt_at_56_1 = Nt_at_56,
Nt_at_57_1 = Nt_at_57,
Nt_at_58_1 = Nt_at_58,
Nt_at_59_1 = Nt_at_59,
Nt_at_60_1 = Nt_at_60,
Nt_at_61_1 = Nt_at_61,
Nt_at_62_1 = Nt_at_62,
Nt_at_63_1 = Nt_at_63,
Nt_at_64_1 = Nt_at_64,
Nt_at_65_1 = Nt_at_65,
Nt_at_66_1 = Nt_at_66,
Nt_at_67_1 = Nt_at_67,
Nt_at_68_1 = Nt_at_68,
Nt_at_69_1 = Nt_at_69,
Nt_at_70_1 = Nt_at_70,
Strain.Name = strains_2)
# Match to strain_2
temp <- responsiveness %>%
dplyr::select(Strain.Name, anticodon, Amino_acid_1_letter, chromosome_letter, amino_acid_type, amino_acid_charge)
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
dplyr::rename(anticodon_2 = anticodon,
Amino_acid_2 = Amino_acid_1_letter,
aa_type_2 = amino_acid_type,
aa_charge_2 = amino_acid_charge,
chr_2 = chromosome_letter)
## Repeat this for the columns only in master_dataset (U_34 and A_34)
temp <- master_dataset %>%
dplyr::select(Strain.Name, contains("Nt_at"))
DE_protein_overlaps <- left_join(DE_protein_overlaps, temp, by = "Strain.Name") %>%
dplyr::rename(strains_2 = Strain.Name,
Nt_at_1_2 = Nt_at_1,
Nt_at_2_2 = Nt_at_2,
Nt_at_3_2 = Nt_at_3,
Nt_at_4_2 = Nt_at_4,
Nt_at_5_2 = Nt_at_5,
Nt_at_6_2 = Nt_at_6,
Nt_at_7_2 = Nt_at_7,
Nt_at_8_2 = Nt_at_8,
Nt_at_9_2 = Nt_at_9,
Nt_at_10_2 = Nt_at_10,
Nt_at_11_2 = Nt_at_11,
Nt_at_12_2 = Nt_at_12,
Nt_at_13_2 = Nt_at_13,
Nt_at_14_2 = Nt_at_14,
Nt_at_15_2 = Nt_at_15,
Nt_at_16_2 = Nt_at_16,
Nt_at_17_2 = Nt_at_17,
Nt_at_18_2 = Nt_at_18,
Nt_at_19_2 = Nt_at_19,
Nt_at_20_2 = Nt_at_20,
Nt_at_21_2 = Nt_at_21,
Nt_at_22_2 = Nt_at_22,
Nt_at_23_2 = Nt_at_23,
Nt_at_24_2 = Nt_at_24,
Nt_at_25_2 = Nt_at_25,
Nt_at_26_2 = Nt_at_26,
Nt_at_27_2 = Nt_at_27,
Nt_at_28_2 = Nt_at_28,
Nt_at_29_2 = Nt_at_29,
Nt_at_30_2 = Nt_at_30,
Nt_at_31_2 = Nt_at_31,
Nt_at_32_2 = Nt_at_32,
Nt_at_33_2 = Nt_at_33,
Nt_at_34_2 = Nt_at_34,
Nt_at_35_2 = Nt_at_35,
Nt_at_36_2 = Nt_at_36,
Nt_at_37_2 = Nt_at_37,
Nt_at_38_2 = Nt_at_38,
Nt_at_39_2 = Nt_at_39,
Nt_at_40_2 = Nt_at_40,
Nt_at_41_2 = Nt_at_41,
Nt_at_42_2 = Nt_at_42,
Nt_at_43_2 = Nt_at_43,
Nt_at_44_2 = Nt_at_44,
Nt_at_45_2 = Nt_at_45,
Nt_at_46_2 = Nt_at_46,
Nt_at_47_2 = Nt_at_47,
Nt_at_48_2 = Nt_at_48,
Nt_at_49_2 = Nt_at_49,
Nt_at_50_2 = Nt_at_50,
Nt_at_51_2 = Nt_at_51,
Nt_at_52_2 = Nt_at_52,
Nt_at_53_2 = Nt_at_53,
Nt_at_54_2 = Nt_at_54,
Nt_at_55_2 = Nt_at_55,
Nt_at_56_2 = Nt_at_56,
Nt_at_57_2 = Nt_at_57,
Nt_at_58_2 = Nt_at_58,
Nt_at_59_2 = Nt_at_59,
Nt_at_60_2 = Nt_at_60,
Nt_at_61_2 = Nt_at_61,
Nt_at_62_2 = Nt_at_62,
Nt_at_63_2 = Nt_at_63,
Nt_at_64_2 = Nt_at_64,
Nt_at_65_2 = Nt_at_65,
Nt_at_66_2 = Nt_at_66,
Nt_at_67_2 = Nt_at_67,
Nt_at_68_2 = Nt_at_68,
Nt_at_69_2 = Nt_at_69,
Nt_at_70_2 = Nt_at_70)
# Come up with columns that require matching between these 2 sets of them
DE_protein_overlaps <- DE_protein_overlaps %>%
mutate(same_family = anticodon_1 == anticodon_2,
same_amino_acid = Amino_acid_1 == Amino_acid_2,
same_chromosome = chr_1 == chr_2,
same_family_and_chr = same_family&same_chromosome,
same_amino_acid_and_chr = same_amino_acid&same_chromosome,
same_aa_type = aa_type_1 == aa_type_2,
same_aa_charge = aa_charge_1 == aa_charge_2,
Nt_at_1 = Nt_at_1_1 == Nt_at_1_2,
Nt_at_2 = Nt_at_2_1 == Nt_at_2_2,
Nt_at_3 = Nt_at_3_1 == Nt_at_3_2,
Nt_at_4 = Nt_at_4_1 == Nt_at_4_2,
Nt_at_5 = Nt_at_5_1 == Nt_at_5_2,
Nt_at_6 = Nt_at_6_1 == Nt_at_6_2,
Nt_at_7 = Nt_at_7_1 == Nt_at_7_2,
Nt_at_8 = Nt_at_8_1 == Nt_at_8_2,
Nt_at_9 = Nt_at_9_1 == Nt_at_9_2,
Nt_at_10 = Nt_at_10_1 == Nt_at_10_2,
Nt_at_11 = Nt_at_11_1 == Nt_at_11_2,
Nt_at_12 = Nt_at_12_1 == Nt_at_12_2,
Nt_at_13 = Nt_at_13_1 == Nt_at_13_2,
Nt_at_14 = Nt_at_14_1 == Nt_at_14_2,
Nt_at_15 = Nt_at_15_1 == Nt_at_15_2,
Nt_at_16 = Nt_at_16_1 == Nt_at_16_2,
Nt_at_17 = Nt_at_17_1 == Nt_at_17_2,
Nt_at_18 = Nt_at_18_1 == Nt_at_18_2,
Nt_at_19 = Nt_at_19_1 == Nt_at_19_2,
Nt_at_20 = Nt_at_20_1 == Nt_at_30_2,
Nt_at_21 = Nt_at_21_1 == Nt_at_21_2,
Nt_at_22 = Nt_at_22_1 == Nt_at_22_2,
Nt_at_23 = Nt_at_23_1 == Nt_at_23_2,
Nt_at_24 = Nt_at_24_1 == Nt_at_24_2,
Nt_at_25 = Nt_at_25_1 == Nt_at_25_2,
Nt_at_26 = Nt_at_26_1 == Nt_at_26_2,
Nt_at_27 = Nt_at_27_1 == Nt_at_27_2,
Nt_at_28 = Nt_at_28_1 == Nt_at_28_2,
Nt_at_29 = Nt_at_29_1 == Nt_at_29_2,
Nt_at_30 = Nt_at_30_1 == Nt_at_30_2,
Nt_at_31 = Nt_at_31_1 == Nt_at_31_2,
Nt_at_32 = Nt_at_32_1 == Nt_at_32_2,
Nt_at_33 = Nt_at_33_1 == Nt_at_33_2,
Nt_at_34 = Nt_at_34_1 == Nt_at_34_2,
Nt_at_35 = Nt_at_35_1 == Nt_at_35_2,
Nt_at_36 = Nt_at_36_1 == Nt_at_36_2,
Nt_at_37 = Nt_at_37_1 == Nt_at_37_2,
Nt_at_38 = Nt_at_38_1 == Nt_at_38_2,
Nt_at_39 = Nt_at_39_1 == Nt_at_39_2,
Nt_at_40 = Nt_at_40_1 == Nt_at_40_2,
Nt_at_41 = Nt_at_41_1 == Nt_at_41_2,
Nt_at_42 = Nt_at_42_1 == Nt_at_42_2,
Nt_at_43 = Nt_at_43_1 == Nt_at_43_2,
Nt_at_44 = Nt_at_44_1 == Nt_at_44_2,
Nt_at_45 = Nt_at_45_1 == Nt_at_45_2,
Nt_at_46 = Nt_at_46_1 == Nt_at_46_2,
Nt_at_47 = Nt_at_47_1 == Nt_at_47_2,
Nt_at_48 = Nt_at_48_1 == Nt_at_48_2,
Nt_at_49 = Nt_at_49_1 == Nt_at_49_2,
Nt_at_50 = Nt_at_50_1 == Nt_at_50_2,
Nt_at_51 = Nt_at_51_1 == Nt_at_51_2,
Nt_at_52 = Nt_at_52_1 == Nt_at_52_2,
Nt_at_53 = Nt_at_53_1 == Nt_at_53_2,
Nt_at_54 = Nt_at_54_1 == Nt_at_54_2,
Nt_at_55 = Nt_at_55_1 == Nt_at_55_2,
Nt_at_56 = Nt_at_56_1 == Nt_at_56_2,
Nt_at_57 = Nt_at_57_1 == Nt_at_57_2,
Nt_at_58 = Nt_at_58_1 == Nt_at_58_2,
Nt_at_59 = Nt_at_59_1 == Nt_at_59_2,
Nt_at_60 = Nt_at_60_1 == Nt_at_60_2,
Nt_at_61 = Nt_at_61_1 == Nt_at_61_2,
Nt_at_62 = Nt_at_62_1 == Nt_at_62_2,
Nt_at_63 = Nt_at_63_1 == Nt_at_63_2,
Nt_at_64 = Nt_at_64_1 == Nt_at_64_2,
Nt_at_65 = Nt_at_65_1 == Nt_at_65_2,
Nt_at_66 = Nt_at_66_1 == Nt_at_66_2,
Nt_at_67 = Nt_at_67_1 == Nt_at_67_2,
Nt_at_68 = Nt_at_68_1 == Nt_at_68_2,
Nt_at_69 = Nt_at_69_1 == Nt_at_69_2,
Nt_at_70 = Nt_at_70_1 == Nt_at_70_2) %>%
dplyr::select(-c(Nt_at_1_1, Nt_at_1_2, Nt_at_2_1, Nt_at_2_2, Nt_at_3_1, Nt_at_3_2, Nt_at_4_1, Nt_at_4_2, Nt_at_5_1, Nt_at_5_2, Nt_at_6_1, Nt_at_6_2, Nt_at_7_1, Nt_at_7_2, Nt_at_8_1, Nt_at_8_2, Nt_at_9_1, Nt_at_9_2, Nt_at_10_1, Nt_at_10_2, Nt_at_11_1, Nt_at_11_2, Nt_at_12_1, Nt_at_12_2, Nt_at_13_1, Nt_at_13_2, Nt_at_14_1, Nt_at_14_2, Nt_at_15_1, Nt_at_15_2, Nt_at_16_1, Nt_at_16_2, Nt_at_17_1, Nt_at_17_2, Nt_at_18_1, Nt_at_18_2, Nt_at_19_1, Nt_at_19_2, Nt_at_20_1, Nt_at_20_2, Nt_at_21_1, Nt_at_21_2, Nt_at_22_1, Nt_at_22_2, Nt_at_23_1, Nt_at_23_2, Nt_at_24_1, Nt_at_24_2, Nt_at_25_1, Nt_at_25_2, Nt_at_26_1, Nt_at_26_2, Nt_at_27_1, Nt_at_27_2, Nt_at_28_1, Nt_at_28_2, Nt_at_29_1, Nt_at_29_2, Nt_at_30_1, Nt_at_30_2, Nt_at_31_1, Nt_at_31_2, Nt_at_32_1, Nt_at_32_2, Nt_at_33_1, Nt_at_33_2, Nt_at_34_1, Nt_at_34_2, Nt_at_35_1, Nt_at_35_2, Nt_at_36_1, Nt_at_36_2, Nt_at_37_1, Nt_at_37_2, Nt_at_38_1, Nt_at_38_2, Nt_at_39_1, Nt_at_39_2, Nt_at_40_1, Nt_at_40_2, Nt_at_41_1, Nt_at_41_2, Nt_at_42_1, Nt_at_42_2, Nt_at_43_1, Nt_at_43_2, Nt_at_44_1, Nt_at_44_2, Nt_at_45_1, Nt_at_45_2, Nt_at_46_1, Nt_at_46_2, Nt_at_47_1, Nt_at_47_2, Nt_at_48_1, Nt_at_48_2, Nt_at_49_1, Nt_at_49_2, Nt_at_50_1, Nt_at_50_2, Nt_at_51_1, Nt_at_51_2, Nt_at_52_1, Nt_at_52_2, Nt_at_53_1, Nt_at_53_2, Nt_at_54_1, Nt_at_54_2, Nt_at_55_1, Nt_at_55_2, Nt_at_56_1, Nt_at_56_2, Nt_at_57_1, Nt_at_57_2, Nt_at_58_1, Nt_at_58_2, Nt_at_59_1, Nt_at_59_2, Nt_at_60_1, Nt_at_60_2, Nt_at_61_1, Nt_at_61_2, Nt_at_62_1, Nt_at_62_2, Nt_at_63_1, Nt_at_63_2, Nt_at_64_1, Nt_at_64_2, Nt_at_65_1, Nt_at_65_2, Nt_at_66_1, Nt_at_66_2, Nt_at_67_1, Nt_at_67_2, Nt_at_68_1, Nt_at_68_2, Nt_at_69_1, Nt_at_69_2, Nt_at_70_1, Nt_at_70_2))
# Get columns based on strain_1 and strain_2, but which reorganize this: the one with more DEPs to one column, the one with less DEPs to the other
# Just so that I can check the overlap_size/amount of DEPs in the KO strain with less out of the pair. Not sure if too important but oh well
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(Strain_more_DEPs = max(protein_number_1, protein_number_2),
Strain_less_DEPs = min(protein_number_1, protein_number_2),
Ratio_more_to_less_DEPs = Strain_more_DEPs/Strain_less_DEPs)
# Add columns where I combine the strings for the anticodons and amino acids for the 2 strains (always using sort() before so that they are unique)
DE_protein_overlaps <- DE_protein_overlaps %>%
rowwise() %>%
mutate(both_anticodons = paste(sort(c(anticodon_1, anticodon_2)), collapse = "-"),
both_amino_acids = paste(sort(c(Amino_acid_1, Amino_acid_2)), collapse = "-"),
both_aa_types = paste(sort(c(aa_type_1, aa_type_2)), collapse = "-"),
both_aa_charges = paste(sort(c(aa_charge_1, aa_charge_2)), collapse = "-"))
# Put columns with protein names as the last ones
DE_protein_overlaps <- DE_protein_overlaps %>%
relocate(protein_names_1, .after = last_col()) %>%
relocate(protein_names_2, .after = last_col()) %>%
relocate(overlap, .after = last_col())
fwrite(DE_protein_overlaps, paste(base_dir, "tRNA_KOs/Data/compare_DEPs_across_KOs/DE_protein_overlaps_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".tsv", sep=""))
# Subset the dataframe
high_jaccard_df <- DE_protein_overlaps %>%
filter(Jaccard_index >= 0.5) %>%
mutate(same_family = case_when(same_family == T ~ "Yes",
TRUE ~ "No"),
same_amino_acid = case_when(same_amino_acid == T ~ "Yes",
TRUE ~ "No"))
# Look at the strains in this subset of the data
sort(table(high_jaccard_df$strains_1))
sort(table(high_jaccard_df$strains_2))
# Look at the anticodons and amino acids in this subset of the data
sort(table(high_jaccard_df$both_anticodons))
sort(table(high_jaccard_df$both_amino_acids))
# Look at the amino acid types and charges in this subset of the data
sort(table(high_jaccard_df$both_aa_types))
sort(table(high_jaccard_df$both_aa_charges))
# Barplot of these strains by amino acid types
ggplot(data = high_jaccard_df, aes(x = fct_rev(fct_infreq(both_aa_types)))) +
geom_bar() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Distribution of the KO strain pairs with a Jaccard Index > 0.5",
subtitle = "Classified based on amino acid types of the 2 KOs") +
xlab("Amino acid types") +
ylab("Count")
# Barplot of these strains by amino acid charges
ggplot(data = high_jaccard_df, aes(x = fct_rev(fct_infreq(both_aa_charges)))) +
geom_bar() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Distribution of the KO strain pairs with a Jaccard Index > 0.5",
subtitle = "Classified based on amino acid charges of the 2 KOs") +
xlab("Amino acid charges") +
ylab("Count")
# Barplot of these strains by whether they have the same anticodon
ggplot(data = high_jaccard_df, aes(x = fct_rev(fct_infreq(same_family)))) +
geom_bar() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Distribution of the KO strain pairs with a Jaccard Index > 0.5",
subtitle = "Classified based on whether the 2 KOs were for the same anticodon") +
xlab("Same family?") +
ylab("Count")
# Barplot of these strains by whether they carry the same amino acid
ggplot(data = high_jaccard_df, aes(x = fct_rev(fct_infreq(same_amino_acid)))) +
geom_bar() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
labs(title = "Distribution of the KO strain pairs with a Jaccard Index > 0.5",
subtitle = "Classified based on whether the 2 KOs were for tRNAs carrying the same amino acid") +
xlab("Same amino acid?") +
ylab("Count")
# Load protein overlaps dataset created in previous section, with all possible intersections
DE_protein_overlaps <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/compare_DEPs_across_KOs/DE_protein_overlaps_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".tsv", sep="")))
# Master dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/basic/master_tRNA_dataset.csv", sep = "")))
# Keep only pairs where the 2 KOs belong to the same family
DE_protein_overlaps_same_family <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2)
# JI vs. average nDEP
ggplot(data = DE_protein_overlaps, aes(x = protein_number_avg, y = Jaccard_index)) +
geom_point(size = 0.2) +
theme_light()
# JI vs. average nDEP - color by same family
ggplot(data = DE_protein_overlaps, aes(x = protein_number_avg, y = Jaccard_index, col = same_family)) +
geom_point(size = 0.2) +
theme_light()
# JI vs. average nDEP - for those pairs in the same family only
ggplot(data = DE_protein_overlaps_same_family, aes(x = protein_number_avg, y = Jaccard_index)) +
geom_point(size = 1) +
theme_light()
# This is what happens if I filter based on major - minor (defined by me)
DE_protein_overlaps_major_within_family <- DE_protein_overlaps %>%
filter(anticodon_1 == anticodon_2,
Gene_type_1 == "Major" & Gene_type_2 == "Major")
# Get a version of this which I can screenshot for a slide
temp <- DE_protein_overlaps_major_within_family %>%
dplyr::select(strains_1, strains_2, protein_number_1, protein_number_2, overlap_size, Jaccard_index)
# Grab the strains in here and put them into a vector so I can filter the EA results by them
paired_major_strains <- sort(unique(c(as.character(DE_protein_overlaps_major_within_family$strains_1), as.character(DE_protein_overlaps_major_within_family$strains_2))))
View(DE_protein_overlaps_major_within_family)
View(da)
colnames(da[[2]])
i = 1
strain_1 <- DE_protein_overlaps_major_within_family$strains_1[i]
strain_2 <- DE_protein_overlaps_major_within_family$strains_2[i]
temp <- da[[strain_1]] %>%
filter(adj.P.Val < 0.05 & abs(logFC) > 0.5)
View(temp)
for (i in 1:nrow(DE_protein_overlaps_major_within_family)) {
strain_1 <- DE_protein_overlaps_major_within_family$strains_1[i]
strain_2 <- DE_protein_overlaps_major_within_family$strains_2[i]
print(glue("RESULST FOR THE FOLLOWING STRAIN PAIR: {strain_1}{strain_2}"))
temp_1 <- da[[strain_1]] %>%
filter(adj.P.Val < 0.05 & abs(logFC) > 0.5)
temp_2 <- da[[strain_2]] %>%
filter(adj.P.Val < 0.05 & abs(logFC) > 0.5)
print(glue("{strain_1}"))
print(rownames(temp_1))
print(glue("{strain_2}"))
print(rownames(temp_2))
}
for (i in 1:nrow(DE_protein_overlaps_major_within_family)) {
strain_1 <- DE_protein_overlaps_major_within_family$strains_1[i]
strain_2 <- DE_protein_overlaps_major_within_family$strains_2[i]
print(glue("RESULST FOR THE FOLLOWING STRAIN PAIR: {strain_1}{strain_2}"))
temp_1 <- da[[strain_1]] %>%
filter(adj.P.Val < 0.05 & abs(logFC) > 0.5)
temp_2 <- da[[strain_2]] %>%
filter(adj.P.Val < 0.05 & abs(logFC) > 0.5)
print(glue("{strain_1}"))
print(cat(rownames(temp_1), sep = ", "))
print(glue("{strain_2}"))
print(cat(rownames(temp_2), sep=", "))
}
