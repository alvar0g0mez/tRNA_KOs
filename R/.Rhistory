sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
# Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
# Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Come up with new colnames
new_names <- c("sample_group", "genes")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[5:nrow(proteomics_raw), colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
first_rows <- proteomics_raw[1:4, colnames(proteomics_raw) == strain]
out <- c(first_rows[,1], apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%             # Remove rows for which "genes" column is empty or has "Genes" as value
dplyr::select(-genes & !contains('QC')) %>%                                  # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'sample_group')                              # Convert gene name column to rownames
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Add sample_names to sample_layout so that we can filter out in the next line
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Remove the sub-batch that went wrong
samples_in_wrong_batch <- sample_layout$sample_names[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, first_rows, out, batch_num, i, new_name, new_names, strain_and_batch, trna_name,
samples_in_wrong_batch, working_from)
View(trna_ko)
detected_proteins <- match_systematic_and_standard_protein_names(data = rownames(trna_ko),
yeastmine = yeastmine,
input = "standard",
simplify = T)
detected_proteins
# See how many tRNA synthetases are in there
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)
sum(detected_proteins %in% synthetases$Gene.secondaryIdentifier)/length(unique(synthetases$Gene.secondaryIdentifier))
# Check which ones
synths_detected <- synthetases[synthetases$Gene.secondaryIdentifier %in% detected_proteins,]
View(synths_detected)
sum(synths_detected$mitochondrial == "Yes")
sum(synthetases$mitochondrial == "No")
temp <- synthetases$Gene.secondaryIdentifier[synthetases$mitochondrial == "No"]
synths_detected[!(synths_detected$Gene.secondaryIdentifier %in% temp)]
synths_detected$Gene.secondaryIdentifier[!(synths_detected$Gene.secondaryIdentifier %in% temp) & (synths_detected$mitochondrial == "No")]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synths_detected$mitochondrial == "No")]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
synthetases$Gene.secondaryIdentifier[!(synthetases$Gene.secondaryIdentifier %in% synths_detected$Gene.secondaryIdentifier) & (synthetases$mitochondrial == "No")]
# Save this final version of the synthetase data to use it later
fwrite(synthetases, paste(base_dir, "Data/trna_synthetases.csv", sep=""))
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.05
de_proteins_list_005 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep=""))
## Remove WT dataframe
de_proteins_list_005 <- de_proteins_list_005[names(de_proteins_list_005) != "WT"]
de_synthetases <- list()
for (i in 1:length(de_proteins_list_005)) {
de_proteins <- de_proteins_list_005[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases[[names(de_proteins_list_005)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_001 <- list()
for (i in 1:length(de_proteins_list_001)) {
de_proteins <- de_proteins_list_001[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases_001[[names(de_proteins_list_001)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases_001)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
de_synthetases_005 <- list()
for (i in 1:length(de_proteins_list_005)) {
de_proteins <- de_proteins_list_005[[i]]
temp <- de_proteins[de_proteins %in% chu_synths_new$Gene.secondaryIdentifier]
if (length(temp) > 0) {
de_synthetases_005[[names(de_proteins_list_005)[i]]] <- temp
}
}
# Get a table summarizing this
temp <- unlist(de_synthetases_005)
sort(table(temp))
# Remove unnecessary variables
rm(de_proteins, temp)
grab_de_synthetases_dfs <- function(da_full, de_synthetases) {
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
rename(Synthetase_systematic = Synthetase)
return(de_synthetases_dfs)
}
de_synthetases_dfs_001 <- grab_de_synthetases_dfs(da_full, de_synthetases_001)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
library(interactions)
library(performance)
library(MASS)
library(jsonlite)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Number of nDEP from which a tRNA is considered "major" (this threshold value should be included)
threshold_major <- 2
# Set directories to be used
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
if (working_from == "charite") {
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data and sample layout - from the S drive
#proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_complete.tsv', header = T)
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# Extract the date for when each sample was run
sample_layout <- sample_layout %>%
mutate(date = str_extract(File.Name, "(?<=/30-0092/).*?(?=_Z2_KTT_)"))
# Create a column that simply has the info of if each sample is a KO strain or a WT replicate
sample_layout <- sample_layout %>%
mutate(Strain.Type = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ "KO"))
# Add a column with the following format: Analysis.Plate.96_Replicate
sample_layout <- sample_layout %>%
mutate(Analysis.Plate.96_Replicate = paste(Analysis.Plate.96, Replicate, sep="_"))
# Add a column which identifies samples in Analysis.Plate.96 = 3, Replicate = 2
sample_layout <- sample_layout %>%
mutate(Wrong_batch = case_when(Analysis.Plate.96_Replicate == "3_2" ~ "Yes",
TRUE ~ "No"))
# Merge with master dataframe
colnames(master_dataset)[colnames(master_dataset) == "gene_name"] <- "Strain.Name"
sample_layout <- sample_layout %>%
dplyr::select(-Anticodon) %>%
left_join(master_dataset, by = c("Strain.Name"))
# Come up with new colnames
new_names <- c("sample_group", "genes")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics_raw)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics_raw[5:nrow(proteomics_raw), colnames(proteomics_raw) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
first_rows <- proteomics_raw[1:4, colnames(proteomics_raw) == strain]
out <- c(first_rows[,1], apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
proteomics_raw <- cbind(proteomics_raw, out_temp)
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%             # Remove rows for which "genes" column is empty or has "Genes" as value
dplyr::select(-genes & !contains('QC')) %>%                                  # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'sample_group')                              # Convert gene name column to rownames
# Convert to a numeric dataframe
trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
# Add sample_names to sample_layout so that we can filter out in the next line
sample_layout <- sample_layout %>%
mutate(sample_names = case_when(Strain.ID == "WT" ~ paste(gsub("-", "_", Sample.ID), ".0", Replicate, sep=""),
TRUE ~ paste(Strain.Name, "_0", Replicate, sep="")))
# Remove the sub-batch that went wrong
samples_in_wrong_batch <- sample_layout$sample_names[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, first_rows, out, batch_num, i, new_name, new_names, strain_and_batch, trna_name,
samples_in_wrong_batch, working_from)
# Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$sample_names == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
# Generate design matrix
mm <- model.matrix(~trna_levels)
colnames(mm) <- levels(trna_levels)
voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
# In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
zeros_to_ones <- function(x) {
if (x == 0) {return(1)}
else {return(x)}
}
trna_ko_log <- trna_ko
trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
trna_ko_log <- log2(trna_ko_log)
# Fit linear model
fit <- lmFit(trna_ko_log, mm)                                 # Notice the log2 here
fit2 <- eBayes(fit, trend = TRUE)
# Identify differentially expressed proteins
da <- list()
for (i in colnames(mm)) {
da[[i]] <- topTable(fit2, coef = i, adjust = 'BH', number = Inf, sort.by = 'none')
}
# At the alpha specified at the top of the document
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_001 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < alpha]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_001[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep="")
write_json(de_proteins_list_001, path=output_file)
# At alpha= 0.05
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list_005 <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[na.omit(temp$adj.P.Val) < 0.05]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list_005[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_005.json", sep="")
write_json(de_proteins_list_005, path=output_file)
write_json(da, path=paste(base_dir, "Data/Other/enrichment_analysis/da.json", sep=""))
# Format data
da <- bind_rows(da) %>%
mutate(protein = rep(rownames(da[[1]]), times = length(da)),
Strain.Name = rep(names(da), each = nrow(da[[1]])), .before = 1) %>%
`rownames<-`(NULL) %>%
dplyr::select(protein, Strain.Name, logFC, adj.P.Val) %>%
filter(Strain.Name != 'WT') %>%                              # From here on in this function it's added by me
mutate(diffexpressed = case_when(logFC > lfc_threshold & adj.P.Val < alpha ~ "Up_regulated",
logFC < -lfc_threshold & adj.P.Val < alpha ~ "Down_regulated",
TRUE ~ "Not_significant"))
# Add a column to da with the number of replicates per KO - by me - THIS DOESN'T REALLY MAKE SENSE INSIDE THIS FUNCTION BUT WHEN DOING DE FOR ALL PLATES AT ONCE IT WAS, SO I'LL KEEP IT JUST IN CASE
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= log2(lfc_threshold) & adj.P.Val <= 0.01, na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(AA = str_sub(Strain.Name, 2, 2),
chromosome = str_extract(str_remove(str_sub(Strain.Name, 1, -4), '[:digit:]$'), '[:alpha:]$'),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))")) %>%
arrange(AA) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Save responsiveness dataset
fwrite(responsiveness, paste(base_dir, "Data/responsiveness.csv", sep=""))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(DE, de_proteins_list_001, de_proteins_list_005, fit, fit2, KOs_replicates, mm, sample_layout, temp, trna_ko_log,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, trna_levels, unique_KOs)
grab_de_synthetases_dfs <- function(da_full, de_synthetases) {
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
rename(Synthetase_systematic = Synthetase)
return(de_synthetases_dfs)
}
de_synthetases_dfs_001 <- grab_de_synthetases_dfs(da, de_synthetases_001)
grab_de_synthetases_dfs <- function(da_full, de_synthetases, yeastmine) {
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
rename(Synthetase_systematic = Synthetase)
return(de_synthetases_dfs)
}
de_synthetases_dfs_001 <- grab_de_synthetases_dfs(da, de_synthetases_001, yeastmine)
# Load YeastMine dataset
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
grab_de_synthetases_dfs <- function(da_full, de_synthetases, yeastmine) {
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
# Turn the resulting list into a single dataframe
de_synthetases_df <- bind_rows(de_synthetases_dfs)
rownames(de_synthetases_df) <- NULL
# Add a column with the standard names for the tRNA synthetase genes
temp <- match_systematic_and_standard_protein_names(data = as.character(de_synthetases_df$Synthetase),
yeastmine = yeastmine,
input = "systematic",
simplify = T)
de_synthetases_df$Synthetase_standard <- temp
de_synthetases_df <- de_synthetases_df %>%
rename(Synthetase_systematic = Synthetase)
return(de_synthetases_dfs)
}
de_synthetases_dfs_001 <- grab_de_synthetases_dfs(da, de_synthetases_001, yeastmine)
da_full = da
de_synthetases = de_synthetases_001
de_synthetases_dfs <- list()
for (i in 1:length(da_full)) {
strain_name <- names(da_full)[[i]]
strains_with_de_synths <- names(de_synthetases)
if (strain_name %in% strains_with_de_synths) {
print(i)
temp <- da_full[[i]]
rownames(temp) <- match_systematic_and_standard_protein_names(data = rownames(temp),
yeastmine = yeastmine,
input = "standard",
simplify = T)
temp <- temp[rownames(temp) %in% de_synthetases[[strain_name]],]
temp$Synthetase <- rownames(temp)
temp$Strain.Name <- strain_name
de_synthetases_dfs[[strain_name]] <- temp
}
}
View(da)
View(de_synthetases)
View(da)
