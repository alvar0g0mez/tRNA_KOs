master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
} else
if (working_from == "home") {
# Proteomics data - from the S drive
if (dataset == "outlier_removed") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
}
else if (dataset == "batchcorrected_onWTs") {
proteomics_raw <- read.delim2('/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_driftcorrected_batchcorrected_onWTs.tsv', header = T)
}
# Sample layout - from the S drive
sample_layout <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/proteomics_data/sample_layout_alvaro.tsv"))
# My data - in the project folder - when I open the project, the directory is set to its location
## The master tRNA dataset
master_dataset <- as.data.frame(fread("/home/alvaro/MyStuff/tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv"))
## Import the functions I have created in another file
source("/home/alvaro/MyStuff/tRNA_KOs/Code/R/Mine/0.general_use_functions.R")
}
# The ODs
od <- as.data.frame(fread(paste(base_dir, "Data/OD_final.csv", sep = "")))
# Phenotypic data
phenotypic_data <- as.data.frame(fread(paste(base_dir, "Data/Other/Articles/bloom_ackermann_2014/phenotypic_results_full.tsv", sep="")))
## Remove annoying unnecessary (?) column (UniProt IDs)
#if (dataset == "outlier_removed")
#  {proteomics_raw <- proteomics_raw %>%
#    dplyr::select(-sample) %>%
#    rename(genes = X) %>%
#    filter(!(genes %in% c('', 'Genes', 'Protein.Group'))) %>%                         # Remove rows for which "genes" column is empty or has "Genes" as value
#    column_to_rownames(var = 'genes')}                                                # Convert gene name column to rownames
#
#if (dataset == "batchcorrected_onWTs")
#    {proteomics_raw <- proteomics_raw %>%
#    dplyr::select(-Protein.Group) %>%
#      dplyr::rename(genes = Genes) %>%
#      column_to_rownames(var = 'genes')}
#
#
## Come up with new colnames
#new_names <- c()
#current_names <- colnames(proteomics_raw)
#new_names <- c(new_names, as.character(sample_layout$final_proteomics_colnames[match(current_names, sample_layout$raw_proteomics_colnames)]))
#colnames(proteomics_raw) <- new_names
#
#
## Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated #samples
### Come up with the averages
#n_occur <- data.frame(table(colnames(proteomics_raw)))
#repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
#
#out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics_raw)))
#for (i in 1:length(repeated_samples)) {
#  strain <- repeated_samples[i]
#  temp <- proteomics_raw[, colnames(proteomics_raw) == strain]
#  temp[,1] <- as.numeric(temp[,1])
#  temp[,2] <- as.numeric(temp[,2])
#  out <- c(apply(temp, 1, mean))
#  out_temp[,i] <- out
#}
#colnames(out_temp) <- repeated_samples
#
### Remove original columns from dataframe and add the averaged ones
#proteomics_raw <- proteomics_raw[,!(colnames(proteomics_raw) %in% repeated_samples)]
#proteomics_raw <- cbind(proteomics_raw, out_temp)
#
#
## Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
#trna_ko <- proteomics_raw %>%
#  dplyr::select(!contains('QC'))                                 # Remove QCs columns
#
#
## Convert to a numeric dataframe
#trna_ko <- as.data.frame(apply(trna_ko, 2, as.numeric), row.names =  rownames(trna_ko))
#
## Remove the sub-batch that went wrong
#if (dataset == "outlier_removed") {
#  samples_in_wrong_batch <- sample_layout$final_proteomics_colnames[sample_layout$Analysis.Plate.96_Replicate == "3_2"]
#trna_ko <- trna_ko[,!(colnames(trna_ko) %in% samples_in_wrong_batch)]
#}
#
## Turn the rownames to all be systematic gene names rather than standard and systematic mixed
#yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
#old_rownames <- rownames(trna_ko)
#new_rownames <- match_systematic_and_standard_protein_names(data = old_rownames,
#                                                            yeastmine = yeastmine,
#                                                            input = "standard",
#                                                            simplify = T)
#rownames(trna_ko) <- new_rownames
#
## Save this last dataset for later usage elsewhere
##if (dataset == "outlier_removed") {
##  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_outlier_removed.tsv", sep=""), row.names = T)
##}
##if (dataset == "batchcorrected_onWTs") {
##  fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep=""), row.names = T)
##}
#fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe.tsv", sep=""), row.names = T)
#
## Remove unnecessary objects
##rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, out, i, new_names, samples_in_wrong_batch, current_names, old_rownames, new_rownames, #yeastmine)
## Get the names of all KOs we have, and set WT as the reference
#trna_levels <- c()
#for (i in 1:ncol(trna_ko)) {
#  sample_name <- colnames(trna_ko)[i]
#  strain_name <- sample_layout$Strain.Name.Dots[sample_layout$final_proteomics_colnames == sample_name]
#  if (length(strain_name) > 1) {
#    strain_name <- strain_name[1]
#  }
#  trna_levels <- c(trna_levels, strain_name)
#}
#trna_levels <- as.factor(trna_levels)
#trna_levels <- relevel(trna_levels, ref = "WT")
#
## Generate design matrix
#mm <- model.matrix(~ 0 + trna_levels)
#colnames(mm) <- levels(trna_levels)
#voom(trna_ko, mm, plot = TRUE)                                  # This I still need to look into!
#
## In order to fit linear model we need to get log2(data), but that causes log2(0) = -Inf --> I am turning 0s to 1s before log2 --> IDK HOW CORRECT THIS IS
#zeros_to_ones <- function(x) {
#  if (x == 0) {return(1)}
#  else {return(x)}
#}
#trna_ko_log <- trna_ko
##trna_ko_log[] <- apply(trna_ko, c(1,2), zeros_to_ones)
##trna_ko_log <- log2(trna_ko_log)
#
#
## Quality control
### Average expression of each protein across all samples
#hist(rowMeans(trna_ko_log))
#hist(apply(trna_ko_log, 1, var), breaks = 60)
#mean(apply(trna_ko_log, 1, var))
#median(apply(trna_ko_log, 1, var))
# Expression is pretty much normally distributed, we'll get rid of those proteins in the bottom end
# Variability across samples is extremely low though, so the vast majority of genes are detected pretty much the same across all samples - I'll get rid only of those with extremely low variances? Otherwise I could get rid of all of them below 0.15, which is going to be the majority, but if they were not going to be DE anyway...
## Remove lowly expressed proteins
#keep <- rowMeans(trna_ko_log) > mean_log2_across_all_samples_threshold  # e.g., threshold = 5 for log2 CPMs
#trna_ko_log_filtered <- trna_ko_log[keep, ]
## Remove proteins which are extremely non-variable across all samples
#keep_var <- apply(trna_ko_log_filtered, 1, var) > var_across_log2_all_samples_threshold
#trna_ko_log_filtered <- trna_ko_log_filtered[keep_var, ]
## Fit linear model
#fit <- lmFit(trna_ko_log_filtered, mm)
#
#
## Contrasts and eBayes need to be done by batches, otherwise eBayes gets overwhelmed with so many comparisons and such few replicates
## Create all contrasts
#treatments <- colnames(fit$coefficients)
#design <- model.matrix(~ 0 + treatments)
#colnames(design) <- treatments
#contrast_list <- paste0(treatments, "-WT")
#
## Introduce the contrasts and run eBayes for them, 10 at a time
#da <- list()
#batch_size <- 3
#n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
#
#for (i in 1:n_batches) {
#  contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
#  contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
#
#  fit2 <- contrasts.fit(fit, contrast.matrix)
#  fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
#
#  new_contrast_names <- c()
#
#  # Store topTables for each contrast
#  for (contrast_name in colnames(contrast.matrix)) {
#    new_name <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
#    if (grepl(".", new_name)) {
#        substr(new_name, 3, 3) <- "("
#        substr(new_name, 7, 7) <- ")"
#    }
#    da[[new_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
#    da[[new_name]]$Strain.Name <- rep(new_name, nrow(da[[new_name]]))
#  }
#}
#yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
#de_proteins_list <- list()
#for (i in 1:length(da)) {
#  temp <- da[[i]]
#  temp <- na.omit(temp)
#
#  # Collect protein names and turn them all into systematic notation
#  general_protein_names <- rownames(temp)[(temp$adj.P.Val < 0.01) &
#                                          (temp$logFC > lfc_threshold | temp$logFC < -lfc_threshold)]
#  standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
#  systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
#  final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
#                                                                                                 yeastmine = yeastmine,
#                                                                                                 input = "standard",
#                                                                                                 simplify = T))
#
#  # Save protein names
#  de_proteins_list[[names(da)[i]]] <- final_protein_names
#}
#output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep="")
#write_json(de_proteins_list, path=output_file)
#write_json(da, path=paste(base_dir, "Data/Other/enrichment_analysis/da_NEW_TRIAL_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), pretty = T)
## Format data
#da <- bind_rows(da) %>%
#  mutate(protein = rep(rownames(da[[1]]), times = length(da))) %>%
#  dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
#temp <- sample_layout %>%
#  dplyr::distinct(Strain.Name, .keep_all = T)
#da <- left_join(da, temp, by = "Strain.Name") %>%
#  dplyr::relocate(Strain.Name, .before = logFC) %>%
#  dplyr::relocate(protein, .after = Strain.Name) %>%
#  filter(Strain.Name != "WT")
#
#da <- da %>%
#  dplyr::select(protein, Strain.Name, logFC, P.Value, adj.P.Val) %>%                              # From here on in this function it's added by me
#  mutate(diffexpressed_adjusted = case_when((logFC > lfc_threshold) & (adj.P.Val < alpha) ~ "Up_regulated",
#                                            (logFC < -lfc_threshold) & (adj.P.Val < alpha) ~ "Down_regulated",
#                                            TRUE ~ "Not_significant"),
#         diffexpressed_non_adjusted = case_when((logFC > lfc_threshold) & (P.Value < alpha) ~ "Up_regulated",
#                                                (logFC < -lfc_threshold) & (P.Value < alpha) ~ "Down_regulated",
#                                                TRUE ~ "Not_significant"))
#
#da <- da %>%
#  dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
#
## Add a column to da with the number of replicates per KO - by me
#unique_KOs <- unique(da$Strain.Name)
#replicates <- c()
#for (i in 1:length(unique_KOs)) {
#  KO <- unique_KOs[i]
#  replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
#}
#KOs_replicates <- data.frame(unique_KOs, replicates)
#colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
#da <- merge(da, KOs_replicates, by = "Strain.Name")
#
## Responsiveness
#responsiveness <- da %>%
#  group_by(Strain.Name) %>%
#  summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
#            Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
#            Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
#            Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
#            Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
#            Replicate_num = mean(Replicate_num)) %>%
#  mutate(Amino_acid_1_letter = str_sub(Strain.Name, 2, 2),
#         chromosome_letter = substr(Strain.Name, 8, 8),
#         anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))"),
#         up_down_regulated_ratio_adjusted = Up_regulated_adjusted/Down_regulated_adjusted,
#         up_down_regulated_ratio_non_adjusted = Up_regulated_non_adjusted/Down_regulated_non_adjusted) %>%
#  arrange(Amino_acid_1_letter) %>%
#  mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
#
## Add all amino acid names
#amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
#responsiveness <- left_join(responsiveness, amino_acids, by = "Amino_acid_1_letter")
#
## Save responsiveness dataset
#fwrite(responsiveness, paste(base_dir, "Data/responsiveness_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".csv", sep=""))
#
## Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
#DE <- list(fit = fit,
#            fit2 = fit2,
#            da = da,
#            responsiveness= responsiveness)
#
#
#
## Remove unnecesary variables
##rm(amino_acids, DE, de_proteins_list_001, fit, fit2, KOs_replicates, mm, temp, trna_ko_log,
##   yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
##   systematic_protein_names, trna_levels, unique_KOs, trna_ko)
# From .RData
load(paste(base_dir, "Data/Other/limpa_analysis/limpa_analysis_results.RData", sep=""))
# From .rds
dpcfit <- readRDS(paste(base_dir, "Data/Other/limpa_analysis/dpcfit.rds", sep=""))
y.protein <- readRDS(paste(base_dir, "Data/Other/limpa_analysis/y.protein.rds", sep=""))
fit <- readRDS(paste(base_dir, "Data/Other/limpa_analysis/fit.rds", sep=""))
# Set this so I don't have to change its name in the code below
trna_ko <- y.protein$E
# Re-run the parts that don't take so long
## Get the names of all KOs we have, and set WT as the reference
trna_levels <- c()
for (i in 1:ncol(trna_ko)) {
sample_name <- colnames(trna_ko)[i]
strain_name <- sample_layout$Strain.Name[sample_layout$final_proteomics_colnames == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
trna_levels <- c(trna_levels, strain_name)
}
trna_levels <- as.factor(trna_levels)
trna_levels <- relevel(trna_levels, ref = "WT")
## Generate design matrix
mm <- model.matrix(~ 0 + trna_levels)
colnames(mm) <- levels(trna_levels)
fit <- dpcDE(y.protein, mm)
# Limpa QC plots
#plotDPC(dpcfit)
#plotMDSUsingSEs(y.protein)
## Average expression of each protein across all samples - need to get this working for limpa!!
#hist(rowMeans(y.protein))
#hist(apply(y.protein, 1, var), breaks = 60)
#mean(apply(y.protein, 1, var))
#median(apply(y.protein, 1, var))
# This is what they provide, I wonder if they use the kind of design matrix that Alexis used
# I did not, so I am going to introduce contrasts here? I hope that makes sense?
## Create all contrasts - need to susbtitute parentheses in strain names by dots so that it runs...
treatments <- colnames(fit$coefficients)
treatments <- sapply(treatments, function(x) str_replace(x, "\\(", "."))
treatments <- sapply(treatments, function(x) str_replace(x, "\\)", "."))
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-WT")
## Need to change parentheses to dots in the fit object as well so they match...
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\(", "."))
colnames(fit$coefficients) <- sapply(colnames(fit$coefficients), function(x) str_replace(x, "\\)", "."))
## Introduce the contrasts and run eBayes for them, 10 at a time
da <- list()
batch_size <- 10
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
new_contrast_names <- c()
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
new_name <- substr(contrast_name, 1, str_locate(contrast_name, "-")-1)
if (grepl(".", new_name)) {
substr(new_name, 3, 3) <- "("
substr(new_name, 7, 7) <- ")"
}
da[[new_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
da[[new_name]]$Strain.Name <- rep(new_name, nrow(da[[new_name]]))
}
}
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
de_proteins_list <- list()
for (i in 1:length(da)) {
temp <- da[[i]]
temp <- na.omit(temp)
# Collect protein names and turn them all into systematic notation
general_protein_names <- rownames(temp)[(temp$adj.P.Val < alpha) &
(temp$logFC > lfc_threshold | temp$logFC < -lfc_threshold)]
standard_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.symbol]
systematic_protein_names <- general_protein_names[general_protein_names %in% yeastmine$Gene.secondaryIdentifier]
final_protein_names <- c(systematic_protein_names, match_systematic_and_standard_protein_names(data = standard_protein_names,
yeastmine = yeastmine,
input = "standard",
simplify = T))
# Save protein names
de_proteins_list[[names(da)[i]]] <- final_protein_names
}
output_file <- paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep="")
write_json(de_proteins_list, path=output_file)
write_json(da, path=paste(base_dir, "Data/Other/enrichment_analysis/da_NEW_TRIAL_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".json", sep=""), pretty = T)
# Format data
da <- bind_rows(da) %>%
mutate(protein = rep(rownames(da[[1]]), times = length(da))) %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
temp <- sample_layout %>%
dplyr::distinct(Strain.Name, .keep_all = T)
da <- left_join(da, temp, by = "Strain.Name") %>%
dplyr::relocate(Strain.Name, .before = logFC) %>%
dplyr::relocate(protein, .after = Strain.Name) %>%
filter(Strain.Name != "WT")
da <- da %>%
dplyr::select(protein, Strain.Name, logFC, P.Value, adj.P.Val) %>%                              # From here on in this function it's added by me
mutate(diffexpressed_adjusted = case_when((logFC > lfc_threshold) & (adj.P.Val < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (adj.P.Val < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"),
diffexpressed_non_adjusted = case_when((logFC > lfc_threshold) & (P.Value < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (P.Value < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"))
da <- da %>%
dplyr::distinct(Strain.Name, protein, logFC, .keep_all = T)
# Add a column to da with the number of replicates per KO - by me
unique_KOs <- unique(da$Strain.Name)
replicates <- c()
for (i in 1:length(unique_KOs)) {
KO <- unique_KOs[i]
replicates <- c(replicates, sum(grepl(KO, colnames(trna_ko), fixed = T)))
}
KOs_replicates <- data.frame(unique_KOs, replicates)
colnames(KOs_replicates) <- c("Strain.Name", "Replicate_num")
da <- merge(da, KOs_replicates, by = "Strain.Name")
# Responsiveness
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num)) %>%
mutate(Amino_acid_1_letter = str_sub(Strain.Name, 2, 2),
chromosome_letter = substr(Strain.Name, 8, 8),
anticodon = str_extract(Strain.Name, "(?<=\\()[[:alpha:]]{3}(?=\\))"),
up_down_regulated_ratio_adjusted = Up_regulated_adjusted/Down_regulated_adjusted,
up_down_regulated_ratio_non_adjusted = Up_regulated_non_adjusted/Down_regulated_non_adjusted) %>%
arrange(Amino_acid_1_letter) %>%
mutate(anticodon = factor(anticodon, levels = unique(anticodon)))
# Add all amino acid names
amino_acids <- as.data.frame(fread(paste(base_dir, "Data/Other/GtRNAdb/amino_acids.csv", sep="")))
responsiveness <- left_join(responsiveness, amino_acids, by = "Amino_acid_1_letter")
# Save responsiveness dataset
fwrite(responsiveness, paste(base_dir, "Data/responsiveness_", alpha_plain, "_logFC_", as.character(lfc_threshold), ".csv", sep=""))
# Save results from the DE analysis in the same way as in the file where I do DE separately for each batch
DE <- list(fit = fit,
fit2 = fit2,
da = da,
responsiveness= responsiveness)
# Remove unnecesary variables
rm(amino_acids, DE, de_proteins_list, fit, fit2, KOs_replicates, mm, temp, trna_levels, contrast.matrix, design, fit3,
yeastmine, final_protein_names, general_protein_names, i, KO, output_file, replicates, sample_name, standard_protein_names, strain_name,
systematic_protein_names, unique_KOs, trna_ko, dpcfit)
# Calculate CV
proteomics <- as.data.frame(y.protein$E)
proteomics$protein <- rownames(proteomics)
proteomics_data_log2_long <- pivot_longer(proteomics, cols = !protein, names_to = "final_proteomics_colnames")
proteomics_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name)
proteomics_data_log2_long <- left_join(proteomics_data_log2_long, proteomics_layout, by = "final_proteomics_colnames") %>%
group_by(Strain.Name) %>%
dplyr::mutate(CV_strain = robust_cv(value)) %>%                    # CV for samples of the same family (biological replicates), across all proteins
ungroup() %>%
group_by(protein) %>%
dplyr::mutate(CV_protein = robust_cv(value)) %>%                   # CV for a protein, across all samples
ungroup()
# Plot
plot_cv_per_protein <- proteomics_data_log2_long %>%                       # dataset for plotting CV per protein
dplyr::select(protein, CV_protein) %>%
dplyr::distinct(protein, .keep_all = T)
plot_cv_per_strain <- proteomics_data_log2_long %>%                        # dataset for plotting CV per sample
dplyr::select(Strain.Name, CV_strain) %>%
dplyr::distinct(Strain.Name, .keep_all = T)
ggplot(data = plot_cv_per_protein, aes(x = protein, y = CV_protein)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth = .1, color="black"),  # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Proteins") +
ylab("CV per protein") +
labs(title = "Coefficient of variation (CV) per protein",
subtitle = "Across all samples") +
geom_text_repel(data = subset(plot_cv_per_protein, CV_protein > 0.4),
aes(x = protein, y = CV_protein, label = protein),
size = 4)
proteins_with_high_CV <- plot_cv_per_protein$protein[plot_cv_per_protein$CV_protein > 0.4]
ggplot(data = plot_cv_per_strain, aes(x = Strain.Name, y = CV_strain)) +
geom_point() +
theme_light() +
theme(panel.grid.major.x = element_blank(),                              # remove the vertical grid lines
panel.grid.major.y = element_line(linewidth=.1, color="black"),    # explicitly set the horizontal lines (or they will disappear too)
axis.text.x=element_blank(),                                       # remove x axis labels
axis.ticks.x=element_blank()) +                                    # remove x axis ticks
xlab("Strains") +
ylab("CV per strain") +
labs(title = "Coefficient of variation (CV) per strain",
subtitle = "Across all proteins") +
geom_text_repel(data = subset(plot_cv_per_strain, CV_strain > 0.35 | CV_strain < 0.2),
aes(x = Strain.Name, y = CV_strain, label = Strain.Name),
size = 4)
strains_with_high_CV <- plot_cv_per_strain$Strain.Name[plot_cv_per_strain$CV_strain > 0.35]
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3) - just going to take the average between the replicated #samples
## Come up with the averages
n_occur <- data.frame(table(colnames(proteomics)))
repeated_samples <- as.character(n_occur$Var1)[n_occur$Freq > 1]
out_temp <- data.frame(matrix(ncol = 0, nrow = nrow(proteomics)))
for (i in 1:length(repeated_samples)) {
strain <- repeated_samples[i]
temp <- proteomics[, colnames(proteomics) == strain]
temp[,1] <- as.numeric(temp[,1])
temp[,2] <- as.numeric(temp[,2])
out <- c(apply(temp, 1, mean))
out_temp[,i] <- out
}
colnames(out_temp) <- repeated_samples
## Remove original columns from dataframe and add the averaged ones
proteomics_no_repeated_columns <- proteomics[,!(colnames(proteomics) %in% repeated_samples)]
proteomics_no_repeated_columns <- cbind(proteomics_no_repeated_columns, out_temp)
# Create dataset for ploting
temp_layout <- sample_layout %>%
dplyr::select(final_proteomics_colnames, Strain.Name, Anticodon, Amino_acid_1_letter)
high_cv_proteins_proteomics <- proteomics_no_repeated_columns %>%
dplyr::filter(protein %in% proteins_with_high_CV) %>%
pivot_longer(cols = !protein, names_to = "final_proteomics_colnames") %>%
left_join(temp_layout, by = "final_proteomics_colnames") %>%
dplyr::mutate(Anticodon = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Anticodon),
Amino_acid_1_letter = case_when(Strain.Name == "WT" ~ "WT",
TRUE ~ Amino_acid_1_letter))
# Plot
proteins <- unique(high_cv_proteins_proteomics$protein)
## Iterate over the proteins and make the same plot for all of them
for (i in 1:length(proteins)) {
protein_selected <- proteins[i]
plot <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected), aes(x = Amino_acid_1_letter, y = value)) +
geom_boxplot(fill = "grey") +
theme_light()
print(plot)
myLetters <- letters[1:26]                            # Need this to be able to re-order anticodons by amino acid
myLetters <- c(myLetters, "wt")                       # Need to add this so it doesn't break down because "WT" is not a letter
plot_2 <- ggplot(data = subset(high_cv_proteins_proteomics, protein == protein_selected),
aes(x = fct_reorder(Anticodon, match(tolower(Amino_acid_1_letter), myLetters)), y = value, fill = Amino_acid_1_letter)) +
geom_boxplot() +
theme_light()
print(plot_2)
}
