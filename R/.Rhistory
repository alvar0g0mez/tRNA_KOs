fwrite(trna_ko, paste(base_dir, "Data/Other/proteomics_data/processed_proteomics_dataframe_batchcorrected_onWTs.tsv", sep=""), row.names = T)
}
# Remove unnecessary objects
rm(proteomics_raw, n_occur, repeated_samples, out_temp, strain, temp, out, i, new_names, samples_in_wrong_batch, current_names)
ggplot(data = sample_layout, aes(x = Replicate, y = date)) +
geom_point()
# Get data PCA-ready
PCA_data <- as.data.frame(t(trna_ko))
# Get PCA tags for different cases - define a function for this, then call it before running the corresponding plot
get_PCA_tags <- function(PCA_data, sample_layout, type_of_tags) {
out <- c()
for (i in 1:nrow(PCA_data)) {
rowname <- rownames(PCA_data)[i]
out <- c(out, sample_layout[sample_layout$final_protemics_colnames == rowname, type_of_tags][1])
}
return(out)
}
# FOR THESE ONES TO WORK AGAIN I WILL PROBABLY HAVE TO MERGE SAMPLE_LAYOUT AND MASTER_DATASET, PROBABLY EASY
PCA_tags_aa <- get_PCA_tags(PCA_data, sample_layout, "AA")
PCA_tags_chr <- get_PCA_tags(PCA_data, sample_layout, "chromosome")
PCA_tags_anticodon <- get_PCA_tags(PCA_data, sample_layout, "anticodon")
#calculate principal components
results_PCA <- prcomp(PCA_data, scale = TRUE)
#reverse the signs
results_PCA$rotation <- -1*results_PCA$rotation
#calculate total variance explained by each principal component
var_explained =  results_PCA$sdev^2 / sum(results_PCA$sdev^2)
var_exp_PC1 = format(round(var_explained[1]*100, 3), nsmall = 3)
var_exp_PC2 = format(round(var_explained[2]*100, 3), nsmall = 3)
# Label by batch
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Replicate")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by batch") +
theme_light()
# Label by date
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "date")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by date") +
theme_light()
# Label by Analysis.Plate.384
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.384")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.384") +
theme_light()
# Label by Analysis.Column.384
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Column.384")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Column.384") +
theme_light()
# Label by Analysis.Row.384
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Row.384")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Row.384") +
theme_light()
# Label by Analysis.Plate.96
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.96")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.96") +
theme_light()
# Label by Analysis.Row.96
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Row.96")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Row.96") +
theme_light()
# Label by Analysis.Column.96
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Column.96")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Column.96") +
theme_light()
# Label by Strain.Type (WT or KO)
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Strain.Type")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Strain.Type") +
theme_light()
# Label by Analysis.Plate.96_Replicate
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Analysis.Plate.96_Replicate")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Analysis.Plate.96_Analysis.Plate.384 - complete") +
theme_light()
# Label by Wrong_batch
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Wrong_batch")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by Wrong_batch - full data") +
theme_light()
# Label by chromosome
# Label by anticodon
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Anticodon")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by anticodon") +
theme_light()
# Label by amino acid
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Best_isotype_model")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by amino acid") +
theme_light()
# Label by intron in the tRNA gene
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "Intron")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - intron in the tRNA gene") +
theme_light()
# Label by whether they are iMet or not
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "iMet")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by whether they are iMet or not") +
theme_light()
# Label by gene seq length
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "length_DNA_seq")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by gene seq length") +
theme_light()
# Label by mature seq length
PCA_tags <- get_PCA_tags(PCA_data, sample_layout, "length_mature_seq")
PC <- as.data.frame(results_PCA$x)
PC$Label<- as.factor(PCA_tags)
#PC <- PC %>% filter(Label != "WT")
ggplot(data = PC, aes(x = PC1, y = PC2, col = Label)) +
geom_point() +
xlab(glue("PC1 - {var_exp_PC1}%")) +
ylab(glue("PC2 - {var_exp_PC2}%")) +
labs(title = "PCA plot - by mature seq length") +
theme_light()
rm(PCA_tags, var_exp_PC1, var_exp_PC2, var_explained, get_PCA_tags, PC, PCA_data, results_PCA)
# Add column with subbatches to stats file
stats_file <- left_join(stats_file, sample_layout[,c("File.Name", "Analysis.Plate.96", "Replicate", "Analysis.Plate.96_Replicate", "Strain.Type",
"Wrong_batch", "date", "Date_Injection_Order")], by = "File.Name")
# The stats file
stats_file <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/report.stats.tsv.gz"))
# Add column with subbatches to stats file
stats_file <- left_join(stats_file, sample_layout[,c("File.Name", "Analysis.Plate.96", "Replicate", "Analysis.Plate.96_Replicate", "Strain.Type",
"Wrong_batch", "date", "Date_Injection_Order")], by = "File.Name")
# Plot precursor number vs. protein number coloring by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. protein number, color by whether they are in the wrong batch or not
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_wrong_batch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Wrong_batch)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot protein number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by date
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_date.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = date)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. MS1.Signal coloring by sub-batch
ggplot(data = stats_file, aes(x = MS1.Signal, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
# Plot precursor number vs. protein number coloring by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. protein number, color by whether they are in the wrong batch or not
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_wrong_batch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Wrong_batch)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot protein number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by date
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_date.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = as.factor(date))) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. MS1.Signal coloring by sub-batch
ggplot(data = stats_file, aes(x = MS1.Signal, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
View(stats_file)
# Plot precursor number vs. protein number coloring by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. protein number, color by whether they are in the wrong batch or not
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_wrong_batch.png", sep="")
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Wrong_batch)) +
geom_point() +
theme_light()
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot protein number vs. date_injection_order, color by sub-batch
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_vs_proteins_identified_by_subbatch.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. date_injection_order, color by date
output_file <- paste(base_dir, "Output/Plots/QC/stats_file/precs_identified_vs_injection_by_date.png", sep="")
ggplot(data = stats_file, aes(x = Date_Injection_Order, y = Precursors.Identified, col = as.factor(date))) +
geom_point() +
theme_light() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# Remove the vertical grid lines
panel.grid.major.x = element_blank())
ggsave(output_file)
# Plot precursor number vs. MS1.Signal coloring by sub-batch
ggplot(data = stats_file, aes(x = MS1.Signal, y = Precursors.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
# Get the heatmap
mat = as.matrix(log2(trna_ko))
col_fun = colorRamp2(c(5, 12.5, 20), c("blue", "white", "red"))     # Not using this now but this is how you do it
Heatmap(mat,
name = "Heatmap",
col = col_fun,
na_col = "black",
row_title = "Proteins",
column_title = "Samples",
#cluster_rows = FALSE,                  # Turn row clustering off, I assume we already know the relationships between the genes
column_dend_height = unit(2, "cm"),
show_row_names = FALSE,
column_names_gp = gpar(fontsize = 5))
mat_zscore = t(apply(log2(trna_ko), 1, function(x) (x-median(x, na.rm = T))/mad(x, na.rm = T)))
col_fun = colorRamp2(c(-4, -2, 0, 2, 4), c("blue", "blue", "white", "red", "red"))
Heatmap(mat_zscore,
name = "Heatmap",
#col = col_fun,
na_col = "green",
row_title = "Proteins",
column_title = "Samples",
#column_labels = grepl("QC", colnames(mat_zscore)),
#cluster_rows = FALSE,                  # Turn row clustering off, I assume we already know the relationships between the genes
column_dend_height = unit(2, "cm"),
show_row_names = FALSE,
column_names_gp = gpar(fontsize = 5))
drift <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/04_ComputationalProteomics/ktextori@20230425+1332_30-0092-withQCs/driftcorrection_r2_df.tsv"))
drift <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/driftcorrection_r2_df.tsv"))
View(drift)
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = date)) +
geom_point() +
theme_light()
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(date))) +
geom_point() +
theme_light()
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Strain.Type)) +
geom_point() +
theme_light()
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(date))) +
geom_point() +
theme_light()
temp <- stats_file %>%
mutate(QCs = case_when(Analysis.Plate.96 = "QC" ~"QC",
TRUE ~ "Not"))
temp <- stats_file %>%
mutate(QCs = case_when(Analysis.Plate.96 == "QC" ~"QC",
TRUE ~ "Not"))
ggplot(data = temp, aes(x = Precursors.Identified, y = Proteins.Identified, col = QCs)) +
geom_point() +
theme_light()
ggplot(data = temp, aes(x = Precursors.Identified, y = Proteins.Identified, col = Replicate)) +
geom_point() +
theme_light()
ggplot(data = temp, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(Replicate))) +
geom_point() +
theme_light()
View(master_dataset)
knitr::opts_chunk$set(echo = TRUE)
# Turn the rownames to all be systematic gene names rather than standard and systematic mixed
yeastmine <- as.data.frame(fread(paste(base_dir, "Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
View(yeastmine)
# Add also the synthetase abundance we detect in our WTs
## Remove those synthetases we didn't detect in our data, as well as GRS2 (only active under stress)
synthetases <- fread(paste(base_dir, "Data/trna_synthetases.csv", sep=""))
View(synthetases)
temp <- synthetases %>% dplyr::select(-c(measured_proteomics_WT))
View(temp)
fwrite(temp, "C:/Users/algo12/Downloads/synthetases.tsv")
temp <- synthetases %>% dplyr::select(-c(amino_acid_type, amino_acid_charge))
temp <- synthetases %>% dplyr::select(-c(amino_acid_type, amino_acid_charge, measured_proteomics_WT))
fwrite(temp, "C:/Users/algo12/Downloads/synthetases.tsv")
temp <- master_dataset %>% dplyr::select(GtRNAdb_gene_symbol, tRNAscan_SE_ID, Locus, Anticodon, Isotype_from_anticodon, Isotype_from_anticodon_1_letter, Best_isotype_model, Best_isotype_model_1_letter, Isotype_model_score, Anticodon_and_isotype_model_agreement, General_tRNA_model_score, Intron, Mismatch, GtRNADB_name, iMet, DNA_sequence, mature_sequence, length_DNA_seq, length_mature_seq, Family_size)
fwrite(temp, "C:/Users/algo12/Downloads/tRNAs.tsv")
# Precs vs. proteins, color by batch/384-well plate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(Replicate))) +
geom_point() +
theme_light()
# Precs vs. proteins, color by 96-well plate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by date
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = date)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by KO or WT
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Strain.Type)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by batch/384-well plate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(Replicate))) +
geom_point() +
theme_light()
# Precs vs. proteins, color by 96-well plate
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Analysis.Plate.96_Replicate)) +
geom_point() +
theme_light()
# Precs vs. proteins, color by date
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = as.factor(date))) +
geom_point() +
theme_light()
# Precs vs. proteins, color by KO or WT
ggplot(data = stats_file, aes(x = Precursors.Identified, y = Proteins.Identified, col = Strain.Type)) +
geom_point() +
theme_light()
report <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_reprep_driftcorrected_batchcorrected_onWTs.tsv"))
View(report)
View(stats_file)
View(sample_layout)
# Get this into a format that can be useful
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t()
# Load data
report <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_reprep_driftcorrected_batchcorrected_onWTs.tsv"))
# Get this into a format that can be useful
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t() %>%
mutate(Precursor.Quantity = rowSums(na.rm = T)) %>%
dplyr::select(Precursor.Quantity)
# Get this into a format that can be useful
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t() %>%
mutate(Precursor.Quantity = rowSums(select(everything()), na.rm = T)) %>%
dplyr::select(Precursor.Quantity)
apply(report, 1, sum())
apply(report, 1, FUN = sum())
apply(report, 1, FUN = sum(na.rm = T))
apply(report, 1, FUN = sum)
# Get this into a format that can be useful
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t()
new_report <- as.data.frame(apply(report, 1, FUN = sum))
rownames(new_report) <- rownames(report)
View(new_report)
new_report <- as.data.frame(apply(report, 1, FUN = sum, na.rm = T))
rownames(new_report) <- rownames(report)
new_report$Sample.ID.unique <- str_replace_all(rownames(report), "-", "_")
# Load data
report <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_reprep_driftcorrected_batchcorrected_onWTs.tsv"))
# Get this into a format that can be useful
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t()
new_report <- as.data.frame(Precursor.Quantity = apply(report, 1, FUN = sum, na.rm = T))
new_report <- data.frame(Precursor.Quantity = apply(report, 1, FUN = sum, na.rm = T))
new_report$Sample.ID.unique <- str_replace_all(rownames(report), "-", "_")
# Load data
report <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_reprep_driftcorrected_batchcorrected_onWTs.tsv"))
# Get this into a format that can be useful
report <- report %>%
dplyr::select(-c(Precursor.Id, Stripped.Sequence, Protein.Group, Genes)) %>%
t()
new_report <- data.frame(Precursor.Quantity = apply(report, 1, FUN = sum, na.rm = T))
new_report$Sample.ID.unique <- str_replace_all(rownames(report), "-", "_")
new_report <- left_join(new_report, sample_layout, by = "Sample.ID.unique")
