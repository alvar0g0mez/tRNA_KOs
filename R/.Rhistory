de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
KOs_with_anticodon <- names(de_proteins_list_001)[grepl(anticodon, names(de_proteins_list_001))]
list_of_vectors <- de_proteins_list_001
vectors_to_be_used <- KOs_with_anticodon
# Create emtpy matrix to be filled and returned
output_matrix <- matrix(nrow = length(vectors_to_be_used), ncol = length(vectors_to_be_used))
colnames(output_matrix) <- rownames(output_matrix) <- vectors_to_be_used
View(output_matrix)
i = 1
name_1 <- vectors_to_be_used[i]
vector_1 <- list_of_vectors[[names(list_of_vectors) == name_1]]
names(list_of_vectors) == name_1
sum(names(list_of_vectors) == name_1)
vector_1 <- list_of_vectors[names(list_of_vectors) == name_1]
View(vector_1)
vector_1 <- unlist(list_of_vectors[names(list_of_vectors) == name_1])
View(de_proteins_list_001)
new_row <- c()
for(j in 1:length(vectors_to_be_used)) {
name_2 <- vectors_to_be_used[j]
vector_2 <- unlist(list_of_vectors[names(list_of_vectors) == name_2])
new_row <- c(new_row, jaccard(vector_1, vector_2))
}
new_row
jaccad_index_matrix <- function(list_of_vectors, vectors_to_be_used) {
# Create emtpy matrix to be filled and returned
output_matrix <- matrix(nrow = length(vectors_to_be_used), ncol = length(vectors_to_be_used))
colnames(output_matrix) <- rownames(output_matrix) <- vectors_to_be_used
# Iterate over the vectors
for (i in 1:length(vectors_to_be_used)) {
name_1 <- vectors_to_be_used[i]
vector_1 <- unlist(list_of_vectors[names(list_of_vectors) == name_1])
# For each of the vectors, iterate over all vectors again, for each pair get
# the Jaccard index and add it to a vector, which will be a row in the matrix
new_row <- c()
for(j in 1:length(vectors_to_be_used)) {
name_2 <- vectors_to_be_used[j]
vector_2 <- unlist(list_of_vectors[names(list_of_vectors) == name_2])
new_row <- c(new_row, jaccard(vector_1, vector_2))
}
output_matrix[i,] <- new_row
}
return(output_matrix)
}
get_jaccad_index_matrix <- function(list_of_vectors, vectors_to_be_used) {
# Create emtpy matrix to be filled and returned
output_matrix <- matrix(nrow = length(vectors_to_be_used), ncol = length(vectors_to_be_used))
colnames(output_matrix) <- rownames(output_matrix) <- vectors_to_be_used
# Iterate over the vectors
for (i in 1:length(vectors_to_be_used)) {
name_1 <- vectors_to_be_used[i]
vector_1 <- unlist(list_of_vectors[names(list_of_vectors) == name_1])
# For each of the vectors, iterate over all vectors again, for each pair get
# the Jaccard index and add it to a vector, which will be a row in the matrix
new_row <- c()
for(j in 1:length(vectors_to_be_used)) {
name_2 <- vectors_to_be_used[j]
vector_2 <- unlist(list_of_vectors[names(list_of_vectors) == name_2])
new_row <- c(new_row, jaccard(vector_1, vector_2))
}
output_matrix[i,] <- new_row
}
return(output_matrix)
}
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_proteins_list_001)[grepl(anticodon, names(de_proteins_list_001))]
jaccard_matrix <- get_jaccad_index_matrix(de_proteins_list_001, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
View(jaccard_matrices_list)
View(output_matrix)
jaccard_matrices_list[["UUC"]]
View(de_proteins_list_001)
# Preparations: remove KOs with 0 DE proteins from list, grab anticodon names, create empty list to put Jaccard index matrices there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_proteins_list_001)[grepl(anticodon, names(de_proteins_list_001))]
jaccard_matrix <- get_jaccad_index_matrix(de_proteins_list_001, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
jaccard_matrices_list[["GCU"]]
View(de_protein_list)
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(names(de_protein_list))
jaccard_matrices_list <- list()
# Iterate over the anticodons
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_proteins_list_001)[grepl(anticodon, names(de_proteins_list_001))]
jaccard_matrix <- get_jaccad_index_matrix(de_proteins_list_001, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
list_of_vectors <- de_protein_list
vectors_to_be_used <- KOs_with_anticodon
# Create emtpy matrix to be filled and returned
output_matrix <- matrix(nrow = length(vectors_to_be_used), ncol = length(vectors_to_be_used))
colnames(output_matrix) <- rownames(output_matrix) <- vectors_to_be_used
i = 1
name_1 <- vectors_to_be_used[i]
vector_1 <- unlist(list_of_vectors[names(list_of_vectors) == name_1])
new_row <- c()
for(j in 1:length(vectors_to_be_used)) {
name_2 <- vectors_to_be_used[j]
vector_2 <- unlist(list_of_vectors[names(list_of_vectors) == name_2])
new_row <- c(new_row, jaccard(vector_1, vector_2))
}
output_matrix[i,] <- new_row
View(output_matrix)
# List of dataframes with the proteins that were DE in each KO strain - at alpha = 0.01
de_proteins_list_001 <- fromJSON(paste(base_dir, "Data/Other/enrichment_analysis/de_proteins_list_001.json", sep=""))
## Remove WT dataframe
de_proteins_list_001 <- de_proteins_list_001[names(de_proteins_list_001) != "WT"]
# Load responsiveness dataset
responsiveness <- as.data.frame(fread(paste(base_dir, "Data/responsiveness.csv", sep="")))
# Preparations: remove KOs with 0 DE proteins from list, grab anticodon names, create empty list to put Jaccard index matrices there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_proteins_list_001)[grepl(anticodon, names(de_proteins_list_001))]
jaccard_matrix <- get_jaccad_index_matrix(de_proteins_list_001, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
# Remove unnecessary variables
rm(anticodons, )
View(jaccard_matrices_list)
jaccard_matrices_list[["GCA"]]
View(de_protein_list)
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_proteins_list)[grepl(anticodon, names(de_proteins_list))]
jaccard_matrix <- get_jaccad_index_matrix(de_proteins_list, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
# Preparations: remove KOs with 0 DE proteins from list, grab anticodon names, create empty list to put Jaccard index matrices there
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_protein_list)[grepl(anticodon, names(de_protein_list))]
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
View(jaccard_matrices_list)
i = 1
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
View(melt_mat)
ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red")
ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("")
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
anticodon <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - anticodon {anticodon}"))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Jaccard_index_heatmaps_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=4, ncol=4),
width = 15, height = 9
)
output_file = paste(base_dir, "Output/Plots/Jaccard_index_heatmaps_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
de_protein_list <- Filter(function(x) length(x) > 1, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons and get a Jaccard index matrix for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_protein_list)[grepl(anticodon, names(de_protein_list))]
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
# Iterate over the Jaccard index matrices and get a heatmap from each of them
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
anticodon <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - anticodon {anticodon}")) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Jaccard_index_heatmaps_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
# Iterate over the anticodons and get a Jaccard index matrix for each of them
for (i in 1:length(anticodons)) {
# For each anticodon, grab the tRNAs that contain it, and get a matrix with the Jaccard index across them
anticodon <- anticodons[i]
KOs_with_anticodon <- names(de_protein_list)[grepl(anticodon, names(de_protein_list))]
# This is so I don't end up with matrices with a single cell
if (length(KOs_with_anticodon) > 1) {
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_anticodon)
jaccard_matrices_list[[anticodon]] <- jaccard_matrix
}
}
# Iterate over the Jaccard index matrices and get a heatmap from each of them
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
anticodon <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - anticodon {anticodon}")) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "Output/Plots/Jaccard_index_heatmaps_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
View(responsiveness)
i = 1
amino_acids <- unique(responsiveness$AA)
# For each amino acid, grab the tRNAs that carry it, and get a matrix with the Jaccard index across them
aa <- amino_acids[i]
anticodons <- unique(responsiveness$anticodon[responsiveness$AA == aa])
View(responsiveness)
KOs_with_anticodon <- names(de_protein_list)[names(de_protein_list %in% anticodons]
KOs_with_anticodon <- names(de_protein_list)[names(de_protein_list) %in% anticodons]
View(de_protein_list)
strain_names <- unique(responsiveness$Strain.Name[responsiveness$AA == aa])
KOs_with_anticodon <- names(de_protein_list)[names(de_protein_list) %in% strain_names]
KOs_with_anticodon
View(responsiveness)
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
amino_acids <- unique(responsiveness$AA)
jaccard_matrices_list <- list()
# Iterate over the amino acids and get a Jaccard index matrix for each of them
for (i in 1:length(amino_acids)) {
# For each amino acid, grab the tRNAs that carry it, and get a matrix with the Jaccard index across them
aa <- amino_acids[i]
strain_names <- unique(responsiveness$Strain.Name[responsiveness$AA == aa])
KOs_with_amino_acid <- names(de_protein_list)[names(de_protein_list) %in% strain_names]
# This is so I don't end up with matrices with a single cell
if (length(KOs_with_amino_acid) > 1) {
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_amino_acid)
jaccard_matrices_list[[aa]] <- jaccard_matrix
}
}
# Iterate over the Jaccard index matrices and get a heatmap from each of them
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
aa <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - anticodon {aa}")) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/Jaccard_index_heatmaps_per_amino_acid.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=2, ncol=3),
width = 15, height = 9
)
de_protein_list <- Filter(function(x) length(x) > 0, de_proteins_list_001)
amino_acids <- unique(responsiveness$AA)
jaccard_matrices_list <- list()
# Iterate over the amino acids and get a Jaccard index matrix for each of them
for (i in 1:length(amino_acids)) {
# For each amino acid, grab the tRNAs that carry it, and get a matrix with the Jaccard index across them
aa <- amino_acids[i]
strain_names <- unique(responsiveness$Strain.Name[responsiveness$AA == aa])
KOs_with_amino_acid <- names(de_protein_list)[names(de_protein_list) %in% strain_names]
# This is so I don't end up with matrices with a single cell
if (length(KOs_with_amino_acid) > 1) {
jaccard_matrix <- get_jaccad_index_matrix(de_protein_list, KOs_with_amino_acid)
jaccard_matrices_list[[aa]] <- jaccard_matrix
}
}
# Iterate over the Jaccard index matrices and get a heatmap from each of them
plot_list <- list()
for (i in 1:length(jaccard_matrices_list)) {
aa <- names(jaccard_matrices_list)[i]
mat <- jaccard_matrices_list[[i]]
melt_mat <- melt(mat)
plot_list[[i]] <- ggplot(melt_mat, aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "red") +
xlab("") +
ylab("") +
labs(title = glue("Jaccard index heatmap - amino acid: {aa}")) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/Jaccard_index_heatmaps_per_amino_acid.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=2, ncol=3),
width = 15, height = 9
)
View(de_proteins_list_001)
i = 1
anticodons <- unique(responsiveness$anticodon)
jaccard_matrices_list <- list()
anticodon <- anticodons[i]
# For this anticodon, get a count of the appearances of the DEPs
all_de_proteins <- unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))])
table(all_de_proteins)
# For this anticodon, get a count of the appearances of the DEPs
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))])))
View(all_de_proteins)
all_de_proteins <- rbind(all_de_proteins, c("Num. of KOs", sum(grepl(anticodon, names(de_proteins_list_001)))))
all_de_proteins$Var1 <- as.character(all_de_proteins$Var1)
all_de_proteins <- rbind(all_de_proteins, c("Num. of KOs", sum(grepl(anticodon, names(de_proteins_list_001)))))
ggplot(data = all_de_proteins, aes(x = Var1, y = Freq)) +
geom_bar()
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))])
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))]))
colnames(all_de_proteins) <- c("H")
ggplot(data = all_de_proteins, aes(x = H)) +
geom_bar()
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))])))
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))]))) %>%
group_by(Freq) %>%
summarise(n = n())
ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar
ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar()
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))]))) #%>%
ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar()
all_de_proteins$Freq <- as.factor(all_de_proteins$Freq)
ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar()
sum(grepl(anticodon, names(de_proteins_list_001)))
ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar() +
xlab("In how many KOs was a protein DE?") +
ylab("Count") +
labs(title = glue("Anticodon {anticodon} - {sum(grepl(anticodon, names(de_proteins_list_001)))} total KOs"))
ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar() +
xlab("Number of KOs in which proteins where DE") +
ylab("Number of DE proteins") +
labs(title = glue("Anticodon {anticodon} - {sum(grepl(anticodon, names(de_proteins_list_001)))} total KOs"))
# Preparations: grab anticodon names, create empty list to put the plots there
anticodons <- unique(responsiveness$anticodon)
plot_list <- list()
# Iterate over anticodons
for (i in 1:length(anticodons)) {
anticodon <- anticodons[i]
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))])))
all_de_proteins$Freq <- as.factor(all_de_proteins$Freq)
plot_list[[i]] <- ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar() +
xlab("Number of KOs in which proteins where DE") +
ylab("Number of DE proteins") +
labs(title = glue("Anticodon {anticodon} - {sum(grepl(anticodon, names(de_proteins_list_001)))} total KOs"))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/barplots_DE_counts_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
# Preparations: grab amino acid names, create empty list to put the plots there
amino_acids <- unique(responsiveness$AA)
plot_list <- list()
# Iterate over amino acids
for (i in 1:length(amino_acids)) {
aa <- amino_acids[i]
strain_names <- unique(responsiveness$Strain.Name[responsiveness$AA == aa])
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[names(de_proteins_list_001) %in% strain_names])))
all_de_proteins$Freq <- as.factor(all_de_proteins$Freq)
plot_list[[i]] <- ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar() +
xlab("Number of KOs in which proteins where DE") +
ylab("Number of DE proteins") +
labs(title = glue("Amino acid {aa} - {sum(names(de_proteins_list_001) %in% strain_names)} total KOs"))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/barplots_DE_counts_per_amino_acid.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
# Preparations: grab anticodon names, create empty list to put the plots there
anticodons <- unique(responsiveness$anticodon)
plot_list <- list()
# Iterate over anticodons
for (i in 1:length(anticodons)) {
anticodon <- anticodons[i]
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[grepl(anticodon, names(de_proteins_list_001))])))
all_de_proteins$Freq <- as.factor(all_de_proteins$Freq)
plot_list[[i]] <- ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar() +
theme_light() +
xlab("Number of KOs in which proteins where DE") +
ylab("Number of DE proteins") +
labs(title = glue("Anticodon {anticodon} - {sum(grepl(anticodon, names(de_proteins_list_001)))} total KOs"))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/barplots_DE_counts_per_anticodon.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
# Preparations: grab amino acid names, create empty list to put the plots there
amino_acids <- unique(responsiveness$AA)
plot_list <- list()
# Iterate over amino acids
for (i in 1:length(amino_acids)) {
aa <- amino_acids[i]
strain_names <- unique(responsiveness$Strain.Name[responsiveness$AA == aa])
# For this anticodon, get a count of the appearances of the DEPs, and a barplot
all_de_proteins <- data.frame(table(unlist(de_proteins_list_001[names(de_proteins_list_001) %in% strain_names])))
all_de_proteins$Freq <- as.factor(all_de_proteins$Freq)
plot_list[[i]] <- ggplot(data = all_de_proteins, aes(x = Freq)) +
geom_bar() +
theme_light() +
xlab("Number of KOs in which proteins where DE") +
ylab("Number of DE proteins") +
labs(title = glue("Amino acid {aa} - {sum(names(de_proteins_list_001) %in% strain_names)} total KOs"))
}
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file <- paste(base_dir, "Output/Plots/compare_DEPs_across_KOs/barplots_DE_counts_per_amino_acid.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
