theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family")
2/7
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.35),
aes(x = Family_count, y = Major_count))
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.35),
aes(x = Family_count, y = Major_count, label = Anticodon))
colnames(family_sizes_long)[colnames(family_sizes_long) == "anticodon"] <- "Anticodon"
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.35),
aes(x = Family_count, y = Major_count, label = anticodon))
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.35),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 2)
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.35),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 3)
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 3)
# What is the relationship between Family_count and Major_count?
ggplot(data = family_sizes, aes(x = Family_count, y = Major_count)) +
geom_point() +
geom_abline() +
geom_smooth(method='lm') +
theme_light() +
xlab("Genes in this family in the experiment") +
ylab("Major genes detected in the family") +
geom_text_repel(data = subset(family_sizes, Major_count/Family_count >= 1 | Major_count/Family_count < 0.3),
aes(x = Family_count, y = Major_count, label = anticodon),
size = 4)
View(responsiveness)
gc()
# Try to figure out correspondence between tRNA gene names and systematic SC gene names
yeastmine <- as.data.frame(fread("C:/MyStuff/ScRAP/Code/Biological questions/Data/yeastmine_results_2.tsv"))
library(data.table)
library(dplyr)
library(xlsx)
library(stringr)
# Try to figure out correspondence between tRNA gene names and systematic SC gene names
yeastmine <- as.data.frame(fread("C:/MyStuff/ScRAP/Code/Biological questions/Data/yeastmine_results_2.tsv"))
View(yeastmine)
# Try to figure out correspondence between tRNA gene names and systematic SC gene names
yeastmine <- as.data.frame(fread("C:/MyStuff/ScRAP/Code/Biological questions/Data/yeastmine_results_2.tsv", fill = T))
View(yeastmine)
# Try to figure out correspondence between tRNA gene names and systematic SC gene names
yeastmine <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/alliancemine_results_2024-11-20T11-19-04.tsv", fill = T))
View(yeastmine)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
trna_abundance <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/trna_abundance_chu_et_al_2011.csv"))
View(trna_abundance)
# Our proteomics data
proteomics_raw <- read.delim2('C:/MyStuff/tRNAs/Data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv')
# The sample layout
sample_layout <- read.xlsx("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/02_SampleManagement/01_SampleLayout/20230301_MM_30-0092_layout.xlsx", 1)
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNAs/Scripts/R/Mine/0.general_use_functions.R")
View(master_dataset)
proteomics_raw <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv"))
gc()
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
# Load data
proteomics_raw <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv"))
View(proteomics_raw)
# Load libraries
library(data.table)
library(dplyr)
library(xlsx)
library(stringr)
#-----------------------------------------------------------------------------------------
# 1. Dealing with the database from GtRNAdb
# Load data
db <- read.xlsx("C:/MyStuff/tRNAs/data/GtRNAdb/GtRNAdb_gene_list.xlsx", 1)
# 1.1. Come up with Intron and Mismatch columns from the Features column
## Create empty columns
db$Intron <- NA
db$Mismatch <- NA
for (i in 1:nrow(db)) {
# If we have mismatch information from the row above
if (grepl("mismatch", db$Features[i]) & is.na(db$Anticodon_and_isotype_model_agreement[i])) {
db$Mismatch[i-1] <- as.numeric(regmatches(db$Features[i], regexpr("(?<=: ).*", db$Features[i], perl = TRUE)))
#db <- db[-c(i),]
}
# If we have mismatch information from this row
else if (grepl("mismatch", db$Features[i])) {
db$Mismatch[i] <- as.numeric(regmatches(db$Features[i], regexpr("(?<=: ).*", db$Features[i], perl = TRUE)))
}
# If we have intron information (only possible for this row)
else if (grepl("intron", db$Features[i])) {
db$Intron[i] <- as.numeric(regmatches(db$Features[i], regexpr("(?<=: ).*", db$Features[i], perl = TRUE)))
}
}
## Remove rows that only contained mismatch information for the previous row
db <- subset(db, !is.na(Anticodon))
## Remove Features column
db <- db %>% select(-Features)
## Turn NAs in these 2 columns into 0s
db <- db %>%
mutate(Intron = case_when(is.na(Intron) ~ 0,
TRUE ~ Intron),
Mismatch = case_when(is.na(Mismatch) ~ 0,
TRUE ~ Mismatch))
# 1.2. Match 3-letter codes to 1-letter codes
## Load dataframe with amino acid information
aas <- fread("C:/MyStuff/tRNAs/data/GtRNAdb/amino_acids.csv")
aas <- as.data.frame(aas)
## Add new columns
aas_temp <- aas %>% select(X3_letter_code, X1_letter_code)
colnames(aas_temp) <- c("Isotype_from_anticodon", "Isotype_from_anticodon_1_letter")
db <- left_join(db, aas_temp, by = "Isotype_from_anticodon")
colnames(aas_temp) <- c("Best_isotype_model", "Best_isotype_model_1_letter")
db <- left_join(db, aas_temp, by = "Best_isotype_model")
## Remove unnecessary variables
rm(aas, aas_temp, i)
# 1.3. Come up with an ID like the one they use in the original article, which they
# call "GtRNADB_name", to be able to join both datasets based on it
## Create empty column
db$GtRNADB_name <- NA
## Iterate over every row and add the corresponding name to the new column
for (i in 1:nrow(db)) {
og_name <- db$tRNAscan_SE_ID[i]
# Special case - these two tRNAs whose codons are not known for some reason?
if (grepl("Und", db$GtRNAdb_gene_symbol[i])) {
new_name <- paste(og_name, "-Undet???", sep = "")
db$GtRNADB_name[i] <- new_name
}
# All other cases
else {
new_name <- paste(og_name, "-", db$Isotype_from_anticodon[i], db$Anticodon[i], sep = "")
db$GtRNADB_name[i] <- new_name
}
}
# 1.4. Turn those "iMet" IDs into just "Met" so they can match with the phenotypic dataset, and create an
# extra column where I keep that info of which Methionines are initiators
db <- db %>%
mutate(iMet = case_when(grepl("iMet", GtRNADB_name) ~ "Yes",
TRUE ~ "No")) %>%
mutate(GtRNADB_name = case_when(grepl("iMet", GtRNADB_name) ~ gsub("iMetCAT", "MetCAT", GtRNADB_name),
TRUE ~ GtRNADB_name))
## Remove unnecessary variables
rm(og_name, new_name, i)
View(db)
# 2.0. Load phenotypic results dataset
phenotypic_results <- fread("C:/MyStuff/tRNAs/data/bloom_ackermann_2014/phenotypic_results.tsv")
View(phenotypic_results)
View(db)
# 2.1. Add columns
master_dataset <- db %>%
mutate(KOd = case_when(GtRNADB_name %in% phenotypic_results$GtRNADB_name ~ "Yes",
TRUE ~ "No"))
View(master_dataset)
sum(master_dataset$KOd == "Yes")
## Remove unnecessary variables
rm(phenotypic_results, db)
trna_seqs <- read.csv("C:/MyStuff/tRNAs/Data/GtRNAdb/gene_and_mature_tRNA_seqs.csv")
master_dataset <- left_join(master_dataset, trna_seqs, by = "GtRNADB_name")
# Add columns with the length of each of the sequences
master_dataset <- master_dataset %>%
mutate(length_DNA_seq = nchar(DNA_sequence),
length_mature_seq = nchar(mature_sequence))
## Remove unnecessary variables
rm(trna_seqs)
View(master_dataset)
knitr::opts_chunk$set(echo = TRUE)
# The sample layout
sample_layout <- read.xlsx("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv", 1)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
View(sample_layout)
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# Load data
proteomics_raw <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv"))
View(proteomics_raw)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv", header = T))
# Our proteomics data
proteomics_raw <- read.delim2('C:/MyStuff/tRNAs/Data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', , header = T)
View(proteomics_raw)
i = 1
strain_and_batch <- sample_names[i]
strain_and_batch <- colnames(proteomics_raw)[i]
i = 3
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- as.numeric(str_extract(strain_and_batch, "(?<=\\.).*"))
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
trna_ko <- proteomics_raw %>%
rename(all_of(sample_names)) %>%              # Rename colnames with the original colnames + _ + original contents of row 1
rename(genes = 'X_') %>%                      # Rename the second column to "genes"
filter(!(genes %in% c('', 'Genes'))) %>%      # Remove rows for which "genes" column is empty or has "Genes" as value
select(-sample_group & !contains('QC')) %>%   # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'genes')
colnames(proteomics_raw) <- new_names
new_names <- c("sample_group", "X_")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
rename(genes = 'X_') %>%                      # Rename the second column to "genes"
filter(!(genes %in% c('', 'Genes'))) %>%      # Remove rows for which "genes" column is empty or has "Genes" as value
select(-sample_group & !contains('QC')) %>%   # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'genes')             # Convert gene name column to rownames
View(master_dataset)
library(data.table)
library(dplyr)
library(xlsx)
library(stringr)
#-----------------------------------------------------------------------------------------
# 1. Dealing with the database from GtRNAdb
# Load data
db <- read.xlsx("C:/MyStuff/tRNAs/data/GtRNAdb/GtRNAdb_gene_list.xlsx", 1)
# 1.1. Come up with Intron and Mismatch columns from the Features column
## Create empty columns
db$Intron <- NA
db$Mismatch <- NA
for (i in 1:nrow(db)) {
# If we have mismatch information from the row above
if (grepl("mismatch", db$Features[i]) & is.na(db$Anticodon_and_isotype_model_agreement[i])) {
db$Mismatch[i-1] <- as.numeric(regmatches(db$Features[i], regexpr("(?<=: ).*", db$Features[i], perl = TRUE)))
#db <- db[-c(i),]
}
# If we have mismatch information from this row
else if (grepl("mismatch", db$Features[i])) {
db$Mismatch[i] <- as.numeric(regmatches(db$Features[i], regexpr("(?<=: ).*", db$Features[i], perl = TRUE)))
}
# If we have intron information (only possible for this row)
else if (grepl("intron", db$Features[i])) {
db$Intron[i] <- as.numeric(regmatches(db$Features[i], regexpr("(?<=: ).*", db$Features[i], perl = TRUE)))
}
}
## Remove rows that only contained mismatch information for the previous row
db <- subset(db, !is.na(Anticodon))
## Remove Features column
db <- db %>% select(-Features)
## Turn NAs in these 2 columns into 0s
db <- db %>%
mutate(Intron = case_when(is.na(Intron) ~ 0,
TRUE ~ Intron),
Mismatch = case_when(is.na(Mismatch) ~ 0,
TRUE ~ Mismatch))
# 1.2. Match 3-letter codes to 1-letter codes
## Load dataframe with amino acid information
aas <- fread("C:/MyStuff/tRNAs/data/GtRNAdb/amino_acids.csv")
aas <- as.data.frame(aas)
## Add new columns
aas_temp <- aas %>% select(X3_letter_code, X1_letter_code)
colnames(aas_temp) <- c("Isotype_from_anticodon", "Isotype_from_anticodon_1_letter")
db <- left_join(db, aas_temp, by = "Isotype_from_anticodon")
colnames(aas_temp) <- c("Best_isotype_model", "Best_isotype_model_1_letter")
db <- left_join(db, aas_temp, by = "Best_isotype_model")
## Remove unnecessary variables
rm(aas, aas_temp, i)
# 1.3. Come up with an ID like the one they use in the original article, which they
# call "GtRNADB_name", to be able to join both datasets based on it
## Create empty column
db$GtRNADB_name <- NA
## Iterate over every row and add the corresponding name to the new column
for (i in 1:nrow(db)) {
og_name <- db$tRNAscan_SE_ID[i]
# Special case - these two tRNAs whose codons are not known for some reason?
if (grepl("Und", db$GtRNAdb_gene_symbol[i])) {
new_name <- paste(og_name, "-Undet???", sep = "")
db$GtRNADB_name[i] <- new_name
}
# All other cases
else {
new_name <- paste(og_name, "-", db$Isotype_from_anticodon[i], db$Anticodon[i], sep = "")
db$GtRNADB_name[i] <- new_name
}
}
# 1.4. Turn those "iMet" IDs into just "Met" so they can match with the phenotypic dataset, and create an
# extra column where I keep that info of which Methionines are initiators
db <- db %>%
mutate(iMet = case_when(grepl("iMet", GtRNADB_name) ~ "Yes",
TRUE ~ "No")) %>%
mutate(GtRNADB_name = case_when(grepl("iMet", GtRNADB_name) ~ gsub("iMetCAT", "MetCAT", GtRNADB_name),
TRUE ~ GtRNADB_name))
## Remove unnecessary variables
rm(og_name, new_name, i)
#-----------------------------------------------------------------------------------------
# 2. Add a KOd column which represents whether that gene could be KOd in the original study or not (so represents
# if it is included in our data or not)
# 2.0. Load phenotypic results dataset
phenotypic_results <- fread("C:/MyStuff/tRNAs/data/bloom_ackermann_2014/phenotypic_results.tsv")
# 2.1. Add columns
master_dataset <- db %>%
mutate(KOd = case_when(GtRNADB_name %in% phenotypic_results$GtRNADB_name ~ "Yes",
TRUE ~ "No"))
## Remove unnecessary variables
rm(phenotypic_results, db)
#-----------------------------------------------------------------------------------------
# 3. Add genetic and mature tRNA sequences from the FASTA files
trna_seqs <- read.csv("C:/MyStuff/tRNAs/Data/GtRNAdb/gene_and_mature_tRNA_seqs.csv")
master_dataset <- left_join(master_dataset, trna_seqs, by = "GtRNADB_name")
# Add columns with the length of each of the sequences
master_dataset <- master_dataset %>%
mutate(length_DNA_seq = nchar(DNA_sequence),
length_mature_seq = nchar(mature_sequence))
## Remove unnecessary variables
rm(trna_seqs)
View(master_dataset)
# 4. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, "C:/MyStuff/tRNAs/data/GtRNAdb/master_tRNA_dataset.csv")
# 4. That's it for now, just save this resulting master dataframe
fwrite(master_dataset, "C:/MyStuff/tRNAs/data/GtRNAdb/master_tRNA_dataset.csv")
knitr::opts_chunk$set(echo = TRUE)
# Come up with new colnames
new_names <- c("sample_group", "X_")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
gc()
# Our proteomics data
proteomics_raw <- read.delim2('C:/MyStuff/tRNAs/Data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/GtRNAdb/master_tRNA_dataset.csv"))
# Import the functions I have created in another file
source("C:/MyStuff/tRNAs/Scripts/R/Mine/0.general_use_functions.R")
# Come up with new colnames
new_names <- c("sample_group", "X_")
for (i in 3:ncol(proteomics_raw)) {
strain_and_batch <- colnames(proteomics_raw)[i]
trna_name <- proteomics_raw[1, i]
batch_num <- str_extract(strain_and_batch, "(?<=\\.).*")
new_name <- paste(trna_name, "_", batch_num, sep = "")
new_names <- c(new_names, new_name)
}
colnames(proteomics_raw) <- new_names
# Format data to get a biological protein abundance dataframe with samples names as colnames and gene names as rownames
trna_ko <- proteomics_raw %>%
dplyr::rename(genes = 'X_') %>%                      # Rename the second column to "genes"
filter(!(genes %in% c('', 'Genes'))) %>%      # Remove rows for which "genes" column is empty or has "Genes" as value
select(-sample_group & !contains('QC')) %>%   # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'genes')             # Convert gene name column to rownames
View(proteomics_raw)
colnames(proteomics_raw)[colnames(proteomics_raw) == "X_"] <- "Genes"
colnames(proteomics_raw)[colnames(proteomics_raw) == "Genes"] <- "genes"
trna_ko <- proteomics_raw %>%
filter(!(genes %in% c('', 'Genes'))) %>%                          # Remove rows for which "genes" column is empty or has "Genes" as value
select(-sample_group & !contains('QC')) %>%                       # Remove UNIPROT IDs and QCs columns
column_to_rownames(var = 'genes')
length(unique(colnames(proteomics_raw)))
# Fix the situation with 2 tRNA_KOs being present twice (so 6 replicates for each instead of 3)
n_occur <- data.frame(table(colnames(proteomics_raw)))
n_occur[n_occur$Freq > 1,]
View(n_occur)
View(sample_layout)
proteomics_raw <- read.delim2('C:/MyStuff/tRNAs/Data/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_batchcorrected.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
length(unique(sample_layout$Sample.ID.unique))
## Create a new unique ID which includes the name of the tRNA that was KOd
sample_layout <- sample_layout %>%
mutate(Strain.Name.Unique = case_when(Strain.Name == "WT" ~ Sample.ID.unique,
TRUE ~ paste(Strain.Name, Sample.ID.unique, sep="_")))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(limma)
library(ggplot2)
library(patchwork)
library(tidyr)
library(tibble)
library(stringr)
library(gprofiler2)
library(xlsx)
library(stringr)
library(gridExtra)
library(grid)
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
library(factoextra)
library(glue)
library(dendextend)
library(ggrepel)
library(ggvenn)
library(tidyr)
# Significance level to be used for all tests and plots in this file
alpha <- 0.01
# Log-fold change limit to be considered "biologically significant"
lfc_threshold <- 1.5
# Our proteomics data
proteomics_raw <- read.delim2('S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_ProteinMaxLFQ_PCAoutlier_removed_complete.tsv', header = T)
# The sample layout
sample_layout <- as.data.frame(fread("S:/AG/AG-CF-HTMS/AG-Ralser-Share/30-0092_AndreaLehmann-AlternativeAAUsage-tRNA/05_DataAnalysis/11_Preprocessing_Boris/AlternativeAAUsage-tRNA/AlternativeAAUsage-tRNA_peptidecentric_PrecursorQuantity_filename_annotations.tsv"))
# The master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/GtRNAdb/master_tRNA_dataset.csv"))
